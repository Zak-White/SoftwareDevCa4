#line 1 "__UE_FILENAME_SENTINEL__"
precise float MakePrecise(in precise float v) { precise float pv = v; return pv; }
precise float2 MakePrecise(in precise float2 v) { precise float2 pv = v; return pv; }
precise float3 MakePrecise(in precise float3 v) { precise float3 pv = v; return pv; }
precise float4 MakePrecise(in precise float4 v) { precise float4 pv = v; return pv; }
float max3(float a, float b, float c)
{
	return max(a, max(b, c));
}
int max3(int a, int b, int c)
{
	return max(a, max(b, c));
}
uint max3(uint a, uint b, uint c)
{
	return max(a, max(b, c));
}
float2 max3 ( float2 a, float2 b, float2 c) { return float2( max3 (a.x , b.x , c.x ), max3 (a.y , b.y , c.y )); }
float3 max3 ( float3 a, float3 b, float3 c) { return float3( max3 (a.xy, b.xy, c.xy), max3 (a.z , b.z , c.z )); }
float4 max3 ( float4 a, float4 b, float4 c) { return float4( max3 (a.xy, b.xy, c.xy), max3 (a.zw, b.zw, c.zw)); }
int2 max3 ( int2 a, int2 b, int2 c) { return int2( max3 (a.x , b.x , c.x ), max3 (a.y , b.y , c.y )); }
int3 max3 ( int3 a, int3 b, int3 c) { return int3( max3 (a.xy, b.xy, c.xy), max3 (a.z , b.z , c.z )); }
int4 max3 ( int4 a, int4 b, int4 c) { return int4( max3 (a.xy, b.xy, c.xy), max3 (a.zw, b.zw, c.zw)); }
uint2 max3 ( uint2 a, uint2 b, uint2 c) { return uint2( max3 (a.x , b.x , c.x ), max3 (a.y , b.y , c.y )); }
uint3 max3 ( uint3 a, uint3 b, uint3 c) { return uint3( max3 (a.xy, b.xy, c.xy), max3 (a.z , b.z , c.z )); }
uint4 max3 ( uint4 a, uint4 b, uint4 c) { return uint4( max3 (a.xy, b.xy, c.xy), max3 (a.zw, b.zw, c.zw)); }
bool select_internal(bool    c, bool a, bool b) { return bool (c   ? a.x : b.x); }
bool2 select_internal(bool    c, bool a, bool2 b) { return bool2(c   ? a   : b.x, c   ? a   : b.y); }
bool2 select_internal(bool    c, bool2 a, bool b) { return bool2(c   ? a.x : b  , c   ? a.y : b  ); }
bool2 select_internal(bool    c, bool2 a, bool2 b) { return bool2(c   ? a.x : b.x, c   ? a.y : b.y); }
bool2 select_internal(bool2   c, bool a, bool b) { return bool2(c.x ? a   : b  , c.y ? a   : b  ); }
bool2 select_internal(bool2   c, bool a, bool2 b) { return bool2(c.x ? a   : b.x, c.y ? a   : b.y); }
bool2 select_internal(bool2   c, bool2 a, bool b) { return bool2(c.x ? a.x : b  , c.y ? a.y : b  ); }
bool2 select_internal(bool2   c, bool2 a, bool2 b) { return bool2(c.x ? a.x : b.x, c.y ? a.y : b.y); }
bool3 select_internal(bool    c, bool a, bool3 b) { return bool3(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z); }
bool3 select_internal(bool    c, bool3 a, bool b) { return bool3(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  ); }
bool3 select_internal(bool    c, bool3 a, bool3 b) { return bool3(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z); }
bool3 select_internal(bool3   c, bool a, bool b) { return bool3(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  ); }
bool3 select_internal(bool3   c, bool a, bool3 b) { return bool3(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z); }
bool3 select_internal(bool3   c, bool3 a, bool b) { return bool3(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  ); }
bool3 select_internal(bool3   c, bool3 a, bool3 b) { return bool3(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z); }
bool4 select_internal(bool    c, bool a, bool4 b) { return bool4(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z, c   ? a   : b.w); }
bool4 select_internal(bool    c, bool4 a, bool b) { return bool4(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  , c   ? a.w : b  ); }
bool4 select_internal(bool    c, bool4 a, bool4 b) { return bool4(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z, c   ? a.w : b.w); }
bool4 select_internal(bool4   c, bool a, bool b) { return bool4(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  , c.w ? a   : b  ); }
bool4 select_internal(bool4   c, bool a, bool4 b) { return bool4(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z, c.w ? a   : b.w); }
bool4 select_internal(bool4   c, bool4 a, bool b) { return bool4(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  , c.w ? a.w : b  ); }
bool4 select_internal(bool4   c, bool4 a, bool4 b) { return bool4(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z, c.w ? a.w : b.w); }
int select_internal(bool    c, int a, int b) { return int (c   ? a.x : b.x); }
int2 select_internal(bool    c, int a, int2 b) { return int2(c   ? a   : b.x, c   ? a   : b.y); }
int2 select_internal(bool    c, int2 a, int b) { return int2(c   ? a.x : b  , c   ? a.y : b  ); }
int2 select_internal(bool    c, int2 a, int2 b) { return int2(c   ? a.x : b.x, c   ? a.y : b.y); }
int2 select_internal(bool2   c, int a, int b) { return int2(c.x ? a   : b  , c.y ? a   : b  ); }
int2 select_internal(bool2   c, int a, int2 b) { return int2(c.x ? a   : b.x, c.y ? a   : b.y); }
int2 select_internal(bool2   c, int2 a, int b) { return int2(c.x ? a.x : b  , c.y ? a.y : b  ); }
int2 select_internal(bool2   c, int2 a, int2 b) { return int2(c.x ? a.x : b.x, c.y ? a.y : b.y); }
int3 select_internal(bool    c, int a, int3 b) { return int3(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z); }
int3 select_internal(bool    c, int3 a, int b) { return int3(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  ); }
int3 select_internal(bool    c, int3 a, int3 b) { return int3(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z); }
int3 select_internal(bool3   c, int a, int b) { return int3(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  ); }
int3 select_internal(bool3   c, int a, int3 b) { return int3(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z); }
int3 select_internal(bool3   c, int3 a, int b) { return int3(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  ); }
int3 select_internal(bool3   c, int3 a, int3 b) { return int3(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z); }
int4 select_internal(bool    c, int a, int4 b) { return int4(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z, c   ? a   : b.w); }
int4 select_internal(bool    c, int4 a, int b) { return int4(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  , c   ? a.w : b  ); }
int4 select_internal(bool    c, int4 a, int4 b) { return int4(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z, c   ? a.w : b.w); }
int4 select_internal(bool4   c, int a, int b) { return int4(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  , c.w ? a   : b  ); }
int4 select_internal(bool4   c, int a, int4 b) { return int4(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z, c.w ? a   : b.w); }
int4 select_internal(bool4   c, int4 a, int b) { return int4(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  , c.w ? a.w : b  ); }
int4 select_internal(bool4   c, int4 a, int4 b) { return int4(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z, c.w ? a.w : b.w); }
float select_internal(bool    c, float a, float b) { return float (c   ? a.x : b.x); }
float2 select_internal(bool    c, float a, float2 b) { return float2(c   ? a   : b.x, c   ? a   : b.y); }
float2 select_internal(bool    c, float2 a, float b) { return float2(c   ? a.x : b  , c   ? a.y : b  ); }
float2 select_internal(bool    c, float2 a, float2 b) { return float2(c   ? a.x : b.x, c   ? a.y : b.y); }
float2 select_internal(bool2   c, float a, float b) { return float2(c.x ? a   : b  , c.y ? a   : b  ); }
float2 select_internal(bool2   c, float a, float2 b) { return float2(c.x ? a   : b.x, c.y ? a   : b.y); }
float2 select_internal(bool2   c, float2 a, float b) { return float2(c.x ? a.x : b  , c.y ? a.y : b  ); }
float2 select_internal(bool2   c, float2 a, float2 b) { return float2(c.x ? a.x : b.x, c.y ? a.y : b.y); }
float3 select_internal(bool    c, float a, float3 b) { return float3(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z); }
float3 select_internal(bool    c, float3 a, float b) { return float3(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  ); }
float3 select_internal(bool    c, float3 a, float3 b) { return float3(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z); }
float3 select_internal(bool3   c, float a, float b) { return float3(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  ); }
float3 select_internal(bool3   c, float a, float3 b) { return float3(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z); }
float3 select_internal(bool3   c, float3 a, float b) { return float3(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  ); }
float3 select_internal(bool3   c, float3 a, float3 b) { return float3(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z); }
float4 select_internal(bool    c, float a, float4 b) { return float4(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z, c   ? a   : b.w); }
float4 select_internal(bool    c, float4 a, float b) { return float4(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  , c   ? a.w : b  ); }
float4 select_internal(bool    c, float4 a, float4 b) { return float4(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z, c   ? a.w : b.w); }
float4 select_internal(bool4   c, float a, float b) { return float4(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  , c.w ? a   : b  ); }
float4 select_internal(bool4   c, float a, float4 b) { return float4(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z, c.w ? a   : b.w); }
float4 select_internal(bool4   c, float4 a, float b) { return float4(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  , c.w ? a.w : b  ); }
float4 select_internal(bool4   c, float4 a, float4 b) { return float4(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z, c.w ? a.w : b.w); }
float  CondMask(bool Cond, float  Src0, float  Src1) { return Cond ? Src0 : Src1; }
float2 CondMask(bool Cond, float2 Src0, float2 Src1) { return Cond ? Src0 : Src1; }
float3 CondMask(bool Cond, float3 Src0, float3 Src1) { return Cond ? Src0 : Src1; }
float4 CondMask(bool Cond, float4 Src0, float4 Src1) { return Cond ? Src0 : Src1; }
int  CondMask(bool Cond, int  Src0, int  Src1) { return Cond ? Src0 : Src1; }
int2 CondMask(bool Cond, int2 Src0, int2 Src1) { return Cond ? Src0 : Src1; }
int3 CondMask(bool Cond, int3 Src0, int3 Src1) { return Cond ? Src0 : Src1; }
int4 CondMask(bool Cond, int4 Src0, int4 Src1) { return Cond ? Src0 : Src1; }
uint  CondMask(bool Cond, uint  Src0, uint  Src1) { return Cond ? Src0 : Src1; }
uint2 CondMask(bool Cond, uint2 Src0, uint2 Src1) { return Cond ? Src0 : Src1; }
uint3 CondMask(bool Cond, uint3 Src0, uint3 Src1) { return Cond ? Src0 : Src1; }
uint4 CondMask(bool Cond, uint4 Src0, uint4 Src1) { return Cond ? Src0 : Src1; }
uint BitFieldExtractU32(uint Data, uint Size, uint Offset)
{
	Size &= 31;
	Offset &= 31;
	return (Data >> Offset) & ((1u << Size) - 1u);
}
struct FDFScalar
{
	float High;
	float Low;
};
FDFScalar MakeDFScalar(float High, float Low)
{
	FDFScalar Result;
	Result.High = High;
	Result.Low = Low;
	return Result;
}
FDFScalar DFPromote(FDFScalar Value) { return Value; }
FDFScalar DFPromote(float Value) { return MakeDFScalar(Value, (float)0); }
float DFDemote(FDFScalar Value) { return Value.High + Value.Low; }
float DFDemote(float Value) { return Value; }
FDFScalar DFNegate(FDFScalar Value)
{
	return MakeDFScalar(-Value.High, -Value.Low);
}
FDFScalar DFTwoSum(float Lhs, float Rhs)
{
	const float S =   MakePrecise( ( Lhs ) + ( Rhs ) );
	const float V =   MakePrecise( ( S ) - ( Lhs ) );
	const float Q =   MakePrecise( ( S ) - ( V ) );
	const float R =   MakePrecise( ( Lhs ) - ( Q ) );
	const float T =   MakePrecise( ( Rhs ) - ( V ) );
	const float Y =   MakePrecise( ( R ) + ( T ) );
	return MakeDFScalar(S, Y);
}
FDFScalar DFFastTwoSum(float Lhs, float Rhs)
{
	const float S =   MakePrecise( ( Lhs ) + ( Rhs ) );
	const float T =   MakePrecise( ( S ) - ( Lhs ) );
	const float E =   MakePrecise( ( Rhs ) - ( T ) );
	return MakeDFScalar(S, E);
}
float DFFastLocalSubtractDemote(FDFScalar Lhs, FDFScalar Rhs)
{
	const float High =   MakePrecise( ( Lhs.High ) - ( Rhs.High ) );
	const float Low =   MakePrecise( ( Lhs.Low ) - ( Rhs.Low ) );
	const float Sum =   MakePrecise( ( High ) + ( Low ) );
	return Sum;
}
float DFFastLocalSubtractDemote(FDFScalar Lhs, float Rhs)
{
	const float High =   MakePrecise( ( Lhs.High ) - ( Rhs ) );
	const float Sum =   MakePrecise( ( High ) + ( Lhs.Low ) );
	return Sum;
}
float DFFastLocalSubtractDemote(float Lhs, FDFScalar Rhs)
{
	return DFFastLocalSubtractDemote(DFPromote(Lhs), Rhs);
}
FDFScalar DFTwoProduct(float Lhs, float Rhs)
{
	const float P = Lhs * Rhs;
	const float E =   MakePrecise(  mad( ( Lhs ) , ( Rhs ) , ( -P ) ) );
	return MakeDFScalar(P, E);
}
FDFScalar DFMultiply(float Lhs, float Rhs) { return DFTwoProduct(Lhs, Rhs); }
FDFScalar DFMultiply(FDFScalar Lhs, FDFScalar Rhs)
{
	const FDFScalar P = DFTwoProduct(Lhs.High, Rhs.High);
	float T =   MakePrecise( ( Lhs.High ) * ( Rhs.Low ) );
	T =   MakePrecise(  mad( ( Lhs.Low ) , ( Rhs.High ) , ( T ) ) );
	T =   MakePrecise( ( T ) + ( P.Low ) );
	return DFFastTwoSum(P.High, T);
}
FDFScalar DFMultiply(FDFScalar Lhs, float Rhs)
{
	FDFScalar P = DFTwoProduct(Lhs.High, Rhs);
	float T =   MakePrecise(  mad( ( Lhs.Low ) , ( Rhs ) , ( P.Low ) ) );
	return DFFastTwoSum(P.High, T);
}
FDFScalar DFMultiply(float Lhs, FDFScalar Rhs) { return DFMultiply(Rhs, Lhs); }
FDFScalar DFFastDivide(FDFScalar Lhs, FDFScalar Rhs);
FDFScalar DFFastDivide(FDFScalar Lhs, FDFScalar Rhs)
{
	const float Th =   MakePrecise( ( Lhs.High ) / ( Rhs.High ) );
	const FDFScalar R = DFMultiply(Rhs, Th);
	const float Ph =   MakePrecise( ( Lhs.High ) - ( R.High ) );
	const float Dl =   MakePrecise( ( Lhs.Low ) - ( R.Low ) );
	const float D =   MakePrecise( ( Ph ) + ( Dl ) );
	const float Tl =   MakePrecise( ( D ) / ( Rhs.High ) );
	return DFFastTwoSum(Th, Tl);
}
FDFScalar DFFastDivide(FDFScalar Lhs, float Rhs)
{
	const float Th =   MakePrecise( ( Lhs.High ) / ( Rhs ) );
	const FDFScalar R = DFTwoProduct(Rhs, Th);
	const float Ph =   MakePrecise( ( Lhs.High ) - ( R.High ) );
	const float Dl =   MakePrecise( ( Lhs.Low ) - ( R.Low ) );
	const float D =   MakePrecise( ( Ph ) + ( Dl ) );
	const float Tl =   MakePrecise( ( D ) / ( Rhs ) );
	return DFFastTwoSum(Th, Tl);
}
FDFScalar DFFastDivide(float Lhs, FDFScalar Rhs) { return DFFastDivide(DFPromote(Lhs), Rhs); }
FDFScalar DFFastDivide(float Lhs, float Rhs) { return DFFastDivide(DFPromote(Lhs), Rhs); }
struct FDFVector2
{
	float2 High;
	float2 Low;
};
FDFVector2 MakeDFVector2(float2 High, float2 Low)
{
	FDFVector2 Result;
	Result.High = High;
	Result.Low = Low;
	return Result;
}
FDFVector2 DFPromote(FDFVector2 Value) { return Value; }
FDFVector2 DFPromote(float2 Value) { return MakeDFVector2(Value, (float2)0); }
float2 DFDemote(FDFVector2 Value) { return Value.High + Value.Low; }
float2 DFDemote(float2 Value) { return Value; }
FDFVector2 DFNegate(FDFVector2 Value)
{
	return MakeDFVector2(-Value.High, -Value.Low);
}
FDFVector2 DFTwoSum(float2 Lhs, float2 Rhs)
{
	const float2 S =   MakePrecise( ( Lhs ) + ( Rhs ) );
	const float2 V =   MakePrecise( ( S ) - ( Lhs ) );
	const float2 Q =   MakePrecise( ( S ) - ( V ) );
	const float2 R =   MakePrecise( ( Lhs ) - ( Q ) );
	const float2 T =   MakePrecise( ( Rhs ) - ( V ) );
	const float2 Y =   MakePrecise( ( R ) + ( T ) );
	return MakeDFVector2(S, Y);
}
FDFVector2 DFFastTwoSum(float2 Lhs, float2 Rhs)
{
	const float2 S =   MakePrecise( ( Lhs ) + ( Rhs ) );
	const float2 T =   MakePrecise( ( S ) - ( Lhs ) );
	const float2 E =   MakePrecise( ( Rhs ) - ( T ) );
	return MakeDFVector2(S, E);
}
float2 DFFastLocalSubtractDemote(FDFVector2 Lhs, FDFVector2 Rhs)
{
	const float2 High =   MakePrecise( ( Lhs.High ) - ( Rhs.High ) );
	const float2 Low =   MakePrecise( ( Lhs.Low ) - ( Rhs.Low ) );
	const float2 Sum =   MakePrecise( ( High ) + ( Low ) );
	return Sum;
}
float2 DFFastLocalSubtractDemote(FDFVector2 Lhs, float2 Rhs)
{
	const float2 High =   MakePrecise( ( Lhs.High ) - ( Rhs ) );
	const float2 Sum =   MakePrecise( ( High ) + ( Lhs.Low ) );
	return Sum;
}
float2 DFFastLocalSubtractDemote(float2 Lhs, FDFVector2 Rhs)
{
	return DFFastLocalSubtractDemote(DFPromote(Lhs), Rhs);
}
FDFVector2 DFTwoProduct(float2 Lhs, float2 Rhs)
{
	const float2 P = Lhs * Rhs;
	const float2 E =   MakePrecise(  mad( ( Lhs ) , ( Rhs ) , ( -P ) ) );
	return MakeDFVector2(P, E);
}
FDFVector2 DFMultiply(float2 Lhs, float2 Rhs) { return DFTwoProduct(Lhs, Rhs); }
FDFVector2 DFMultiply(FDFVector2 Lhs, FDFVector2 Rhs)
{
	const FDFVector2 P = DFTwoProduct(Lhs.High, Rhs.High);
	float2 T =   MakePrecise( ( Lhs.High ) * ( Rhs.Low ) );
	T =   MakePrecise(  mad( ( Lhs.Low ) , ( Rhs.High ) , ( T ) ) );
	T =   MakePrecise( ( T ) + ( P.Low ) );
	return DFFastTwoSum(P.High, T);
}
FDFVector2 DFMultiply(FDFVector2 Lhs, float2 Rhs)
{
	FDFVector2 P = DFTwoProduct(Lhs.High, Rhs);
	float2 T =   MakePrecise(  mad( ( Lhs.Low ) , ( Rhs ) , ( P.Low ) ) );
	return DFFastTwoSum(P.High, T);
}
FDFVector2 DFMultiply(float2 Lhs, FDFVector2 Rhs) { return DFMultiply(Rhs, Lhs); }
FDFVector2 DFFastDivide(FDFVector2 Lhs, FDFVector2 Rhs);
FDFVector2 DFFastDivide(FDFVector2 Lhs, FDFVector2 Rhs)
{
	const float2 Th =   MakePrecise( ( Lhs.High ) / ( Rhs.High ) );
	const FDFVector2 R = DFMultiply(Rhs, Th);
	const float2 Ph =   MakePrecise( ( Lhs.High ) - ( R.High ) );
	const float2 Dl =   MakePrecise( ( Lhs.Low ) - ( R.Low ) );
	const float2 D =   MakePrecise( ( Ph ) + ( Dl ) );
	const float2 Tl =   MakePrecise( ( D ) / ( Rhs.High ) );
	return DFFastTwoSum(Th, Tl);
}
FDFVector2 DFFastDivide(FDFVector2 Lhs, float2 Rhs)
{
	const float2 Th =   MakePrecise( ( Lhs.High ) / ( Rhs ) );
	const FDFVector2 R = DFTwoProduct(Rhs, Th);
	const float2 Ph =   MakePrecise( ( Lhs.High ) - ( R.High ) );
	const float2 Dl =   MakePrecise( ( Lhs.Low ) - ( R.Low ) );
	const float2 D =   MakePrecise( ( Ph ) + ( Dl ) );
	const float2 Tl =   MakePrecise( ( D ) / ( Rhs ) );
	return DFFastTwoSum(Th, Tl);
}
FDFVector2 DFFastDivide(float2 Lhs, FDFVector2 Rhs) { return DFFastDivide(DFPromote(Lhs), Rhs); }
FDFVector2 DFFastDivide(float2 Lhs, float2 Rhs) { return DFFastDivide(DFPromote(Lhs), Rhs); }
FDFVector2 DFBroadcast2(FDFScalar V)
{
	const float2 High = V.High;
	const float2 Low = V.Low;
	return MakeDFVector2(High, Low);
}
float2 DFBroadcast2(float V)
{
	const float2 Single = V;
	return Single;
}
FDFVector2  DFMultiply (FDFScalar Lhs, FDFVector2 Rhs) { return DFMultiply (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFMultiply (float Lhs, FDFVector2 Rhs) { return DFMultiply (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFMultiply (FDFScalar Lhs, float2 Rhs) { return DFMultiply (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFMultiply (float Lhs, float2 Rhs) { return DFMultiply (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFMultiply (FDFVector2 Lhs, FDFScalar Rhs) { return DFMultiply (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFMultiply (FDFVector2 Lhs, float Rhs)     { return DFMultiply (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFMultiply (float2 Lhs, FDFScalar Rhs) { return DFMultiply (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFMultiply (float2 Lhs, float Rhs) { return DFMultiply (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFFastDivide (FDFScalar Lhs, FDFVector2 Rhs) { return DFFastDivide (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFFastDivide (float Lhs, FDFVector2 Rhs) { return DFFastDivide (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFFastDivide (FDFScalar Lhs, float2 Rhs) { return DFFastDivide (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFFastDivide (float Lhs, float2 Rhs) { return DFFastDivide (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFFastDivide (FDFVector2 Lhs, FDFScalar Rhs) { return DFFastDivide (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFFastDivide (FDFVector2 Lhs, float Rhs)     { return DFFastDivide (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFFastDivide (float2 Lhs, FDFScalar Rhs) { return DFFastDivide (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFFastDivide (float2 Lhs, float Rhs) { return DFFastDivide (Lhs, DFBroadcast2(Rhs)); }
struct FDFVector3
{
	float3 High;
	float3 Low;
};
FDFVector3 MakeDFVector3(float3 High, float3 Low)
{
	FDFVector3 Result;
	Result.High = High;
	Result.Low = Low;
	return Result;
}
FDFVector3 DFPromote(FDFVector3 Value) { return Value; }
FDFVector3 DFPromote(float3 Value) { return MakeDFVector3(Value, (float3)0); }
float3 DFDemote(FDFVector3 Value) { return Value.High + Value.Low; }
float3 DFDemote(float3 Value) { return Value; }
FDFVector3 DFNegate(FDFVector3 Value)
{
	return MakeDFVector3(-Value.High, -Value.Low);
}
FDFVector3 DFTwoSum(float3 Lhs, float3 Rhs)
{
	const float3 S =   MakePrecise( ( Lhs ) + ( Rhs ) );
	const float3 V =   MakePrecise( ( S ) - ( Lhs ) );
	const float3 Q =   MakePrecise( ( S ) - ( V ) );
	const float3 R =   MakePrecise( ( Lhs ) - ( Q ) );
	const float3 T =   MakePrecise( ( Rhs ) - ( V ) );
	const float3 Y =   MakePrecise( ( R ) + ( T ) );
	return MakeDFVector3(S, Y);
}
FDFVector3 DFFastTwoSum(float3 Lhs, float3 Rhs)
{
	const float3 S =   MakePrecise( ( Lhs ) + ( Rhs ) );
	const float3 T =   MakePrecise( ( S ) - ( Lhs ) );
	const float3 E =   MakePrecise( ( Rhs ) - ( T ) );
	return MakeDFVector3(S, E);
}
float3 DFFastLocalSubtractDemote(FDFVector3 Lhs, FDFVector3 Rhs)
{
	const float3 High =   MakePrecise( ( Lhs.High ) - ( Rhs.High ) );
	const float3 Low =   MakePrecise( ( Lhs.Low ) - ( Rhs.Low ) );
	const float3 Sum =   MakePrecise( ( High ) + ( Low ) );
	return Sum;
}
float3 DFFastLocalSubtractDemote(FDFVector3 Lhs, float3 Rhs)
{
	const float3 High =   MakePrecise( ( Lhs.High ) - ( Rhs ) );
	const float3 Sum =   MakePrecise( ( High ) + ( Lhs.Low ) );
	return Sum;
}
float3 DFFastLocalSubtractDemote(float3 Lhs, FDFVector3 Rhs)
{
	return DFFastLocalSubtractDemote(DFPromote(Lhs), Rhs);
}
FDFVector3 DFTwoProduct(float3 Lhs, float3 Rhs)
{
	const float3 P = Lhs * Rhs;
	const float3 E =   MakePrecise(  mad( ( Lhs ) , ( Rhs ) , ( -P ) ) );
	return MakeDFVector3(P, E);
}
FDFVector3 DFMultiply(float3 Lhs, float3 Rhs) { return DFTwoProduct(Lhs, Rhs); }
FDFVector3 DFMultiply(FDFVector3 Lhs, FDFVector3 Rhs)
{
	const FDFVector3 P = DFTwoProduct(Lhs.High, Rhs.High);
	float3 T =   MakePrecise( ( Lhs.High ) * ( Rhs.Low ) );
	T =   MakePrecise(  mad( ( Lhs.Low ) , ( Rhs.High ) , ( T ) ) );
	T =   MakePrecise( ( T ) + ( P.Low ) );
	return DFFastTwoSum(P.High, T);
}
FDFVector3 DFMultiply(FDFVector3 Lhs, float3 Rhs)
{
	FDFVector3 P = DFTwoProduct(Lhs.High, Rhs);
	float3 T =   MakePrecise(  mad( ( Lhs.Low ) , ( Rhs ) , ( P.Low ) ) );
	return DFFastTwoSum(P.High, T);
}
FDFVector3 DFMultiply(float3 Lhs, FDFVector3 Rhs) { return DFMultiply(Rhs, Lhs); }
FDFVector3 DFFastDivide(FDFVector3 Lhs, FDFVector3 Rhs);
FDFVector3 DFFastDivide(FDFVector3 Lhs, FDFVector3 Rhs)
{
	const float3 Th =   MakePrecise( ( Lhs.High ) / ( Rhs.High ) );
	const FDFVector3 R = DFMultiply(Rhs, Th);
	const float3 Ph =   MakePrecise( ( Lhs.High ) - ( R.High ) );
	const float3 Dl =   MakePrecise( ( Lhs.Low ) - ( R.Low ) );
	const float3 D =   MakePrecise( ( Ph ) + ( Dl ) );
	const float3 Tl =   MakePrecise( ( D ) / ( Rhs.High ) );
	return DFFastTwoSum(Th, Tl);
}
FDFVector3 DFFastDivide(FDFVector3 Lhs, float3 Rhs)
{
	const float3 Th =   MakePrecise( ( Lhs.High ) / ( Rhs ) );
	const FDFVector3 R = DFTwoProduct(Rhs, Th);
	const float3 Ph =   MakePrecise( ( Lhs.High ) - ( R.High ) );
	const float3 Dl =   MakePrecise( ( Lhs.Low ) - ( R.Low ) );
	const float3 D =   MakePrecise( ( Ph ) + ( Dl ) );
	const float3 Tl =   MakePrecise( ( D ) / ( Rhs ) );
	return DFFastTwoSum(Th, Tl);
}
FDFVector3 DFFastDivide(float3 Lhs, FDFVector3 Rhs) { return DFFastDivide(DFPromote(Lhs), Rhs); }
FDFVector3 DFFastDivide(float3 Lhs, float3 Rhs) { return DFFastDivide(DFPromote(Lhs), Rhs); }
FDFVector3 DFBroadcast3(FDFScalar V)
{
	const float3 High = V.High;
	const float3 Low = V.Low;
	return MakeDFVector3(High, Low);
}
float3 DFBroadcast3(float V)
{
	const float3 Single = V;
	return Single;
}
FDFVector3  DFMultiply (FDFScalar Lhs, FDFVector3 Rhs) { return DFMultiply (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFMultiply (float Lhs, FDFVector3 Rhs) { return DFMultiply (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFMultiply (FDFScalar Lhs, float3 Rhs) { return DFMultiply (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFMultiply (float Lhs, float3 Rhs) { return DFMultiply (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFMultiply (FDFVector3 Lhs, FDFScalar Rhs) { return DFMultiply (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFMultiply (FDFVector3 Lhs, float Rhs)     { return DFMultiply (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFMultiply (float3 Lhs, FDFScalar Rhs) { return DFMultiply (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFMultiply (float3 Lhs, float Rhs) { return DFMultiply (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFFastDivide (FDFScalar Lhs, FDFVector3 Rhs) { return DFFastDivide (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFFastDivide (float Lhs, FDFVector3 Rhs) { return DFFastDivide (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFFastDivide (FDFScalar Lhs, float3 Rhs) { return DFFastDivide (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFFastDivide (float Lhs, float3 Rhs) { return DFFastDivide (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFFastDivide (FDFVector3 Lhs, FDFScalar Rhs) { return DFFastDivide (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFFastDivide (FDFVector3 Lhs, float Rhs)     { return DFFastDivide (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFFastDivide (float3 Lhs, FDFScalar Rhs) { return DFFastDivide (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFFastDivide (float3 Lhs, float Rhs) { return DFFastDivide (Lhs, DFBroadcast3(Rhs)); }
struct FDFVector4
{
	float4 High;
	float4 Low;
};
FDFVector4 MakeDFVector4(float4 High, float4 Low)
{
	FDFVector4 Result;
	Result.High = High;
	Result.Low = Low;
	return Result;
}
FDFVector4 DFPromote(FDFVector4 Value) { return Value; }
FDFVector4 DFPromote(float4 Value) { return MakeDFVector4(Value, (float4)0); }
float4 DFDemote(FDFVector4 Value) { return Value.High + Value.Low; }
float4 DFDemote(float4 Value) { return Value; }
FDFVector4 DFNegate(FDFVector4 Value)
{
	return MakeDFVector4(-Value.High, -Value.Low);
}
FDFVector4 DFTwoSum(float4 Lhs, float4 Rhs)
{
	const float4 S =   MakePrecise( ( Lhs ) + ( Rhs ) );
	const float4 V =   MakePrecise( ( S ) - ( Lhs ) );
	const float4 Q =   MakePrecise( ( S ) - ( V ) );
	const float4 R =   MakePrecise( ( Lhs ) - ( Q ) );
	const float4 T =   MakePrecise( ( Rhs ) - ( V ) );
	const float4 Y =   MakePrecise( ( R ) + ( T ) );
	return MakeDFVector4(S, Y);
}
FDFVector4 DFFastTwoSum(float4 Lhs, float4 Rhs)
{
	const float4 S =   MakePrecise( ( Lhs ) + ( Rhs ) );
	const float4 T =   MakePrecise( ( S ) - ( Lhs ) );
	const float4 E =   MakePrecise( ( Rhs ) - ( T ) );
	return MakeDFVector4(S, E);
}
float4 DFFastLocalSubtractDemote(FDFVector4 Lhs, FDFVector4 Rhs)
{
	const float4 High =   MakePrecise( ( Lhs.High ) - ( Rhs.High ) );
	const float4 Low =   MakePrecise( ( Lhs.Low ) - ( Rhs.Low ) );
	const float4 Sum =   MakePrecise( ( High ) + ( Low ) );
	return Sum;
}
float4 DFFastLocalSubtractDemote(FDFVector4 Lhs, float4 Rhs)
{
	const float4 High =   MakePrecise( ( Lhs.High ) - ( Rhs ) );
	const float4 Sum =   MakePrecise( ( High ) + ( Lhs.Low ) );
	return Sum;
}
float4 DFFastLocalSubtractDemote(float4 Lhs, FDFVector4 Rhs)
{
	return DFFastLocalSubtractDemote(DFPromote(Lhs), Rhs);
}
FDFVector4 DFTwoProduct(float4 Lhs, float4 Rhs)
{
	const float4 P = Lhs * Rhs;
	const float4 E =   MakePrecise(  mad( ( Lhs ) , ( Rhs ) , ( -P ) ) );
	return MakeDFVector4(P, E);
}
FDFVector4 DFMultiply(float4 Lhs, float4 Rhs) { return DFTwoProduct(Lhs, Rhs); }
FDFVector4 DFMultiply(FDFVector4 Lhs, FDFVector4 Rhs)
{
	const FDFVector4 P = DFTwoProduct(Lhs.High, Rhs.High);
	float4 T =   MakePrecise( ( Lhs.High ) * ( Rhs.Low ) );
	T =   MakePrecise(  mad( ( Lhs.Low ) , ( Rhs.High ) , ( T ) ) );
	T =   MakePrecise( ( T ) + ( P.Low ) );
	return DFFastTwoSum(P.High, T);
}
FDFVector4 DFMultiply(FDFVector4 Lhs, float4 Rhs)
{
	FDFVector4 P = DFTwoProduct(Lhs.High, Rhs);
	float4 T =   MakePrecise(  mad( ( Lhs.Low ) , ( Rhs ) , ( P.Low ) ) );
	return DFFastTwoSum(P.High, T);
}
FDFVector4 DFMultiply(float4 Lhs, FDFVector4 Rhs) { return DFMultiply(Rhs, Lhs); }
FDFVector4 DFFastDivide(FDFVector4 Lhs, FDFVector4 Rhs);
FDFVector4 DFFastDivide(FDFVector4 Lhs, FDFVector4 Rhs)
{
	const float4 Th =   MakePrecise( ( Lhs.High ) / ( Rhs.High ) );
	const FDFVector4 R = DFMultiply(Rhs, Th);
	const float4 Ph =   MakePrecise( ( Lhs.High ) - ( R.High ) );
	const float4 Dl =   MakePrecise( ( Lhs.Low ) - ( R.Low ) );
	const float4 D =   MakePrecise( ( Ph ) + ( Dl ) );
	const float4 Tl =   MakePrecise( ( D ) / ( Rhs.High ) );
	return DFFastTwoSum(Th, Tl);
}
FDFVector4 DFFastDivide(FDFVector4 Lhs, float4 Rhs)
{
	const float4 Th =   MakePrecise( ( Lhs.High ) / ( Rhs ) );
	const FDFVector4 R = DFTwoProduct(Rhs, Th);
	const float4 Ph =   MakePrecise( ( Lhs.High ) - ( R.High ) );
	const float4 Dl =   MakePrecise( ( Lhs.Low ) - ( R.Low ) );
	const float4 D =   MakePrecise( ( Ph ) + ( Dl ) );
	const float4 Tl =   MakePrecise( ( D ) / ( Rhs ) );
	return DFFastTwoSum(Th, Tl);
}
FDFVector4 DFFastDivide(float4 Lhs, FDFVector4 Rhs) { return DFFastDivide(DFPromote(Lhs), Rhs); }
FDFVector4 DFFastDivide(float4 Lhs, float4 Rhs) { return DFFastDivide(DFPromote(Lhs), Rhs); }
FDFVector4 DFBroadcast4(FDFScalar V)
{
	const float4 High = V.High;
	const float4 Low = V.Low;
	return MakeDFVector4(High, Low);
}
float4 DFBroadcast4(float V)
{
	const float4 Single = V;
	return Single;
}
FDFVector4  DFMultiply (FDFScalar Lhs, FDFVector4 Rhs) { return DFMultiply (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFMultiply (float Lhs, FDFVector4 Rhs) { return DFMultiply (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFMultiply (FDFScalar Lhs, float4 Rhs) { return DFMultiply (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFMultiply (float Lhs, float4 Rhs) { return DFMultiply (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFMultiply (FDFVector4 Lhs, FDFScalar Rhs) { return DFMultiply (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFMultiply (FDFVector4 Lhs, float Rhs)     { return DFMultiply (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFMultiply (float4 Lhs, FDFScalar Rhs) { return DFMultiply (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFMultiply (float4 Lhs, float Rhs) { return DFMultiply (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFFastDivide (FDFScalar Lhs, FDFVector4 Rhs) { return DFFastDivide (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFFastDivide (float Lhs, FDFVector4 Rhs) { return DFFastDivide (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFFastDivide (FDFScalar Lhs, float4 Rhs) { return DFFastDivide (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFFastDivide (float Lhs, float4 Rhs) { return DFFastDivide (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFFastDivide (FDFVector4 Lhs, FDFScalar Rhs) { return DFFastDivide (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFFastDivide (FDFVector4 Lhs, float Rhs)     { return DFFastDivide (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFFastDivide (float4 Lhs, FDFScalar Rhs) { return DFFastDivide (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFFastDivide (float4 Lhs, float Rhs) { return DFFastDivide (Lhs, DFBroadcast4(Rhs)); }
struct FDFMatrix
{
	float4x4 M;
	float3 PostTranslation; 
};
float4x4 Make4x3Matrix(float4x4 M)
{
	float4x4 Result;
	Result[0] = float4(M[0].xyz, 0.0f);
	Result[1] = float4(M[1].xyz, 0.0f);
	Result[2] = float4(M[2].xyz, 0.0f);
	Result[3] = float4(M[3].xyz, 1.0f);
	return Result;
}
float4x4 MakeTranslationMatrix(float3 Offset)
{
	float4x4 Result;
	Result[0] = float4(1.0f, 0.0f, 0.0f, 0.0f);
	Result[1] = float4(0.0f, 1.0f, 0.0f, 0.0f);
	Result[2] = float4(0.0f, 0.0f, 1.0f, 0.0f);
	Result[3] = float4(Offset, 1.0f);
	return Result;
}
FDFMatrix MakeDFMatrix4x3(float3 PostTranslation, float4x4 InMatrix)
{
	FDFMatrix Result;
	Result.PostTranslation = PostTranslation;
	Result.M = Make4x3Matrix(InMatrix);
	return Result;
}
FDFMatrix MakeDFMatrix(float3 PostTranslation, float4x4 InMatrix)
{
	FDFMatrix Result;
	Result.PostTranslation = PostTranslation;
	Result.M = InMatrix;
	return Result;
}
struct FDFInverseMatrix
{
	float4x4 M;
	float3 PreTranslation; 
	int Dummy; 
};
FDFInverseMatrix MakeDFInverseMatrix(float3 PreTranslation, float4x4 InMatrix)
{
	FDFInverseMatrix Result;
	Result.PreTranslation = PreTranslation;
	Result.M = InMatrix;
	Result.Dummy = 0;
	return Result;
}
FDFInverseMatrix MakeDFInverseMatrix4x3(float3 PreTranslation, float4x4 InMatrix)
{
	FDFInverseMatrix Result;
	Result.PreTranslation = PreTranslation;
	Result.M = Make4x3Matrix(InMatrix);
	Result.Dummy = 0;
	return Result;
}
FDFVector3 DFMultiply(float3 Vector, FDFMatrix InMatrix)
{
	float4 Result = mul(float4(Vector, 1), InMatrix.M);
	FDFVector3 V = DFTwoSum(InMatrix.PostTranslation, Result.xyz);
	return V;
}
FDFVector4 DFMultiply(float4 Vector, FDFMatrix InMatrix)
{
	float4 Result = mul(Vector, InMatrix.M);
	FDFVector4 V = DFTwoSum(float4(InMatrix.PostTranslation, 0), Result);
	return V;
}
FDFInverseMatrix DFMultiply(FDFInverseMatrix Lhs, float4x4 Rhs)
{
	float4x4 M = mul(Lhs.M, Rhs);
	float3 PreTranslation = Lhs.PreTranslation;
	return MakeDFInverseMatrix(PreTranslation, M);
}
FDFMatrix DFMultiply(float4x4 Lhs, FDFMatrix Rhs)
{
	float4x4 M = mul(Lhs, Rhs.M);
	float3 PostTranslation = Rhs.PostTranslation;
	return MakeDFMatrix(PostTranslation, M);
}
float4x4 MultiplyTranslation(float4x4 M, float3 Translation)
{
	float4x4 Result = M;
	Result[3].xyz += Translation;
	return Result;
}
float4x4 MultiplyTranslation(float3 Translation, float4x4 M)
{
	return mul(MakeTranslationMatrix(Translation), M);
}
float4x4 DFFastMultiplyTranslationDemote(FDFMatrix Lhs, FDFVector3 Rhs)
{
	float3 Translation = DFFastLocalSubtractDemote(Lhs.PostTranslation, DFNegate(Rhs));
	float4x4 Result = MultiplyTranslation(Lhs.M, Translation);
	return Result;
}
float4x4 DFFastMultiplyTranslationDemote(FDFVector3 Lhs, FDFInverseMatrix Rhs)
{
	float3 Translation = DFFastLocalSubtractDemote(Lhs, Rhs.PreTranslation);
	float4x4 Result = MultiplyTranslation(Translation, Rhs.M);
	return Result;
}
float3x3 DFToFloat3x3(FDFMatrix Value)
{
	return (float3x3)Value.M;
}
float3x3 DFToFloat3x3(FDFInverseMatrix Value)
{
	return (float3x3)Value.M;
}
FDFMatrix DFPromote(FDFMatrix Value) { return Value; }
FDFMatrix  DFPromote(float4x4 Value) { return MakeDFMatrix((float3)0, Value); }
float4x4 DFDemote(FDFMatrix V)
{
	return MultiplyTranslation(V.M, V.PostTranslation);
}
float4x4 DFDemote(float4x4 V)
{
	return V;
}
float4x4 DFDemote(FDFInverseMatrix V)
{
	return MultiplyTranslation(-V.PreTranslation, V.M);
}
float4 DFTransformLocalToTranslatedWorld(float3 LocalPosition, FDFMatrix LocalToWorld, FDFVector3 PreViewTranslation)
{
	float3 RotatedScaledPosition =  mad( LocalPosition.xxx , LocalToWorld.M[0].xyz ,  mad( LocalPosition.yyy , LocalToWorld.M[1].xyz , LocalPosition.zzz * LocalToWorld.M[2].xyz ) );
	float3 TranslatedWorldPositionOrigin = DFFastLocalSubtractDemote(LocalToWorld.PostTranslation, DFNegate(PreViewTranslation)) + LocalToWorld.M[3].xyz;
	return float4(RotatedScaledPosition + TranslatedWorldPositionOrigin, 1.0f);
}
float3 DFFastToTranslatedWorld(FDFVector3 WorldPosition, FDFVector3 PreViewTranslation)
{
	return DFFastLocalSubtractDemote(WorldPosition, DFNegate(PreViewTranslation));
}
float3 DFFastToTranslatedWorld(float3 WorldPosition, FDFVector3 PreViewTranslation)
{
	return DFFastLocalSubtractDemote(WorldPosition, DFNegate(PreViewTranslation));
}
float4x4 DFFastToTranslatedWorld(FDFInverseMatrix WorldToLocal, FDFVector3 PreViewTranslation)
{
	return DFFastMultiplyTranslationDemote(DFNegate(PreViewTranslation), WorldToLocal);
}
float4x4 DFFastToTranslatedWorld(FDFMatrix LocalToWorld, FDFVector3 PreViewTranslation)
{
	return DFFastMultiplyTranslationDemote(LocalToWorld, PreViewTranslation);
}
struct FLWCScalar
{
	float Tile;
	float Offset;
	int Dummy; 
};
struct FLWCVector2
{
	float2 Tile;
	float2 Offset;
	int Dummy; 
};
struct FLWCVector3
{
	float3 Tile;
	float3 Offset;
	int Dummy; 
};
struct FLWCVector4
{
	float4 Tile;
	float4 Offset;
	int Dummy; 
};
struct FLWCMatrix
{
	float4x4 M;
	float3 Tile; 
	int2 Dummy; 
};
struct FLWCInverseMatrix
{
	float4x4 M;
	float3 Tile; 
	int3 Dummy; 
};
float LWCGetTileOffset(FLWCScalar V) { return  (( V ).Tile) * 2097152.00f; }
float2 LWCGetTileOffset(FLWCVector2 V) { return  (( V ).Tile) * 2097152.00f; }
float3 LWCGetTileOffset(FLWCVector3 V) { return  (( V ).Tile) * 2097152.00f; }
float4 LWCGetTileOffset(FLWCVector4 V) { return  (( V ).Tile) * 2097152.00f; }
float3 LWCGetTileOffset(FLWCMatrix V) { return  (( V ).Tile) * 2097152.00f; }
float3 LWCGetTileOffset(FLWCInverseMatrix V) { return  (( V ).Tile) * 2097152.00f; }
FLWCScalar MakeLWCScalar(float Tile, float Offset)
{
	FLWCScalar Result;
	 ( Result ).Tile = ( Tile );
	Result.Offset = Offset;
	Result.Dummy = 0;
	return Result;
}
FLWCVector2 MakeLWCVector2(float2 Tile, float2 Offset)
{
	FLWCVector2 Result;
	 ( Result ).Tile = ( Tile );
	Result.Offset = Offset;
	Result.Dummy = 0;
	return Result;
}
FLWCVector3 MakeLWCVector3(float3 Tile, float3 Offset)
{
	FLWCVector3 Result;
	 ( Result ).Tile = ( Tile );
	Result.Offset = Offset;
	Result.Dummy = 0;
	return Result;
}
FLWCVector4 MakeLWCVector4(float4 Tile, float4 Offset)
{
	FLWCVector4 Result;
	 ( Result ).Tile = ( Tile );
	Result.Offset = Offset;
	Result.Dummy = 0;
	return Result;
}
FLWCVector4 MakeLWCVector4(float3 Tile, float4 Offset)
{
	return MakeLWCVector4(float4(Tile, 0), Offset);
}
FLWCVector4 MakeLWCVector4(FLWCVector3 XYZ, float W)
{
	return MakeLWCVector4( (( XYZ ).Tile), float4(XYZ.Offset, W));
}
FLWCScalar MakeLWCVector(FLWCScalar X) { return X; }
FLWCVector2 MakeLWCVector(FLWCScalar X, FLWCScalar Y) { return MakeLWCVector2(float2( (( X ).Tile),  (( Y ).Tile)), float2(X.Offset, Y.Offset)); }
FLWCVector3 MakeLWCVector(FLWCScalar X, FLWCScalar Y, FLWCScalar Z) { return MakeLWCVector3(float3( (( X ).Tile),  (( Y ).Tile),  (( Z ).Tile)), float3(X.Offset, Y.Offset, Z.Offset)); }
FLWCVector3 MakeLWCVector(FLWCScalar X, FLWCVector2 YZ) { return MakeLWCVector3(float3( (( X ).Tile),  (( YZ ).Tile)), float3(X.Offset, YZ.Offset)); }
FLWCVector3 MakeLWCVector(FLWCVector2 XY, FLWCScalar Z) { return MakeLWCVector3(float3( (( XY ).Tile),  (( Z ).Tile)), float3(XY.Offset, Z.Offset)); }
FLWCVector4 MakeLWCVector(FLWCScalar X, FLWCScalar Y, FLWCScalar Z, FLWCScalar W) { return MakeLWCVector4(float4( (( X ).Tile),  (( Y ).Tile),  (( Z ).Tile),  (( W ).Tile)), float4(X.Offset, Y.Offset, Z.Offset, W.Offset)); }
FLWCVector4 MakeLWCVector(FLWCScalar X, FLWCScalar Y, FLWCVector2 ZW) { return MakeLWCVector4(float4( (( X ).Tile),  (( Y ).Tile),  (( ZW ).Tile)), float4(X.Offset, Y.Offset, ZW.Offset)); }
FLWCVector4 MakeLWCVector(FLWCScalar X, FLWCVector2 YZ, FLWCScalar W) { return MakeLWCVector4(float4( (( X ).Tile),  (( YZ ).Tile),  (( W ).Tile)), float4(X.Offset, YZ.Offset, W.Offset)); }
FLWCVector4 MakeLWCVector(FLWCVector2 XY, FLWCScalar Z, FLWCScalar W) { return MakeLWCVector4(float4( (( XY ).Tile),  (( Z ).Tile),  (( W ).Tile)), float4(XY.Offset, Z.Offset, W.Offset)); }
FLWCVector4 MakeLWCVector(FLWCVector2 XY, FLWCVector2 ZW) { return MakeLWCVector4(float4( (( XY ).Tile),  (( ZW ).Tile)), float4(XY.Offset, ZW.Offset)); }
FLWCVector4 MakeLWCVector(FLWCScalar X, FLWCVector3 YZW) { return MakeLWCVector4(float4( (( X ).Tile),  (( YZW ).Tile)), float4(X.Offset, YZW.Offset)); }
FLWCVector4 MakeLWCVector(FLWCVector3 XYZ, FLWCScalar W) { return MakeLWCVector4(float4( (( XYZ ).Tile),  (( W ).Tile)), float4(XYZ.Offset, W.Offset)); }
FLWCMatrix MakeLWCMatrix(float3 Tile, float4x4 InMatrix)
{
	FLWCMatrix Result;
	 ( Result ).Tile = ( Tile );
	Result.M = InMatrix;
	Result.Dummy = 0;
	return Result;
}
FLWCInverseMatrix MakeLWCInverseMatrix(float3 Tile, float4x4 InMatrix)
{
	FLWCInverseMatrix Result;
	 ( Result ).Tile = ( -Tile );
	Result.M = InMatrix;
	Result.Dummy = 0;
	return Result;
}
FLWCScalar LWCGetComponent(FLWCScalar V, int C) { return V; }
FLWCScalar LWCGetComponent(FLWCVector2 V, int C) { return MakeLWCScalar( (( V ).Tile)[C], V.Offset[C]); }
FLWCScalar LWCGetComponent(FLWCVector3 V, int C) { return MakeLWCScalar( (( V ).Tile)[C], V.Offset[C]); }
FLWCScalar LWCGetComponent(FLWCVector4 V, int C) { return MakeLWCScalar( (( V ).Tile)[C], V.Offset[C]); }
float LWCToFloat(FLWCScalar Value)   { return LWCGetTileOffset(Value) + Value.Offset; }
float2 LWCToFloat(FLWCVector2 Value) { return LWCGetTileOffset(Value) + Value.Offset; }
float3 LWCToFloat(FLWCVector3 Value) { return LWCGetTileOffset(Value) + Value.Offset; }
float4 LWCToFloat(FLWCVector4 Value) { return LWCGetTileOffset(Value) + Value.Offset; }
float4x4 LWCToFloat(FLWCMatrix Value)
{
	float4x4 Result = Value.M;
	Result[3].xyz = LWCGetTileOffset(Value) + Result[3].xyz;
	return Result;
}
float4x4 LWCToFloat(FLWCInverseMatrix Value)
{
	float4x4 TileOffset = MakeTranslationMatrix(LWCGetTileOffset(Value));
	return mul(TileOffset, Value.M);
}
float LWCToFloat(float Value) { return Value; }
float2 LWCToFloat(float2 Value) { return Value; }
float3 LWCToFloat(float3 Value) { return Value; }
float4 LWCToFloat(float4 Value) { return Value; }
float4x4 LWCToFloat(float4x4 Value) { return Value; }
FLWCScalar LWCPromote(FLWCScalar Value) { return Value; }
FLWCVector2 LWCPromote(FLWCVector2 Value) { return Value; }
FLWCVector3 LWCPromote(FLWCVector3 Value) { return Value; }
FLWCVector4 LWCPromote(FLWCVector4 Value) { return Value; }
FLWCMatrix LWCPromote(FLWCMatrix Value) { return Value; }
FLWCInverseMatrix LWCPromote(FLWCInverseMatrix Value) { return Value; }
FLWCScalar LWCPromote(float Value) { return MakeLWCScalar(0, Value); }
FLWCVector2 LWCPromote(float2 Value) { return MakeLWCVector2((float2)0, Value); }
FLWCVector3 LWCPromote(float3 Value) { return MakeLWCVector3((float3)0, Value); }
FLWCVector4 LWCPromote(float4 Value) { return MakeLWCVector4((float4)0, Value); }
FLWCMatrix LWCPromote(float4x4 Value) { return MakeLWCMatrix((float3)0, Value); }
FLWCVector3 LWCMultiply(float3 Position, FLWCMatrix InMatrix)
{
	float3 Offset = (Position.xxx * InMatrix.M[0].xyz + Position.yyy * InMatrix.M[1].xyz + Position.zzz * InMatrix.M[2].xyz) + InMatrix.M[3].xyz;
	return MakeLWCVector3( (( InMatrix ).Tile), Offset);
}
FLWCVector4 LWCMultiply(float4 Position, FLWCMatrix InMatrix)
{
	float4 Offset = mul(Position, InMatrix.M);
	return MakeLWCVector4( (( InMatrix ).Tile), Offset);
}
float3 LWCMultiply(FLWCVector3 Position, FLWCInverseMatrix InMatrix)
{
	float3 LocalPosition = LWCToFloat(MakeLWCVector3( (( Position ).Tile) +  (( InMatrix ).Tile), Position.Offset));
	return (LocalPosition.xxx * InMatrix.M[0].xyz + LocalPosition.yyy * InMatrix.M[1].xyz + LocalPosition.zzz * InMatrix.M[2].xyz) + InMatrix.M[3].xyz;
}
float4 LWCMultiply(FLWCVector4 Position, FLWCInverseMatrix InMatrix)
{
	float4 LocalPosition = LWCToFloat(MakeLWCVector4( (( Position ).Tile) + float4( (( InMatrix ).Tile), 0), Position.Offset));
	return mul(LocalPosition, InMatrix.M);
}
float3 LWCMultiplyVector(float3 Vector, FLWCMatrix InMatrix)
{
	return mul(Vector, (float3x3)InMatrix.M);
}
float3 LWCMultiplyVector(float3 Vector, FLWCInverseMatrix InMatrix)
{
	return mul(Vector, (float3x3)InMatrix.M);
}
FLWCMatrix LWCMultiply(float4x4 Lhs, FLWCMatrix Rhs)
{
	float4x4 ResultMatrix = mul(Lhs, Rhs.M);
	return MakeLWCMatrix( (( Rhs ).Tile), ResultMatrix);
}
FLWCInverseMatrix LWCMultiply(FLWCInverseMatrix Lhs, float4x4 Rhs)
{
	float4x4 ResultMatrix = mul(Lhs.M, Rhs);
	return MakeLWCInverseMatrix(- (( Lhs ).Tile), ResultMatrix);
}
float4x4 LWCMultiply(FLWCMatrix Lhs, FLWCInverseMatrix Rhs)
{
	float4x4 Result = Lhs.M;
	Result = mul(Result, MakeTranslationMatrix(( (( Lhs ).Tile) +  (( Rhs ).Tile)) * 2097152.00f));
	Result = mul(Result, Rhs.M);
	return Result;
}
FLWCVector3 LWCGetOrigin(FLWCMatrix InMatrix)
{
	return MakeLWCVector3( (( InMatrix ).Tile), InMatrix.M[3].xyz);
}
float LWCSqrtUnscaled(FLWCScalar V) { return sqrt(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }
float LWCRsqrtUnscaled(FLWCScalar V) { return rsqrt(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }
float LWCRcpUnscaled(FLWCScalar V) { return rcp(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }
float LWCRsqrtScaled(FLWCScalar V, float Scale) { return LWCRsqrtUnscaled(V) * Scale; }
float LWCRcpScaled(FLWCScalar V, float Scale) { return LWCRcpUnscaled(V) * Scale; }
float LWCRcp(FLWCScalar V) { return LWCRcpScaled(V, 4.76837158e-07f); }
FLWCScalar LWCAdd(FLWCScalar Lhs, FLWCScalar Rhs) { return MakeLWCScalar( (( Lhs ).Tile) +  (( Rhs ).Tile), Lhs.Offset + Rhs.Offset); }
FLWCScalar LWCAdd(float Lhs, FLWCScalar Rhs) { return MakeLWCScalar( (( Rhs ).Tile), Lhs + Rhs.Offset); }
FLWCScalar LWCAdd(FLWCScalar Lhs, float Rhs) { return MakeLWCScalar( (( Lhs ).Tile), Lhs.Offset + Rhs); }
FLWCScalar LWCSubtract(FLWCScalar Lhs, FLWCScalar Rhs) { return MakeLWCScalar( (( Lhs ).Tile) -  (( Rhs ).Tile), Lhs.Offset - Rhs.Offset); }
FLWCScalar LWCSubtract(float Lhs, FLWCScalar Rhs) { return MakeLWCScalar(- (( Rhs ).Tile), Lhs - Rhs.Offset); }
FLWCScalar LWCSubtract(FLWCScalar Lhs, float Rhs) { return MakeLWCScalar( (( Lhs ).Tile), Lhs.Offset - Rhs); }
float LWCFrac(FLWCScalar V)
{
	float FracTile = frac( (( V ).Tile) * 2097152.00f);
	return frac(FracTile + V.Offset);
}
float LWCSaturate(FLWCScalar V) { return saturate(LWCToFloat(V)); }
FLWCScalar LWCMultiply(FLWCScalar Lhs, FLWCScalar Rhs)
{
	return MakeLWCScalar( (( Lhs ).Tile) * ( (( Rhs ).Tile) * 2097152.00f + Rhs.Offset) +  (( Rhs ).Tile) * Lhs.Offset, Lhs.Offset * Rhs.Offset);
}
FLWCScalar LWCMultiply(float Lhs, FLWCScalar Rhs) { return MakeLWCScalar( (( Rhs ).Tile) * Lhs, Lhs * Rhs.Offset); }
FLWCScalar LWCMultiply(FLWCScalar Lhs, float Rhs) { return MakeLWCScalar( (( Lhs ).Tile) * Rhs, Lhs.Offset * Rhs); }
FLWCScalar LWCDivide(FLWCScalar Lhs, FLWCScalar Rhs) { return LWCMultiply(Lhs, LWCRcp(Rhs)); }
FLWCScalar LWCDivide(FLWCScalar Lhs, float Rhs) { return LWCMultiply(Lhs, rcp(Rhs)); }
FLWCScalar LWCDivide(float Lhs, FLWCScalar Rhs) { return MakeLWCScalar((float)0, Lhs * LWCRcp(Rhs)); }
FLWCScalar LWCSquareScaled(FLWCScalar V)
{
	float OffsetScaled = V.Offset * 4.76837158e-07f;
	return MakeLWCScalar( (( V ).Tile) * ( (( V ).Tile) + OffsetScaled * 2.0f), V.Offset * OffsetScaled);
}
float2 LWCSqrtUnscaled(FLWCVector2 V) { return sqrt(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }
float2 LWCRsqrtUnscaled(FLWCVector2 V) { return rsqrt(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }
float2 LWCRcpUnscaled(FLWCVector2 V) { return rcp(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }
float2 LWCRsqrtScaled(FLWCVector2 V, float Scale) { return LWCRsqrtUnscaled(V) * Scale; }
float2 LWCRcpScaled(FLWCVector2 V, float Scale) { return LWCRcpUnscaled(V) * Scale; }
float2 LWCRcp(FLWCVector2 V) { return LWCRcpScaled(V, 4.76837158e-07f); }
FLWCVector2 LWCAdd(FLWCVector2 Lhs, FLWCVector2 Rhs) { return MakeLWCVector2( (( Lhs ).Tile) +  (( Rhs ).Tile), Lhs.Offset + Rhs.Offset); }
FLWCVector2 LWCAdd(float2 Lhs, FLWCVector2 Rhs) { return MakeLWCVector2( (( Rhs ).Tile), Lhs + Rhs.Offset); }
FLWCVector2 LWCAdd(FLWCVector2 Lhs, float2 Rhs) { return MakeLWCVector2( (( Lhs ).Tile), Lhs.Offset + Rhs); }
FLWCVector2 LWCSubtract(FLWCVector2 Lhs, FLWCVector2 Rhs) { return MakeLWCVector2( (( Lhs ).Tile) -  (( Rhs ).Tile), Lhs.Offset - Rhs.Offset); }
FLWCVector2 LWCSubtract(float2 Lhs, FLWCVector2 Rhs) { return MakeLWCVector2(- (( Rhs ).Tile), Lhs - Rhs.Offset); }
FLWCVector2 LWCSubtract(FLWCVector2 Lhs, float2 Rhs) { return MakeLWCVector2( (( Lhs ).Tile), Lhs.Offset - Rhs); }
float2 LWCFrac(FLWCVector2 V)
{
	float2 FracTile = frac( (( V ).Tile) * 2097152.00f);
	return frac(FracTile + V.Offset);
}
float2 LWCSaturate(FLWCVector2 V) { return saturate(LWCToFloat(V)); }
FLWCVector2 LWCMultiply(FLWCVector2 Lhs, FLWCVector2 Rhs)
{
	return MakeLWCVector2( (( Lhs ).Tile) * ( (( Rhs ).Tile) * 2097152.00f + Rhs.Offset) +  (( Rhs ).Tile) * Lhs.Offset, Lhs.Offset * Rhs.Offset);
}
FLWCVector2 LWCMultiply(float2 Lhs, FLWCVector2 Rhs) { return MakeLWCVector2( (( Rhs ).Tile) * Lhs, Lhs * Rhs.Offset); }
FLWCVector2 LWCMultiply(FLWCVector2 Lhs, float2 Rhs) { return MakeLWCVector2( (( Lhs ).Tile) * Rhs, Lhs.Offset * Rhs); }
FLWCVector2 LWCDivide(FLWCVector2 Lhs, FLWCVector2 Rhs) { return LWCMultiply(Lhs, LWCRcp(Rhs)); }
FLWCVector2 LWCDivide(FLWCVector2 Lhs, float2 Rhs) { return LWCMultiply(Lhs, rcp(Rhs)); }
FLWCVector2 LWCDivide(float2 Lhs, FLWCVector2 Rhs) { return MakeLWCVector2((float2)0, Lhs * LWCRcp(Rhs)); }
FLWCVector2 LWCSquareScaled(FLWCVector2 V)
{
	float2 OffsetScaled = V.Offset * 4.76837158e-07f;
	return MakeLWCVector2( (( V ).Tile) * ( (( V ).Tile) + OffsetScaled * 2.0f), V.Offset * OffsetScaled);
}
float3 LWCSqrtUnscaled(FLWCVector3 V) { return sqrt(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }
float3 LWCRsqrtUnscaled(FLWCVector3 V) { return rsqrt(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }
float3 LWCRcpUnscaled(FLWCVector3 V) { return rcp(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }
float3 LWCRsqrtScaled(FLWCVector3 V, float Scale) { return LWCRsqrtUnscaled(V) * Scale; }
float3 LWCRcpScaled(FLWCVector3 V, float Scale) { return LWCRcpUnscaled(V) * Scale; }
float3 LWCRcp(FLWCVector3 V) { return LWCRcpScaled(V, 4.76837158e-07f); }
FLWCVector3 LWCAdd(FLWCVector3 Lhs, FLWCVector3 Rhs) { return MakeLWCVector3( (( Lhs ).Tile) +  (( Rhs ).Tile), Lhs.Offset + Rhs.Offset); }
FLWCVector3 LWCAdd(float3 Lhs, FLWCVector3 Rhs) { return MakeLWCVector3( (( Rhs ).Tile), Lhs + Rhs.Offset); }
FLWCVector3 LWCAdd(FLWCVector3 Lhs, float3 Rhs) { return MakeLWCVector3( (( Lhs ).Tile), Lhs.Offset + Rhs); }
FLWCVector3 LWCSubtract(FLWCVector3 Lhs, FLWCVector3 Rhs) { return MakeLWCVector3( (( Lhs ).Tile) -  (( Rhs ).Tile), Lhs.Offset - Rhs.Offset); }
FLWCVector3 LWCSubtract(float3 Lhs, FLWCVector3 Rhs) { return MakeLWCVector3(- (( Rhs ).Tile), Lhs - Rhs.Offset); }
FLWCVector3 LWCSubtract(FLWCVector3 Lhs, float3 Rhs) { return MakeLWCVector3( (( Lhs ).Tile), Lhs.Offset - Rhs); }
float3 LWCFrac(FLWCVector3 V)
{
	float3 FracTile = frac( (( V ).Tile) * 2097152.00f);
	return frac(FracTile + V.Offset);
}
float3 LWCSaturate(FLWCVector3 V) { return saturate(LWCToFloat(V)); }
FLWCVector3 LWCMultiply(FLWCVector3 Lhs, FLWCVector3 Rhs)
{
	return MakeLWCVector3( (( Lhs ).Tile) * ( (( Rhs ).Tile) * 2097152.00f + Rhs.Offset) +  (( Rhs ).Tile) * Lhs.Offset, Lhs.Offset * Rhs.Offset);
}
FLWCVector3 LWCMultiply(float3 Lhs, FLWCVector3 Rhs) { return MakeLWCVector3( (( Rhs ).Tile) * Lhs, Lhs * Rhs.Offset); }
FLWCVector3 LWCMultiply(FLWCVector3 Lhs, float3 Rhs) { return MakeLWCVector3( (( Lhs ).Tile) * Rhs, Lhs.Offset * Rhs); }
FLWCVector3 LWCDivide(FLWCVector3 Lhs, FLWCVector3 Rhs) { return LWCMultiply(Lhs, LWCRcp(Rhs)); }
FLWCVector3 LWCDivide(FLWCVector3 Lhs, float3 Rhs) { return LWCMultiply(Lhs, rcp(Rhs)); }
FLWCVector3 LWCDivide(float3 Lhs, FLWCVector3 Rhs) { return MakeLWCVector3((float3)0, Lhs * LWCRcp(Rhs)); }
FLWCVector3 LWCSquareScaled(FLWCVector3 V)
{
	float3 OffsetScaled = V.Offset * 4.76837158e-07f;
	return MakeLWCVector3( (( V ).Tile) * ( (( V ).Tile) + OffsetScaled * 2.0f), V.Offset * OffsetScaled);
}
float4 LWCSqrtUnscaled(FLWCVector4 V) { return sqrt(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }
float4 LWCRsqrtUnscaled(FLWCVector4 V) { return rsqrt(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }
float4 LWCRcpUnscaled(FLWCVector4 V) { return rcp(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }
float4 LWCRsqrtScaled(FLWCVector4 V, float Scale) { return LWCRsqrtUnscaled(V) * Scale; }
float4 LWCRcpScaled(FLWCVector4 V, float Scale) { return LWCRcpUnscaled(V) * Scale; }
float4 LWCRcp(FLWCVector4 V) { return LWCRcpScaled(V, 4.76837158e-07f); }
FLWCVector4 LWCAdd(FLWCVector4 Lhs, FLWCVector4 Rhs) { return MakeLWCVector4( (( Lhs ).Tile) +  (( Rhs ).Tile), Lhs.Offset + Rhs.Offset); }
FLWCVector4 LWCAdd(float4 Lhs, FLWCVector4 Rhs) { return MakeLWCVector4( (( Rhs ).Tile), Lhs + Rhs.Offset); }
FLWCVector4 LWCAdd(FLWCVector4 Lhs, float4 Rhs) { return MakeLWCVector4( (( Lhs ).Tile), Lhs.Offset + Rhs); }
FLWCVector4 LWCSubtract(FLWCVector4 Lhs, FLWCVector4 Rhs) { return MakeLWCVector4( (( Lhs ).Tile) -  (( Rhs ).Tile), Lhs.Offset - Rhs.Offset); }
FLWCVector4 LWCSubtract(float4 Lhs, FLWCVector4 Rhs) { return MakeLWCVector4(- (( Rhs ).Tile), Lhs - Rhs.Offset); }
FLWCVector4 LWCSubtract(FLWCVector4 Lhs, float4 Rhs) { return MakeLWCVector4( (( Lhs ).Tile), Lhs.Offset - Rhs); }
float4 LWCFrac(FLWCVector4 V)
{
	float4 FracTile = frac( (( V ).Tile) * 2097152.00f);
	return frac(FracTile + V.Offset);
}
float4 LWCSaturate(FLWCVector4 V) { return saturate(LWCToFloat(V)); }
FLWCVector4 LWCMultiply(FLWCVector4 Lhs, FLWCVector4 Rhs)
{
	return MakeLWCVector4( (( Lhs ).Tile) * ( (( Rhs ).Tile) * 2097152.00f + Rhs.Offset) +  (( Rhs ).Tile) * Lhs.Offset, Lhs.Offset * Rhs.Offset);
}
FLWCVector4 LWCMultiply(float4 Lhs, FLWCVector4 Rhs) { return MakeLWCVector4( (( Rhs ).Tile) * Lhs, Lhs * Rhs.Offset); }
FLWCVector4 LWCMultiply(FLWCVector4 Lhs, float4 Rhs) { return MakeLWCVector4( (( Lhs ).Tile) * Rhs, Lhs.Offset * Rhs); }
FLWCVector4 LWCDivide(FLWCVector4 Lhs, FLWCVector4 Rhs) { return LWCMultiply(Lhs, LWCRcp(Rhs)); }
FLWCVector4 LWCDivide(FLWCVector4 Lhs, float4 Rhs) { return LWCMultiply(Lhs, rcp(Rhs)); }
FLWCVector4 LWCDivide(float4 Lhs, FLWCVector4 Rhs) { return MakeLWCVector4((float4)0, Lhs * LWCRcp(Rhs)); }
FLWCVector4 LWCSquareScaled(FLWCVector4 V)
{
	float4 OffsetScaled = V.Offset * 4.76837158e-07f;
	return MakeLWCVector4( (( V ).Tile) * ( (( V ).Tile) + OffsetScaled * 2.0f), V.Offset * OffsetScaled);
}
FLWCScalar LWCVectorSum(FLWCScalar V) { return V; }
FLWCScalar LWCVectorSum(FLWCVector2 V) { return LWCAdd( LWCGetComponent( V , 0),  LWCGetComponent( V , 1)); }
FLWCScalar LWCVectorSum(FLWCVector3 V) { return LWCAdd(LWCAdd( LWCGetComponent( V , 0),  LWCGetComponent( V , 1)),  LWCGetComponent( V , 2)); }
FLWCScalar LWCVectorSum(FLWCVector4 V) { return LWCAdd(LWCAdd(LWCAdd( LWCGetComponent( V , 0),  LWCGetComponent( V , 1)),  LWCGetComponent( V , 2)),  LWCGetComponent( V , 3)); }
FLWCScalar LWCDot(FLWCScalar Lhs, FLWCScalar Rhs) { return LWCMultiply(Lhs, Rhs); }
FLWCScalar LWCDot(FLWCScalar Lhs, float Rhs) { return LWCMultiply(Lhs, Rhs); }
FLWCScalar LWCDot(FLWCVector2 Lhs, FLWCVector2 Rhs) { return LWCVectorSum(LWCMultiply(Lhs, Rhs)); }
FLWCScalar LWCDot(FLWCVector2 Lhs, float2 Rhs) { return LWCVectorSum(LWCMultiply(Lhs, Rhs)); }
FLWCScalar LWCDot(FLWCVector3 Lhs, FLWCVector3 Rhs) { return LWCVectorSum(LWCMultiply(Lhs, Rhs)); }
FLWCScalar LWCDot(FLWCVector3 Lhs, float3 Rhs) { return LWCVectorSum(LWCMultiply(Lhs, Rhs)); }
FLWCScalar LWCDot(FLWCVector4 Lhs, FLWCVector4 Rhs) { return LWCVectorSum(LWCMultiply(Lhs, Rhs)); }
FLWCScalar LWCDot(FLWCVector4 Lhs, float4 Rhs) { return LWCVectorSum(LWCMultiply(Lhs, Rhs)); }
FLWCScalar LWCLength2Scaled(FLWCScalar V)
{
	return LWCSquareScaled(V);
}
FLWCScalar LWCLength2Scaled(FLWCVector2 V)
{
	FLWCScalar X2 = LWCSquareScaled( LWCGetComponent( V , 0));
	FLWCScalar Y2 = LWCSquareScaled( LWCGetComponent( V , 1));
	return LWCAdd(X2, Y2);
}
FLWCScalar LWCLength2Scaled(FLWCVector3 V)
{
	FLWCScalar X2 = LWCSquareScaled( LWCGetComponent( V , 0));
	FLWCScalar Y2 = LWCSquareScaled( LWCGetComponent( V , 1));
	FLWCScalar Z2 = LWCSquareScaled( LWCGetComponent( V , 2));
	return LWCAdd(LWCAdd(X2, Y2), Z2);
}
FLWCScalar LWCLength2Scaled(FLWCVector4 V)
{
	FLWCScalar X2 = LWCSquareScaled( LWCGetComponent( V , 0));
	FLWCScalar Y2 = LWCSquareScaled( LWCGetComponent( V , 1));
	FLWCScalar Z2 = LWCSquareScaled( LWCGetComponent( V , 2));
	FLWCScalar W2 = LWCSquareScaled( LWCGetComponent( V , 3));
	return LWCAdd(LWCAdd(LWCAdd(X2, Y2), Z2), W2);
}
FLWCScalar LWCLength(FLWCScalar V) { return MakeLWCScalar(LWCSqrtUnscaled(LWCLength2Scaled(V)), 0.0f); }
FLWCScalar LWCLength(FLWCVector2 V) { return MakeLWCScalar(LWCSqrtUnscaled(LWCLength2Scaled(V)), 0.0f); }
FLWCScalar LWCLength(FLWCVector3 V) { return MakeLWCScalar(LWCSqrtUnscaled(LWCLength2Scaled(V)), 0.0f); }
FLWCScalar LWCLength(FLWCVector4 V) { return MakeLWCScalar(LWCSqrtUnscaled(LWCLength2Scaled(V)), 0.0f); }
float LWCRcpLength(FLWCScalar V) { return LWCRsqrtScaled(LWCLength2Scaled(V), 4.76837158e-07f); }
float LWCRcpLength(FLWCVector2 V) { return LWCRsqrtScaled(LWCLength2Scaled(V), 4.76837158e-07f); }
float LWCRcpLength(FLWCVector3 V) { return LWCRsqrtScaled(LWCLength2Scaled(V), 4.76837158e-07f); }
float LWCRcpLength(FLWCVector4 V) { return LWCRsqrtScaled(LWCLength2Scaled(V), 4.76837158e-07f); }
float LWCNormalize(FLWCScalar V) { return 1.0f; }
float2 LWCNormalize(FLWCVector2 V) { return LWCToFloat(LWCMultiply(V, LWCRcpLength(V))); }
float3 LWCNormalize(FLWCVector3 V) { return LWCToFloat(LWCMultiply(V, LWCRcpLength(V))); }
float4 LWCNormalize(FLWCVector4 V) { return LWCToFloat(LWCMultiply(V, LWCRcpLength(V))); }
FLWCScalar DFToTileOffset( FDFScalar In)																								{ float Tile =  MakePrecise( round(In.High / 2097152.00f) ); float Offset =   MakePrecise( (   MakePrecise(  mad( ( Tile ) , ( -2097152.00f ) , ( In.High ) ) ) ) + ( In.Low ) );																																								return MakeLWCScalar (Tile, Offset);																						}
FLWCVector2 DFToTileOffset( FDFVector2 In)																								{ float2 Tile =  MakePrecise( round(In.High / 2097152.00f) ); float2 Offset =   MakePrecise( (   MakePrecise(  mad( ( Tile ) , ( -2097152.00f ) , ( In.High ) ) ) ) + ( In.Low ) );																																								return MakeLWCVector2 (Tile, Offset);																						}
FLWCVector3 DFToTileOffset( FDFVector3 In)																								{ float3 Tile =  MakePrecise( round(In.High / 2097152.00f) ); float3 Offset =   MakePrecise( (   MakePrecise(  mad( ( Tile ) , ( -2097152.00f ) , ( In.High ) ) ) ) + ( In.Low ) );																																								return MakeLWCVector3 (Tile, Offset);																						}
FLWCVector4 DFToTileOffset( FDFVector4 In)																								{ float4 Tile =  MakePrecise( round(In.High / 2097152.00f) ); float4 Offset =   MakePrecise( (   MakePrecise(  mad( ( Tile ) , ( -2097152.00f ) , ( In.High ) ) ) ) + ( In.Low ) );																																								return MakeLWCVector4 (Tile, Offset);																						}
FLWCScalar DFFastToTileOffset( FDFScalar In)																							{ float Tile = In.High * (1 / 2097152.00f); float Offset = In.Low; 																																																									return MakeLWCScalar (Tile, Offset);																						}
FLWCVector2 DFFastToTileOffset( FDFVector2 In)																							{ float2 Tile = In.High * (1 / 2097152.00f); float2 Offset = In.Low; 																																																									return MakeLWCVector2 (Tile, Offset);																						}
FLWCVector3 DFFastToTileOffset( FDFVector3 In)																							{ float3 Tile = In.High * (1 / 2097152.00f); float3 Offset = In.Low; 																																																									return MakeLWCVector3 (Tile, Offset);																						}
FLWCVector4 DFFastToTileOffset( FDFVector4 In)																							{ float4 Tile = In.High * (1 / 2097152.00f); float4 Offset = In.Low; 																																																									return MakeLWCVector4 (Tile, Offset);																						}
FLWCMatrix DFToTileOffset(FDFMatrix In)
{
	FLWCVector3 PosHigh = DFToTileOffset(MakeDFVector3(In.PostTranslation, 0));
	float4x4 M = MultiplyTranslation(In.M, PosHigh.Offset);
	float3 Tile = PosHigh.Tile;
	return MakeLWCMatrix(Tile, M);
}
FLWCMatrix DFFastToTileOffset(FDFMatrix In)
{
	float4x4 M = In.M;
	float3 Tile = In.PostTranslation / 2097152.00f;
	return MakeLWCMatrix(Tile, M);
}
FLWCInverseMatrix DFToTileOffset(FDFInverseMatrix In)
{
	FLWCVector3 PosHigh = DFToTileOffset(MakeDFVector3(In.PreTranslation, 0));
	float4x4 M = MultiplyTranslation(-PosHigh.Offset, In.M);
	float3 Tile = PosHigh.Tile;
	return MakeLWCInverseMatrix(Tile, M);
}
FLWCInverseMatrix DFFastToTileOffset(FDFInverseMatrix In)
{
	float4x4 M = In.M;
	float3 Tile = In.PreTranslation / 2097152.00f;
	return MakeLWCInverseMatrix(Tile, M);
}
FDFScalar DFFromTileOffset(FLWCScalar In)
{
	float TileOffset = In.Tile * 2097152.00f;
	return DFFastTwoSum(TileOffset, In.Offset);
}
FDFVector2 DFFromTileOffset(FLWCVector2 In)
{
	float2 TileOffset = In.Tile * 2097152.00f;
	return DFFastTwoSum(TileOffset, In.Offset);
}
FDFVector3 DFFromTileOffset(FLWCVector3 In)
{
	float3 TileOffset = In.Tile * 2097152.00f;
	return DFFastTwoSum(TileOffset, In.Offset);
}
FDFVector4 DFFromTileOffset(FLWCVector4 In)
{
	float4 TileOffset = In.Tile * 2097152.00f;
	return DFFastTwoSum(TileOffset, In.Offset);
}
FDFMatrix DFFromTileOffset(FLWCMatrix In)
{
	float4x4 M = In.M;
	float3 PostTranslation = In.Tile * 2097152.00f;
	return MakeDFMatrix(PostTranslation, M);
}
FDFInverseMatrix DFFromTileOffset(FLWCInverseMatrix In)
{
	float4x4 M = In.M;
	float3 PreTranslation = -In.Tile * 2097152.00f;
	return MakeDFInverseMatrix(PreTranslation, M);
}
float LWCToFloat(FDFScalar Value)   { return DFDemote(Value); }
float2 LWCToFloat(FDFVector2 Value) { return DFDemote(Value); }
float3 LWCToFloat(FDFVector3 Value) { return DFDemote(Value); }
float4 LWCToFloat(FDFVector4 Value) { return DFDemote(Value); }
float4x4 LWCToFloat(FDFMatrix Value) { return DFDemote(Value); }
float4x4 LWCToFloat(FDFInverseMatrix Value) { return DFDemote(Value); }
struct FViewConstants {
	 float4x4    TranslatedWorldToClip ;
	 float4x4    RelativeWorldToClip ;
	 float4x4    ClipToRelativeWorld ;
	 float4x4    TranslatedWorldToView ;
	 float4x4    ViewToTranslatedWorld ;
	 float4x4    TranslatedWorldToCameraView ;
	 float4x4    CameraViewToTranslatedWorld ;
	 float4x4    ViewToClip ;
	 float4x4    ViewToClipNoAA ;
	 float4x4    ClipToView ;
	 float4x4    ClipToTranslatedWorld ;
	 float4x4    SVPositionToTranslatedWorld ;
	 float4x4    ScreenToRelativeWorld ;
	 float4x4    ScreenToTranslatedWorld ;
	 float4x4    MobileMultiviewShadowTransform ;
	 float3    ViewOriginHigh ;
	 float    Padding972 ;
	 float3    ViewForward ;
	 float    Padding988 ;
	 float3    ViewUp ;
	 float    Padding1004 ;
	 float3    ViewRight ;
	 float    Padding1020 ;
	 float3    HMDViewNoRollUp ;
	 float    Padding1036 ;
	 float3    HMDViewNoRollRight ;
	 float    Padding1052 ;
	 float4    InvDeviceZToWorldZTransform ;
	 float4    ScreenPositionScaleBias ;
	 float3    ViewOriginLow ;
	 float    Padding1100 ;
	 float3    TranslatedWorldCameraOrigin ;
	 float    Padding1116 ;
	 float3    WorldViewOriginHigh ;
	 float    Padding1132 ;
	 float3    WorldViewOriginLow ;
	 float    Padding1148 ;
	 float3    PreViewTranslationHigh ;
	 float    Padding1164 ;
	 float3    PreViewTranslationLow ;
	 float    Padding1180 ;
	 float4x4    PrevViewToClip ;
	 float4x4    PrevClipToView ;
	 float4x4    PrevTranslatedWorldToClip ;
	 float4x4    PrevTranslatedWorldToView ;
	 float4x4    PrevViewToTranslatedWorld ;
	 float4x4    PrevTranslatedWorldToCameraView ;
	 float4x4    PrevCameraViewToTranslatedWorld ;
	 float3    PrevTranslatedWorldCameraOrigin ;
	 float    Padding1644 ;
	 float3    PrevWorldCameraOriginHigh ;
	 float    Padding1660 ;
	 float3    PrevWorldCameraOriginLow ;
	 float    Padding1676 ;
	 float3    PrevWorldViewOriginHigh ;
	 float    Padding1692 ;
	 float3    PrevWorldViewOriginLow ;
	 float    Padding1708 ;
	 float3    PrevPreViewTranslationHigh ;
	 float    Padding1724 ;
	 float3    PrevPreViewTranslationLow ;
	 float    Padding1740 ;
	 float3    ViewTilePosition ;
	 float    Padding1756 ;
	 float3    RelativeWorldCameraOriginTO ;
	 float    Padding1772 ;
	 float3    RelativeWorldViewOriginTO ;
	 float    Padding1788 ;
	 float3    RelativePreViewTranslationTO ;
	 float    Padding1804 ;
	 float3    PrevRelativeWorldCameraOriginTO ;
	 float    Padding1820 ;
	 float3    PrevRelativeWorldViewOriginTO ;
	 float    Padding1836 ;
	 float3    RelativePrevPreViewTranslationTO ;
	 float    Padding1852 ;
	 float4x4    PrevClipToRelativeWorld ;
	 float4x4    PrevScreenToTranslatedWorld ;
	 float4x4    ClipToPrevClip ;
	 float4x4    ClipToPrevClipWithAA ;
	 float4    TemporalAAJitter ;
	 float4    GlobalClippingPlane ;
	 float2    FieldOfViewWideAngles ;
	 float2    PrevFieldOfViewWideAngles ;
	 float4    ViewRectMin ;
	 float4    ViewSizeAndInvSize ;
	 uint4    ViewRectMinAndSize ;
	 float4    LightProbeSizeRatioAndInvSizeRatio ;
	 float4    BufferSizeAndInvSize ;
	 float4    BufferBilinearUVMinMax ;
	 float4    ScreenToViewSpace ;
	 float2    BufferToSceneTextureScale ;
	 float2    ResolutionFractionAndInv ;
	 int    NumSceneColorMSAASamples ;
	 float    ProjectionDepthThicknessScale ;
	 float    PreExposure ;
	 float    OneOverPreExposure ;
	 float4    DiffuseOverrideParameter ;
	 float4    SpecularOverrideParameter ;
	 float4    NormalOverrideParameter ;
	 float2    RoughnessOverrideParameter ;
	 float    PrevFrameGameTime ;
	 float    PrevFrameRealTime ;
	 float    OutOfBoundsMask ;
	 float    Padding2372 ;
	 float    Padding2376 ;
	 float    Padding2380 ;
	 float3    WorldCameraMovementSinceLastFrame ;
	 float    CullingSign ;
	 float    NearPlane ;
	 float    GameTime ;
	 float    RealTime ;
	 float    DeltaTime ;
	 float    MaterialTextureMipBias ;
	 float    MaterialTextureDerivativeMultiply ;
	 uint    Random ;
	 uint    FrameNumber ;
	 uint    FrameCounter ;
	 uint    StateFrameIndexMod8 ;
	 uint    StateFrameIndex ;
	 uint    DebugViewModeMask ;
	 uint    WorldIsPaused ;
	 float    CameraCut ;
	 float    UnlitViewmodeMask ;
	 float    Padding2460 ;
	 float4    DirectionalLightColor ;
	 float3    DirectionalLightDirection ;
	 float    Padding2492 ;
	 float4    TranslucencyLightingVolumeMin[2] ;
	 float4    TranslucencyLightingVolumeInvSize[2] ;
	 float4    TemporalAAParams ;
	 float4    CircleDOFParams ;
	 float    DepthOfFieldSensorWidth ;
	 float    DepthOfFieldFocalDistance ;
	 float    DepthOfFieldScale ;
	 float    DepthOfFieldFocalLength ;
	 float    DepthOfFieldFocalRegion ;
	 float    DepthOfFieldNearTransitionRegion ;
	 float    DepthOfFieldFarTransitionRegion ;
	 float    MotionBlurNormalizedToPixel ;
	 float    GeneralPurposeTweak ;
	 float    GeneralPurposeTweak2 ;
	 float    DemosaicVposOffset ;
	 float    DecalDepthBias ;
	 float3    IndirectLightingColorScale ;
	 float    Padding2652 ;
	 float3    PrecomputedIndirectLightingColorScale ;
	 float    Padding2668 ;
	 float3    PrecomputedIndirectSpecularColorScale ;
	 float    Padding2684 ;
	 float4    AtmosphereLightDirection[2] ;
	 float4    AtmosphereLightIlluminanceOnGroundPostTransmittance[2] ;
	 float4    AtmosphereLightIlluminanceOuterSpace[2] ;
	 float4    AtmosphereLightDiscLuminance[2] ;
	 float4    AtmosphereLightDiscCosHalfApexAngle_PPTrans[2] ;
	 float4    SkyViewLutSizeAndInvSize ;
	 float3    SkyCameraTranslatedWorldOrigin ;
	 float    Padding2876 ;
	 float4    SkyPlanetTranslatedWorldCenterAndViewHeight ;
	 float4x4    SkyViewLutReferential ;
	 float4    SkyAtmosphereSkyLuminanceFactor ;
	 float    SkyAtmospherePresentInScene ;
	 float    SkyAtmosphereHeightFogContribution ;
	 float    SkyAtmosphereBottomRadiusKm ;
	 float    SkyAtmosphereTopRadiusKm ;
	 float4    SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize ;
	 float    SkyAtmosphereAerialPerspectiveStartDepthKm ;
	 float    SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution ;
	 float    SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv ;
	 float    SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm ;
	 float    SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv ;
	 float    SkyAtmosphereApplyCameraAerialPerspectiveVolume ;
	 float    Padding3032 ;
	 float    Padding3036 ;
	 float3    NormalCurvatureToRoughnessScaleBias ;
	 float    RenderingReflectionCaptureMask ;
	 float    RealTimeReflectionCapture ;
	 float    RealTimeReflectionCapturePreExposure ;
	 float    Padding3064 ;
	 float    Padding3068 ;
	 float4    AmbientCubemapTint ;
	 float    AmbientCubemapIntensity ;
	 float    SkyLightApplyPrecomputedBentNormalShadowingFlag ;
	 float    SkyLightAffectReflectionFlag ;
	 float    SkyLightAffectGlobalIlluminationFlag ;
	 float4    SkyLightColor ;
	 float    SkyLightVolumetricScatteringIntensity ;
	 float    Padding3124 ;
	 float    Padding3128 ;
	 float    Padding3132 ;
	 float4    MobileSkyIrradianceEnvironmentMap[8] ;
	 float    MobilePreviewMode ;
	 float    HMDEyePaddingOffset ;
	 float    ReflectionCubemapMaxMip ;
	 float    ShowDecalsMask ;
	 uint    DistanceFieldAOSpecularOcclusionMode ;
	 float    IndirectCapsuleSelfShadowingIntensity ;
	 float    Padding3288 ;
	 float    Padding3292 ;
	 float3    ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight ;
	 int    StereoPassIndex ;
	 float4    GlobalVolumeTranslatedCenterAndExtent[6] ;
	 float4    GlobalVolumeTranslatedWorldToUVAddAndMul[6] ;
	 float4    GlobalDistanceFieldMipTranslatedWorldToUVScale[6] ;
	 float4    GlobalDistanceFieldMipTranslatedWorldToUVBias[6] ;
	 float    GlobalDistanceFieldMipFactor ;
	 float    GlobalDistanceFieldMipTransition ;
	 int    GlobalDistanceFieldClipmapSizeInPages ;
	 int    Padding3708 ;
	 float3    GlobalDistanceFieldInvPageAtlasSize ;
	 float    Padding3724 ;
	 float3    GlobalDistanceFieldInvCoverageAtlasSize ;
	 float    GlobalVolumeDimension ;
	 float    GlobalVolumeTexelSize ;
	 float    MaxGlobalDFAOConeDistance ;
	 uint    NumGlobalSDFClipmaps ;
	 float    CoveredExpandSurfaceScale ;
	 float    NotCoveredExpandSurfaceScale ;
	 float    NotCoveredMinStepScale ;
	 float    DitheredTransparencyStepThreshold ;
	 float    DitheredTransparencyTraceThreshold ;
	 int2    CursorPosition ;
	 float    bCheckerboardSubsurfaceProfileRendering ;
	 float    Padding3788 ;
	 float3    VolumetricFogInvGridSize ;
	 float    Padding3804 ;
	 float3    VolumetricFogGridZParams ;
	 float    Padding3820 ;
	 float2    VolumetricFogSVPosToVolumeUV ;
	 float2    VolumetricFogViewGridUVToPrevViewRectUV ;
	 float2    VolumetricFogPrevViewGridRectUVToResourceUV ;
	 float2    VolumetricFogPrevUVMax ;
	 float2    VolumetricFogPrevUVMaxForTemporalBlend ;
	 float2    VolumetricFogScreenToResourceUV ;
	 float2    VolumetricFogUVMax ;
	 float    VolumetricFogMaxDistance ;
	 float    Padding3884 ;
	 float3    VolumetricLightmapWorldToUVScale ;
	 float    Padding3900 ;
	 float3    VolumetricLightmapWorldToUVAdd ;
	 float    Padding3916 ;
	 float3    VolumetricLightmapIndirectionTextureSize ;
	 float    VolumetricLightmapBrickSize ;
	 float3    VolumetricLightmapBrickTexelSize ;
	 float    IndirectLightingCacheShowFlag ;
	 float    EyeToPixelSpreadAngle ;
	 float    Padding3956 ;
	 float    Padding3960 ;
	 float    Padding3964 ;
	 float4    XRPassthroughCameraUVs[2] ;
	 float    GlobalVirtualTextureMipBias ;
	 uint    VirtualTextureFeedbackShift ;
	 uint    VirtualTextureFeedbackMask ;
	 uint    VirtualTextureFeedbackStride ;
	 uint    VirtualTextureFeedbackJitterOffset ;
	 uint    VirtualTextureFeedbackSampleOffset ;
	 uint    Padding4024 ;
	 uint    Padding4028 ;
	 float4    RuntimeVirtualTextureMipLevel ;
	 float2    RuntimeVirtualTexturePackHeight ;
	 float    Padding4056 ;
	 float    Padding4060 ;
	 float4    RuntimeVirtualTextureDebugParams ;
	 int    FarShadowStaticMeshLODBias ;
	 float    MinRoughness ;
	 float    Padding4088 ;
	 float    Padding4092 ;
	 float4    HairRenderInfo ;
	 uint    EnableSkyLight ;
	 uint    HairRenderInfoBits ;
	 uint    HairComponents ;
	 float    bSubsurfacePostprocessEnabled ;
	 float4    SSProfilesTextureSizeAndInvSize ;
	 float4    SSProfilesPreIntegratedTextureSizeAndInvSize ;
	 float4    SpecularProfileTextureSizeAndInvSize ;
	 float3    PhysicsFieldClipmapCenter ;
	 float    PhysicsFieldClipmapDistance ;
	 int    PhysicsFieldClipmapResolution ;
	 int    PhysicsFieldClipmapExponent ;
	 int    PhysicsFieldClipmapCount ;
	 int    PhysicsFieldTargetCount ;
	 int4    PhysicsFieldTargets[32] ;
	 uint    GPUSceneViewId ;
	 float    ViewResolutionFraction ;
	 float    SubSurfaceColorAsTransmittanceAtDistanceInMeters ;
	 float    Padding4732 ;
	 float4    TanAndInvTanHalfFOV ;
	 float4    PrevTanAndInvTanHalfFOV ;
	 float2    WorldDepthToPixelWorldRadius ;
	 float    Padding4776 ;
	 float    Padding4780 ;
	 float4    ScreenRayLengthMultiplier ;
	 float4    GlintLUTParameters0 ;
	 float4    GlintLUTParameters1 ;
	 int4    EnvironmentComponentsFlags ;
	 uint    BindlessSampler_MaterialTextureBilinearWrapedSampler ;
	 uint    Padding4852 ;
	 uint    BindlessSampler_MaterialTextureBilinearClampedSampler ;
	 uint    Padding4860 ;
	 uint    BindlessSRV_VolumetricLightmapIndirectionTexture ;
	 uint    Padding4868 ;
	 uint    BindlessSRV_VolumetricLightmapBrickAmbientVector ;
	 uint    Padding4876 ;
	 uint    BindlessSRV_VolumetricLightmapBrickSHCoefficients0 ;
	 uint    Padding4884 ;
	 uint    BindlessSRV_VolumetricLightmapBrickSHCoefficients1 ;
	 uint    Padding4892 ;
	 uint    BindlessSRV_VolumetricLightmapBrickSHCoefficients2 ;
	 uint    Padding4900 ;
	 uint    BindlessSRV_VolumetricLightmapBrickSHCoefficients3 ;
	 uint    Padding4908 ;
	 uint    BindlessSRV_VolumetricLightmapBrickSHCoefficients4 ;
	 uint    Padding4916 ;
	 uint    BindlessSRV_VolumetricLightmapBrickSHCoefficients5 ;
	 uint    Padding4924 ;
	 uint    BindlessSRV_SkyBentNormalBrickTexture ;
	 uint    Padding4932 ;
	 uint    BindlessSRV_DirectionalLightShadowingBrickTexture ;
	 uint    Padding4940 ;
	 uint    BindlessSampler_VolumetricLightmapBrickAmbientVectorSampler ;
	 uint    Padding4948 ;
	 uint    BindlessSampler_VolumetricLightmapTextureSampler0 ;
	 uint    Padding4956 ;
	 uint    BindlessSampler_VolumetricLightmapTextureSampler1 ;
	 uint    Padding4964 ;
	 uint    BindlessSampler_VolumetricLightmapTextureSampler2 ;
	 uint    Padding4972 ;
	 uint    BindlessSampler_VolumetricLightmapTextureSampler3 ;
	 uint    Padding4980 ;
	 uint    BindlessSampler_VolumetricLightmapTextureSampler4 ;
	 uint    Padding4988 ;
	 uint    BindlessSampler_VolumetricLightmapTextureSampler5 ;
	 uint    Padding4996 ;
	 uint    BindlessSampler_SkyBentNormalTextureSampler ;
	 uint    Padding5004 ;
	 uint    BindlessSampler_DirectionalLightShadowingTextureSampler ;
	 uint    Padding5012 ;
	 uint    BindlessSRV_GlobalDistanceFieldPageAtlasTexture ;
	 uint    Padding5020 ;
	 uint    BindlessSRV_GlobalDistanceFieldCoverageAtlasTexture ;
	 uint    Padding5028 ;
	 uint    BindlessSRV_GlobalDistanceFieldPageTableTexture ;
	 uint    Padding5036 ;
	 uint    BindlessSRV_GlobalDistanceFieldMipTexture ;
	 uint    Padding5044 ;
	 uint    BindlessSampler_GlobalDistanceFieldPageAtlasTextureSampler ;
	 uint    Padding5052 ;
	 uint    BindlessSampler_GlobalDistanceFieldCoverageAtlasTextureSampler ;
	 uint    Padding5060 ;
	 uint    BindlessSampler_GlobalDistanceFieldMipTextureSampler ;
	 uint    Padding5068 ;
	 uint    BindlessSRV_AtmosphereTransmittanceTexture ;
	 uint    Padding5076 ;
	 uint    BindlessSampler_AtmosphereTransmittanceTextureSampler ;
	 uint    Padding5084 ;
	 uint    BindlessSRV_AtmosphereIrradianceTexture ;
	 uint    Padding5092 ;
	 uint    BindlessSampler_AtmosphereIrradianceTextureSampler ;
	 uint    Padding5100 ;
	 uint    BindlessSRV_AtmosphereInscatterTexture ;
	 uint    Padding5108 ;
	 uint    BindlessSampler_AtmosphereInscatterTextureSampler ;
	 uint    Padding5116 ;
	 uint    BindlessSRV_PerlinNoiseGradientTexture ;
	 uint    Padding5124 ;
	 uint    BindlessSampler_PerlinNoiseGradientTextureSampler ;
	 uint    Padding5132 ;
	 uint    BindlessSRV_PerlinNoise3DTexture ;
	 uint    Padding5140 ;
	 uint    BindlessSampler_PerlinNoise3DTextureSampler ;
	 uint    Padding5148 ;
	 uint    BindlessSRV_SobolSamplingTexture ;
	 uint    Padding5156 ;
	 uint    BindlessSampler_SharedPointWrappedSampler ;
	 uint    Padding5164 ;
	 uint    BindlessSampler_SharedPointClampedSampler ;
	 uint    Padding5172 ;
	 uint    BindlessSampler_SharedBilinearWrappedSampler ;
	 uint    Padding5180 ;
	 uint    BindlessSampler_SharedBilinearClampedSampler ;
	 uint    Padding5188 ;
	 uint    BindlessSampler_SharedBilinearAnisoClampedSampler ;
	 uint    Padding5196 ;
	 uint    BindlessSampler_SharedTrilinearWrappedSampler ;
	 uint    Padding5204 ;
	 uint    BindlessSampler_SharedTrilinearClampedSampler ;
	 uint    Padding5212 ;
	 uint    BindlessSRV_PreIntegratedBRDF ;
	 uint    Padding5220 ;
	 uint    BindlessSampler_PreIntegratedBRDFSampler ;
	 uint    Padding5228 ;
	 uint    BindlessSRV_SkyIrradianceEnvironmentMap ;
	 uint    Padding5236 ;
	 uint    BindlessSRV_TransmittanceLutTexture ;
	 uint    Padding5244 ;
	 uint    BindlessSampler_TransmittanceLutTextureSampler ;
	 uint    Padding5252 ;
	 uint    BindlessSRV_SkyViewLutTexture ;
	 uint    Padding5260 ;
	 uint    BindlessSampler_SkyViewLutTextureSampler ;
	 uint    Padding5268 ;
	 uint    BindlessSRV_DistantSkyLightLutTexture ;
	 uint    Padding5276 ;
	 uint    BindlessSampler_DistantSkyLightLutTextureSampler ;
	 uint    Padding5284 ;
	 uint    BindlessSRV_CameraAerialPerspectiveVolume ;
	 uint    Padding5292 ;
	 uint    BindlessSampler_CameraAerialPerspectiveVolumeSampler ;
	 uint    Padding5300 ;
	 uint    BindlessSRV_CameraAerialPerspectiveVolumeMieOnly ;
	 uint    Padding5308 ;
	 uint    BindlessSampler_CameraAerialPerspectiveVolumeMieOnlySampler ;
	 uint    Padding5316 ;
	 uint    BindlessSRV_CameraAerialPerspectiveVolumeRayOnly ;
	 uint    Padding5324 ;
	 uint    BindlessSampler_CameraAerialPerspectiveVolumeRayOnlySampler ;
	 uint    Padding5332 ;
	 uint    BindlessSRV_HairScatteringLUTTexture ;
	 uint    Padding5340 ;
	 uint    BindlessSampler_HairScatteringLUTSampler ;
	 uint    Padding5348 ;
	 uint    BindlessSRV_GGXLTCMatTexture ;
	 uint    Padding5356 ;
	 uint    BindlessSampler_GGXLTCMatSampler ;
	 uint    Padding5364 ;
	 uint    BindlessSRV_GGXLTCAmpTexture ;
	 uint    Padding5372 ;
	 uint    BindlessSampler_GGXLTCAmpSampler ;
	 uint    Padding5380 ;
	 uint    BindlessSRV_SheenLTCTexture ;
	 uint    Padding5388 ;
	 uint    BindlessSampler_SheenLTCSampler ;
	 uint    Padding5396 ;
	 uint    bShadingEnergyConservation ;
	 uint    bShadingEnergyPreservation ;
	 uint    BindlessSRV_ShadingEnergyGGXSpecTexture ;
	 uint    Padding5412 ;
	 uint    BindlessSRV_ShadingEnergyGGXGlassTexture ;
	 uint    Padding5420 ;
	 uint    BindlessSRV_ShadingEnergyClothSpecTexture ;
	 uint    Padding5428 ;
	 uint    BindlessSRV_ShadingEnergyDiffuseTexture ;
	 uint    Padding5436 ;
	 uint    BindlessSampler_ShadingEnergySampler ;
	 uint    Padding5444 ;
	 uint    BindlessSRV_GlintTexture ;
	 uint    Padding5452 ;
	 uint    BindlessSampler_GlintSampler ;
	 uint    Padding5460 ;
	 uint    BindlessSRV_SimpleVolumeTexture ;
	 uint    Padding5468 ;
	 uint    BindlessSampler_SimpleVolumeTextureSampler ;
	 uint    Padding5476 ;
	 uint    BindlessSRV_SimpleVolumeEnvTexture ;
	 uint    Padding5484 ;
	 uint    BindlessSampler_SimpleVolumeEnvTextureSampler ;
	 uint    Padding5492 ;
	 uint    BindlessSRV_SSProfilesTexture ;
	 uint    Padding5500 ;
	 uint    BindlessSampler_SSProfilesSampler ;
	 uint    Padding5508 ;
	 uint    BindlessSampler_SSProfilesTransmissionSampler ;
	 uint    Padding5516 ;
	 uint    BindlessSRV_SSProfilesPreIntegratedTexture ;
	 uint    Padding5524 ;
	 uint    BindlessSampler_SSProfilesPreIntegratedSampler ;
	 uint    Padding5532 ;
	 uint    BindlessSRV_SpecularProfileTexture ;
	 uint    Padding5540 ;
	 uint    BindlessSampler_SpecularProfileSampler ;
	 uint    Padding5548 ;
	 uint    BindlessSRV_WaterIndirection ;
	 uint    Padding5556 ;
	 uint    BindlessSRV_WaterData ;
	 uint    Padding5564 ;
	 float4    RectLightAtlasSizeAndInvSize ;
	 float    RectLightAtlasMaxMipLevel ;
	 float    Padding5588 ;
	 uint    BindlessSRV_RectLightAtlasTexture ;
	 uint    Padding5596 ;
	 uint    BindlessSampler_RectLightAtlasSampler ;
	 uint    Padding5604 ;
	 uint    Padding5608 ;
	 uint    Padding5612 ;
	 float4    IESAtlasSizeAndInvSize ;
	 uint    BindlessSRV_IESAtlasTexture ;
	 uint    Padding5636 ;
	 uint    BindlessSampler_IESAtlasSampler ;
	 uint    Padding5644 ;
	 uint    BindlessSampler_LandscapeWeightmapSampler ;
	 uint    Padding5652 ;
	 uint    BindlessSRV_LandscapeIndirection ;
	 uint    Padding5660 ;
	 uint    BindlessSRV_LandscapePerComponentData ;
	 uint    Padding5668 ;
	 uint    BindlessUAV_VTFeedbackBuffer ;
	 uint    Padding5676 ;
	 uint    BindlessSRV_PhysicsFieldClipmapBuffer ;
	 uint    Padding5684 ;
	 uint    Padding5688 ;
	 uint    Padding5692 ;
	 float3    TLASPreViewTranslationHigh ;
	 float    Padding5708 ;
	 float3    TLASPreViewTranslationLow ;
 };
ConstantBuffer<FViewConstants> View;
StructuredBuffer<uint>  InstanceCulling_InstanceIdsBuffer;
struct FPrimitiveConstants {
	 uint    Flags ;
	 uint    InstanceSceneDataOffset ;
	 uint    NumInstanceSceneDataEntries ;
	 int    SingleCaptureIndex ;
	 float3    PositionHigh ;
	 uint    PrimitiveComponentId ;
	 float4x4    LocalToRelativeWorld ;
	 float4x4    RelativeWorldToLocal ;
	 float4x4    PreviousLocalToRelativeWorld ;
	 float4x4    PreviousRelativeWorldToLocal ;
	 float4x4    WorldToPreviousWorld ;
	 float3    InvNonUniformScale ;
	 float    ObjectBoundsX ;
	 float4    ObjectWorldPositionHighAndRadius ;
	 float3    ObjectWorldPositionLow ;
	 float    MinMaterialDisplacement ;
	 float3    ActorWorldPositionHigh ;
	 float    MaxMaterialDisplacement ;
	 float3    ActorWorldPositionLow ;
	 uint    LightmapUVIndex ;
	 float3    ObjectOrientation ;
	 uint    LightmapDataIndex ;
	 float4    NonUniformScale ;
	 float3    PreSkinnedLocalBoundsMin ;
	 uint    NaniteResourceID ;
	 float3    PreSkinnedLocalBoundsMax ;
	 uint    NaniteHierarchyOffset ;
	 float3    LocalObjectBoundsMin ;
	 float    ObjectBoundsY ;
	 float3    LocalObjectBoundsMax ;
	 float    ObjectBoundsZ ;
	 float3    InstanceLocalBoundsCenter ;
	 uint    InstancePayloadDataOffset ;
	 float3    InstanceLocalBoundsExtent ;
	 uint    InstancePayloadDataStride ;
	 uint    InstancePayloadExtensionSize ;
	 uint    Padding564 ;
	 float2    WireframeAndPrimitiveColor ;
	 uint    PackedNaniteFlags ;
	 int    PersistentPrimitiveIndex ;
	 float2    InstanceDrawDistanceMinMaxSquared ;
	 float    InstanceWPODisableDistanceSquared ;
	 uint    NaniteRayTracingDataOffset ;
	 float    MaxWPOExtent ;
	 uint    CustomStencilValueAndMask ;
	 uint    VisibilityFlags ;
	 uint    Padding612 ;
	 uint    Padding616 ;
	 uint    Padding620 ;
	 float4    CustomPrimitiveData[9] ;
 };
ConstantBuffer<FPrimitiveConstants> Primitive;
struct FSceneConstants {
	 uint    BindlessSRV_GPUScene_GPUSceneInstanceSceneData ;
	 uint    Padding4 ;
	 uint    BindlessSRV_GPUScene_GPUSceneInstancePayloadData ;
	 uint    Padding12 ;
	 uint    BindlessSRV_GPUScene_GPUScenePrimitiveSceneData ;
	 uint    Padding20 ;
	 uint    BindlessSRV_GPUScene_GPUSceneLightmapData ;
	 uint    Padding28 ;
	 uint    BindlessSRV_GPUScene_GPUSceneLightData ;
	 uint    Padding36 ;
	 uint    GPUScene_InstanceDataSOAStride ;
	 uint    GPUScene_GPUSceneFrameNumber ;
	 int    GPUScene_NumInstances ;
	 int    GPUScene_NumScenePrimitives ;
	 float    Padding56 ;
	 float    Padding60 ;
	 uint    NaniteMaterials_PrimitiveMaterialElementStride ;
	 uint    Padding68 ;
	 uint    BindlessSRV_NaniteMaterials_PrimitiveMaterialData ;
	 uint    Padding76 ;
	 uint    BindlessSRV_NaniteMaterials_MaterialData ;
	 float    Padding84 ;
	 float    Padding88 ;
	 float    Padding92 ;
	 float2    SplineMesh_SplineTextureInvExtent ;
	 uint    BindlessSRV_SplineMesh_SplinePosTexture ;
	 uint    Padding108 ;
	 uint    BindlessSRV_SplineMesh_SplineRotTexture ;
	 uint    Padding116 ;
	 uint    BindlessSampler_SplineMesh_SplineSampler ;
 };
ConstantBuffer<FSceneConstants> Scene;
StructuredBuffer<float4>  Scene_GPUScene_GPUSceneInstanceSceneData;
StructuredBuffer<float4>  Scene_GPUScene_GPUSceneInstancePayloadData;
StructuredBuffer<float4>  Scene_GPUScene_GPUScenePrimitiveSceneData;
struct FInstancedVFLooseParametersConstants {
	 float4    InstancingViewZCompareZero ;
	 float4    InstancingViewZCompareOne ;
	 float4    InstancingViewZConstant ;
	 float4    InstancingTranslatedWorldViewOriginZero ;
	 float4    InstancingTranslatedWorldViewOriginOne ;
	 float4    InstancingFadeOutParams ;
 };
ConstantBuffer<FInstancedVFLooseParametersConstants> InstancedVFLooseParameters;
struct FLocalVFConstants {
	 int4    VertexFetch_Parameters ;
	 int    PreSkinBaseVertexIndex ;
	 uint    LODLightmapDataIndex ;
	 uint    BindlessSRV_VertexFetch_TexCoordBuffer ;
	 uint    Padding28 ;
	 uint    BindlessSRV_VertexFetch_PositionBuffer ;
	 uint    Padding36 ;
	 uint    BindlessSRV_VertexFetch_PreSkinPositionBuffer ;
	 uint    Padding44 ;
	 uint    BindlessSRV_VertexFetch_PackedTangentsBuffer ;
	 uint    Padding52 ;
	 uint    BindlessSRV_VertexFetch_ColorComponentsBuffer ;
 };
ConstantBuffer<FLocalVFConstants> LocalVF;
Buffer<float2>  LocalVF_VertexFetch_TexCoordBuffer;
Buffer<float4>  LocalVF_VertexFetch_PackedTangentsBuffer;
Buffer<float4>  LocalVF_VertexFetch_ColorComponentsBuffer;
struct FMaterialConstants {
	 float4    PreshaderBuffer[12] ;
	 uint    BindlessSRV_Texture2D_0 ;
	 uint    Padding196 ;
	 uint    BindlessSampler_Texture2D_0Sampler ;
	 uint    Padding204 ;
	 uint    BindlessSRV_Texture2D_1 ;
	 uint    Padding212 ;
	 uint    BindlessSampler_Texture2D_1Sampler ;
	 uint    Padding220 ;
	 uint    BindlessSRV_Texture2D_2 ;
	 uint    Padding228 ;
	 uint    BindlessSampler_Texture2D_2Sampler ;
	 uint    Padding236 ;
	 uint    BindlessSRV_Texture2D_3 ;
	 uint    Padding244 ;
	 uint    BindlessSampler_Texture2D_3Sampler ;
	 uint    Padding252 ;
	 uint    BindlessSRV_Texture2D_4 ;
	 uint    Padding260 ;
	 uint    BindlessSampler_Texture2D_4Sampler ;
	 uint    Padding268 ;
	 uint    BindlessSRV_Texture2D_5 ;
	 uint    Padding276 ;
	 uint    BindlessSampler_Texture2D_5Sampler ;
	 uint    Padding284 ;
	 uint    BindlessSRV_Texture2D_6 ;
	 uint    Padding292 ;
	 uint    BindlessSampler_Texture2D_6Sampler ;
	 uint    Padding300 ;
	 uint    BindlessSRV_Texture2D_7 ;
	 uint    Padding308 ;
	 uint    BindlessSampler_Texture2D_7Sampler ;
	 uint    Padding316 ;
	 uint    BindlessSRV_Texture2D_8 ;
	 uint    Padding324 ;
	 uint    BindlessSampler_Texture2D_8Sampler ;
	 uint    Padding332 ;
	 uint    BindlessSRV_Texture2D_9 ;
	 uint    Padding340 ;
	 uint    BindlessSampler_Texture2D_9Sampler ;
	 uint    Padding348 ;
	 uint    BindlessSRV_Texture2D_10 ;
	 uint    Padding356 ;
	 uint    BindlessSampler_Texture2D_10Sampler ;
	 uint    Padding364 ;
	 uint    BindlessSampler_Wrap_WorldGroupSettings ;
	 uint    Padding372 ;
	 uint    BindlessSampler_Clamp_WorldGroupSettings ;
 };
ConstantBuffer<FMaterialConstants> Material;
Texture2D  Material_Texture2D_7;
SamplerState  Material_Texture2D_7Sampler;
Texture2D  Material_Texture2D_8;
SamplerState  Material_Texture2D_8Sampler;
Texture2D  Material_Texture2D_9;
SamplerState  Material_Texture2D_9Sampler;
Texture2D  Material_Texture2D_10;
SamplerState  Material_Texture2D_10Sampler;
struct ViewStateTileOffsetData
{
	FLWCVector3 WorldCameraOrigin;
	FLWCVector3 WorldViewOrigin;
	FLWCVector3 PrevWorldCameraOrigin;
	FLWCVector3 PrevWorldViewOrigin;
	FLWCVector3 PreViewTranslation;
	FLWCVector3 PrevPreViewTranslation;
};
struct ViewState
{
	float4x4 TranslatedWorldToClip;
	float4x4 RelativeWorldToClip;
	float4x4 ClipToRelativeWorld;
	float4x4 TranslatedWorldToView;
	float4x4 ViewToTranslatedWorld;
	float4x4 TranslatedWorldToCameraView;
	float4x4 CameraViewToTranslatedWorld;
	float4x4 ViewToClip;
	float4x4 ViewToClipNoAA;
	float4x4 ClipToView;
	float4x4 ClipToTranslatedWorld;
	float4x4 SVPositionToTranslatedWorld;
	float4x4 ScreenToRelativeWorld;
	float4x4 ScreenToTranslatedWorld;
	float4x4 MobileMultiviewShadowTransform;
	float3 ViewOriginHigh;
	float3 ViewForward;
	float3 ViewUp;
	float3 ViewRight;
	float3 HMDViewNoRollUp;
	float3 HMDViewNoRollRight;
	float4 InvDeviceZToWorldZTransform;
	float4 ScreenPositionScaleBias;
	float3 ViewOriginLow;
	float3 TranslatedWorldCameraOrigin;
	float3 WorldViewOriginHigh;
	float3 WorldViewOriginLow;
	float3 PreViewTranslationHigh;
	float3 PreViewTranslationLow;
	float4x4 PrevViewToClip;
	float4x4 PrevClipToView;
	float4x4 PrevTranslatedWorldToClip;
	float4x4 PrevTranslatedWorldToView;
	float4x4 PrevViewToTranslatedWorld;
	float4x4 PrevTranslatedWorldToCameraView;
	float4x4 PrevCameraViewToTranslatedWorld;
	float3 PrevTranslatedWorldCameraOrigin;
	float3 PrevWorldCameraOriginHigh;
	float3 PrevWorldCameraOriginLow;
	float3 PrevWorldViewOriginHigh;
	float3 PrevWorldViewOriginLow;
	float3 PrevPreViewTranslationHigh;
	float3 PrevPreViewTranslationLow;
	float3 ViewTilePosition;
	float3 RelativeWorldCameraOriginTO;
	float3 RelativeWorldViewOriginTO;
	float3 RelativePreViewTranslationTO;
	float3 PrevRelativeWorldCameraOriginTO;
	float3 PrevRelativeWorldViewOriginTO;
	float3 RelativePrevPreViewTranslationTO;
	float4x4 PrevClipToRelativeWorld;
	float4x4 PrevScreenToTranslatedWorld;
	float4x4 ClipToPrevClip;
	float4x4 ClipToPrevClipWithAA;
	float4 TemporalAAJitter;
	float4 GlobalClippingPlane;
	float2 FieldOfViewWideAngles;
	float2 PrevFieldOfViewWideAngles;
	float4 ViewRectMin;
	float4 ViewSizeAndInvSize;
	uint4 ViewRectMinAndSize;
	float4 LightProbeSizeRatioAndInvSizeRatio;
	float4 BufferSizeAndInvSize;
	float4 BufferBilinearUVMinMax;
	float4 ScreenToViewSpace;
	float2 BufferToSceneTextureScale;
	float2 ResolutionFractionAndInv;
	int NumSceneColorMSAASamples;
	float ProjectionDepthThicknessScale;
	float PreExposure;
	float OneOverPreExposure;
	float4 DiffuseOverrideParameter;
	float4 SpecularOverrideParameter;
	float4 NormalOverrideParameter;
	float2 RoughnessOverrideParameter;
	float PrevFrameGameTime;
	float PrevFrameRealTime;
	float OutOfBoundsMask;
	float3 WorldCameraMovementSinceLastFrame;
	float CullingSign;
	float NearPlane;
	float GameTime;
	float RealTime;
	float DeltaTime;
	float MaterialTextureMipBias;
	float MaterialTextureDerivativeMultiply;
	uint Random;
	uint FrameNumber;
	uint FrameCounter;
	uint StateFrameIndexMod8;
	uint StateFrameIndex;
	uint DebugViewModeMask;
	uint WorldIsPaused;
	float CameraCut;
	float UnlitViewmodeMask;
	float4 DirectionalLightColor;
	float3 DirectionalLightDirection;
	float4 TranslucencyLightingVolumeMin[2];
	float4 TranslucencyLightingVolumeInvSize[2];
	float4 TemporalAAParams;
	float4 CircleDOFParams;
	float DepthOfFieldSensorWidth;
	float DepthOfFieldFocalDistance;
	float DepthOfFieldScale;
	float DepthOfFieldFocalLength;
	float DepthOfFieldFocalRegion;
	float DepthOfFieldNearTransitionRegion;
	float DepthOfFieldFarTransitionRegion;
	float MotionBlurNormalizedToPixel;
	float GeneralPurposeTweak;
	float GeneralPurposeTweak2;
	float DemosaicVposOffset;
	float DecalDepthBias;
	float3 IndirectLightingColorScale;
	float3 PrecomputedIndirectLightingColorScale;
	float3 PrecomputedIndirectSpecularColorScale;
	float4 AtmosphereLightDirection[2];
	float4 AtmosphereLightIlluminanceOnGroundPostTransmittance[2];
	float4 AtmosphereLightIlluminanceOuterSpace[2];
	float4 AtmosphereLightDiscLuminance[2];
	float4 AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];
	float4 SkyViewLutSizeAndInvSize;
	float3 SkyCameraTranslatedWorldOrigin;
	float4 SkyPlanetTranslatedWorldCenterAndViewHeight;
	float4x4 SkyViewLutReferential;
	float4 SkyAtmosphereSkyLuminanceFactor;
	float SkyAtmospherePresentInScene;
	float SkyAtmosphereHeightFogContribution;
	float SkyAtmosphereBottomRadiusKm;
	float SkyAtmosphereTopRadiusKm;
	float4 SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	float SkyAtmosphereAerialPerspectiveStartDepthKm;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	float SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	float3 NormalCurvatureToRoughnessScaleBias;
	float RenderingReflectionCaptureMask;
	float RealTimeReflectionCapture;
	float RealTimeReflectionCapturePreExposure;
	float4 AmbientCubemapTint;
	float AmbientCubemapIntensity;
	float SkyLightApplyPrecomputedBentNormalShadowingFlag;
	float SkyLightAffectReflectionFlag;
	float SkyLightAffectGlobalIlluminationFlag;
	float4 SkyLightColor;
	float SkyLightVolumetricScatteringIntensity;
	float4 MobileSkyIrradianceEnvironmentMap[8];
	float MobilePreviewMode;
	float HMDEyePaddingOffset;
	float ReflectionCubemapMaxMip;
	float ShowDecalsMask;
	uint DistanceFieldAOSpecularOcclusionMode;
	float IndirectCapsuleSelfShadowingIntensity;
	float3 ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	int StereoPassIndex;
	float4 GlobalVolumeTranslatedCenterAndExtent[6];
	float4 GlobalVolumeTranslatedWorldToUVAddAndMul[6];
	float4 GlobalDistanceFieldMipTranslatedWorldToUVScale[6];
	float4 GlobalDistanceFieldMipTranslatedWorldToUVBias[6];
	float GlobalDistanceFieldMipFactor;
	float GlobalDistanceFieldMipTransition;
	int GlobalDistanceFieldClipmapSizeInPages;
	float3 GlobalDistanceFieldInvPageAtlasSize;
	float3 GlobalDistanceFieldInvCoverageAtlasSize;
	float GlobalVolumeDimension;
	float GlobalVolumeTexelSize;
	float MaxGlobalDFAOConeDistance;
	uint NumGlobalSDFClipmaps;
	float CoveredExpandSurfaceScale;
	float NotCoveredExpandSurfaceScale;
	float NotCoveredMinStepScale;
	float DitheredTransparencyStepThreshold;
	float DitheredTransparencyTraceThreshold;
	int2 CursorPosition;
	float bCheckerboardSubsurfaceProfileRendering;
	float3 VolumetricFogInvGridSize;
	float3 VolumetricFogGridZParams;
	float2 VolumetricFogSVPosToVolumeUV;
	float2 VolumetricFogViewGridUVToPrevViewRectUV;
	float2 VolumetricFogPrevViewGridRectUVToResourceUV;
	float2 VolumetricFogPrevUVMax;
	float2 VolumetricFogPrevUVMaxForTemporalBlend;
	float2 VolumetricFogScreenToResourceUV;
	float2 VolumetricFogUVMax;
	float VolumetricFogMaxDistance;
	float3 VolumetricLightmapWorldToUVScale;
	float3 VolumetricLightmapWorldToUVAdd;
	float3 VolumetricLightmapIndirectionTextureSize;
	float VolumetricLightmapBrickSize;
	float3 VolumetricLightmapBrickTexelSize;
	float IndirectLightingCacheShowFlag;
	float EyeToPixelSpreadAngle;
	float4 XRPassthroughCameraUVs[2];
	float GlobalVirtualTextureMipBias;
	uint VirtualTextureFeedbackShift;
	uint VirtualTextureFeedbackMask;
	uint VirtualTextureFeedbackStride;
	uint VirtualTextureFeedbackJitterOffset;
	uint VirtualTextureFeedbackSampleOffset;
	float4 RuntimeVirtualTextureMipLevel;
	float2 RuntimeVirtualTexturePackHeight;
	float4 RuntimeVirtualTextureDebugParams;
	int FarShadowStaticMeshLODBias;
	float MinRoughness;
	float4 HairRenderInfo;
	uint EnableSkyLight;
	uint HairRenderInfoBits;
	uint HairComponents;
	float bSubsurfacePostprocessEnabled;
	float4 SSProfilesTextureSizeAndInvSize;
	float4 SSProfilesPreIntegratedTextureSizeAndInvSize;
	float4 SpecularProfileTextureSizeAndInvSize;
	float3 PhysicsFieldClipmapCenter;
	float PhysicsFieldClipmapDistance;
	int PhysicsFieldClipmapResolution;
	int PhysicsFieldClipmapExponent;
	int PhysicsFieldClipmapCount;
	int PhysicsFieldTargetCount;
	int4 PhysicsFieldTargets[32];
	uint GPUSceneViewId;
	float ViewResolutionFraction;
	float SubSurfaceColorAsTransmittanceAtDistanceInMeters;
	float4 TanAndInvTanHalfFOV;
	float4 PrevTanAndInvTanHalfFOV;
	float2 WorldDepthToPixelWorldRadius;
	float4 ScreenRayLengthMultiplier;
	float4 GlintLUTParameters0;
	float4 GlintLUTParameters1;
	int4 EnvironmentComponentsFlags;
	FDFInverseMatrix WorldToClip;
	FDFMatrix ClipToWorld;
	FDFMatrix ScreenToWorld;
	FDFMatrix PrevClipToWorld;
	FDFVector3 WorldCameraOrigin;
	FDFVector3 WorldViewOrigin;
	FDFVector3 PrevWorldCameraOrigin;
	FDFVector3 PrevWorldViewOrigin;
	FDFVector3 PreViewTranslation;
	FDFVector3 PrevPreViewTranslation;
	ViewStateTileOffsetData TileOffset;
};
void FinalizeViewState(inout ViewState InOutView);
ViewState GetPrimaryView()
{
	ViewState Result;
	Result.TranslatedWorldToClip = View.TranslatedWorldToClip;
	Result.RelativeWorldToClip = View.RelativeWorldToClip;
	Result.ClipToRelativeWorld = View.ClipToRelativeWorld;
	Result.TranslatedWorldToView = View.TranslatedWorldToView;
	Result.ViewToTranslatedWorld = View.ViewToTranslatedWorld;
	Result.TranslatedWorldToCameraView = View.TranslatedWorldToCameraView;
	Result.CameraViewToTranslatedWorld = View.CameraViewToTranslatedWorld;
	Result.ViewToClip = View.ViewToClip;
	Result.ViewToClipNoAA = View.ViewToClipNoAA;
	Result.ClipToView = View.ClipToView;
	Result.ClipToTranslatedWorld = View.ClipToTranslatedWorld;
	Result.SVPositionToTranslatedWorld = View.SVPositionToTranslatedWorld;
	Result.ScreenToRelativeWorld = View.ScreenToRelativeWorld;
	Result.ScreenToTranslatedWorld = View.ScreenToTranslatedWorld;
	Result.MobileMultiviewShadowTransform = View.MobileMultiviewShadowTransform;
	Result.ViewOriginHigh = View.ViewOriginHigh;
	Result.ViewForward = View.ViewForward;
	Result.ViewUp = View.ViewUp;
	Result.ViewRight = View.ViewRight;
	Result.HMDViewNoRollUp = View.HMDViewNoRollUp;
	Result.HMDViewNoRollRight = View.HMDViewNoRollRight;
	Result.InvDeviceZToWorldZTransform = View.InvDeviceZToWorldZTransform;
	Result.ScreenPositionScaleBias = View.ScreenPositionScaleBias;
	Result.ViewOriginLow = View.ViewOriginLow;
	Result.TranslatedWorldCameraOrigin = View.TranslatedWorldCameraOrigin;
	Result.WorldViewOriginHigh = View.WorldViewOriginHigh;
	Result.WorldViewOriginLow = View.WorldViewOriginLow;
	Result.PreViewTranslationHigh = View.PreViewTranslationHigh;
	Result.PreViewTranslationLow = View.PreViewTranslationLow;
	Result.PrevViewToClip = View.PrevViewToClip;
	Result.PrevClipToView = View.PrevClipToView;
	Result.PrevTranslatedWorldToClip = View.PrevTranslatedWorldToClip;
	Result.PrevTranslatedWorldToView = View.PrevTranslatedWorldToView;
	Result.PrevViewToTranslatedWorld = View.PrevViewToTranslatedWorld;
	Result.PrevTranslatedWorldToCameraView = View.PrevTranslatedWorldToCameraView;
	Result.PrevCameraViewToTranslatedWorld = View.PrevCameraViewToTranslatedWorld;
	Result.PrevTranslatedWorldCameraOrigin = View.PrevTranslatedWorldCameraOrigin;
	Result.PrevWorldCameraOriginHigh = View.PrevWorldCameraOriginHigh;
	Result.PrevWorldCameraOriginLow = View.PrevWorldCameraOriginLow;
	Result.PrevWorldViewOriginHigh = View.PrevWorldViewOriginHigh;
	Result.PrevWorldViewOriginLow = View.PrevWorldViewOriginLow;
	Result.PrevPreViewTranslationHigh = View.PrevPreViewTranslationHigh;
	Result.PrevPreViewTranslationLow = View.PrevPreViewTranslationLow;
	Result.ViewTilePosition = View.ViewTilePosition;
	Result.RelativeWorldCameraOriginTO = View.RelativeWorldCameraOriginTO;
	Result.RelativeWorldViewOriginTO = View.RelativeWorldViewOriginTO;
	Result.RelativePreViewTranslationTO = View.RelativePreViewTranslationTO;
	Result.PrevRelativeWorldCameraOriginTO = View.PrevRelativeWorldCameraOriginTO;
	Result.PrevRelativeWorldViewOriginTO = View.PrevRelativeWorldViewOriginTO;
	Result.RelativePrevPreViewTranslationTO = View.RelativePrevPreViewTranslationTO;
	Result.PrevClipToRelativeWorld = View.PrevClipToRelativeWorld;
	Result.PrevScreenToTranslatedWorld = View.PrevScreenToTranslatedWorld;
	Result.ClipToPrevClip = View.ClipToPrevClip;
	Result.ClipToPrevClipWithAA = View.ClipToPrevClipWithAA;
	Result.TemporalAAJitter = View.TemporalAAJitter;
	Result.GlobalClippingPlane = View.GlobalClippingPlane;
	Result.FieldOfViewWideAngles = View.FieldOfViewWideAngles;
	Result.PrevFieldOfViewWideAngles = View.PrevFieldOfViewWideAngles;
	Result.ViewRectMin = View.ViewRectMin;
	Result.ViewSizeAndInvSize = View.ViewSizeAndInvSize;
	Result.ViewRectMinAndSize = View.ViewRectMinAndSize;
	Result.LightProbeSizeRatioAndInvSizeRatio = View.LightProbeSizeRatioAndInvSizeRatio;
	Result.BufferSizeAndInvSize = View.BufferSizeAndInvSize;
	Result.BufferBilinearUVMinMax = View.BufferBilinearUVMinMax;
	Result.ScreenToViewSpace = View.ScreenToViewSpace;
	Result.BufferToSceneTextureScale = View.BufferToSceneTextureScale;
	Result.ResolutionFractionAndInv = View.ResolutionFractionAndInv;
	Result.NumSceneColorMSAASamples = View.NumSceneColorMSAASamples;
	Result.ProjectionDepthThicknessScale = View.ProjectionDepthThicknessScale;
	Result.PreExposure = View.PreExposure;
	Result.OneOverPreExposure = View.OneOverPreExposure;
	Result.DiffuseOverrideParameter = View.DiffuseOverrideParameter;
	Result.SpecularOverrideParameter = View.SpecularOverrideParameter;
	Result.NormalOverrideParameter = View.NormalOverrideParameter;
	Result.RoughnessOverrideParameter = View.RoughnessOverrideParameter;
	Result.PrevFrameGameTime = View.PrevFrameGameTime;
	Result.PrevFrameRealTime = View.PrevFrameRealTime;
	Result.OutOfBoundsMask = View.OutOfBoundsMask;
	Result.WorldCameraMovementSinceLastFrame = View.WorldCameraMovementSinceLastFrame;
	Result.CullingSign = View.CullingSign;
	Result.NearPlane = View.NearPlane;
	Result.GameTime = View.GameTime;
	Result.RealTime = View.RealTime;
	Result.DeltaTime = View.DeltaTime;
	Result.MaterialTextureMipBias = View.MaterialTextureMipBias;
	Result.MaterialTextureDerivativeMultiply = View.MaterialTextureDerivativeMultiply;
	Result.Random = View.Random;
	Result.FrameNumber = View.FrameNumber;
	Result.FrameCounter = View.FrameCounter;
	Result.StateFrameIndexMod8 = View.StateFrameIndexMod8;
	Result.StateFrameIndex = View.StateFrameIndex;
	Result.DebugViewModeMask = View.DebugViewModeMask;
	Result.WorldIsPaused = View.WorldIsPaused;
	Result.CameraCut = View.CameraCut;
	Result.UnlitViewmodeMask = View.UnlitViewmodeMask;
	Result.DirectionalLightColor = View.DirectionalLightColor;
	Result.DirectionalLightDirection = View.DirectionalLightDirection;
	Result.TranslucencyLightingVolumeMin = View.TranslucencyLightingVolumeMin;
	Result.TranslucencyLightingVolumeInvSize = View.TranslucencyLightingVolumeInvSize;
	Result.TemporalAAParams = View.TemporalAAParams;
	Result.CircleDOFParams = View.CircleDOFParams;
	Result.DepthOfFieldSensorWidth = View.DepthOfFieldSensorWidth;
	Result.DepthOfFieldFocalDistance = View.DepthOfFieldFocalDistance;
	Result.DepthOfFieldScale = View.DepthOfFieldScale;
	Result.DepthOfFieldFocalLength = View.DepthOfFieldFocalLength;
	Result.DepthOfFieldFocalRegion = View.DepthOfFieldFocalRegion;
	Result.DepthOfFieldNearTransitionRegion = View.DepthOfFieldNearTransitionRegion;
	Result.DepthOfFieldFarTransitionRegion = View.DepthOfFieldFarTransitionRegion;
	Result.MotionBlurNormalizedToPixel = View.MotionBlurNormalizedToPixel;
	Result.GeneralPurposeTweak = View.GeneralPurposeTweak;
	Result.GeneralPurposeTweak2 = View.GeneralPurposeTweak2;
	Result.DemosaicVposOffset = View.DemosaicVposOffset;
	Result.DecalDepthBias = View.DecalDepthBias;
	Result.IndirectLightingColorScale = View.IndirectLightingColorScale;
	Result.PrecomputedIndirectLightingColorScale = View.PrecomputedIndirectLightingColorScale;
	Result.PrecomputedIndirectSpecularColorScale = View.PrecomputedIndirectSpecularColorScale;
	Result.AtmosphereLightDirection = View.AtmosphereLightDirection;
	Result.AtmosphereLightIlluminanceOnGroundPostTransmittance = View.AtmosphereLightIlluminanceOnGroundPostTransmittance;
	Result.AtmosphereLightIlluminanceOuterSpace = View.AtmosphereLightIlluminanceOuterSpace;
	Result.AtmosphereLightDiscLuminance = View.AtmosphereLightDiscLuminance;
	Result.AtmosphereLightDiscCosHalfApexAngle_PPTrans = View.AtmosphereLightDiscCosHalfApexAngle_PPTrans;
	Result.SkyViewLutSizeAndInvSize = View.SkyViewLutSizeAndInvSize;
	Result.SkyCameraTranslatedWorldOrigin = View.SkyCameraTranslatedWorldOrigin;
	Result.SkyPlanetTranslatedWorldCenterAndViewHeight = View.SkyPlanetTranslatedWorldCenterAndViewHeight;
	Result.SkyViewLutReferential = View.SkyViewLutReferential;
	Result.SkyAtmosphereSkyLuminanceFactor = View.SkyAtmosphereSkyLuminanceFactor;
	Result.SkyAtmospherePresentInScene = View.SkyAtmospherePresentInScene;
	Result.SkyAtmosphereHeightFogContribution = View.SkyAtmosphereHeightFogContribution;
	Result.SkyAtmosphereBottomRadiusKm = View.SkyAtmosphereBottomRadiusKm;
	Result.SkyAtmosphereTopRadiusKm = View.SkyAtmosphereTopRadiusKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize = View.SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	Result.SkyAtmosphereAerialPerspectiveStartDepthKm = View.SkyAtmosphereAerialPerspectiveStartDepthKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution = View.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv = View.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm = View.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv = View.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	Result.SkyAtmosphereApplyCameraAerialPerspectiveVolume = View.SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	Result.NormalCurvatureToRoughnessScaleBias = View.NormalCurvatureToRoughnessScaleBias;
	Result.RenderingReflectionCaptureMask = View.RenderingReflectionCaptureMask;
	Result.RealTimeReflectionCapture = View.RealTimeReflectionCapture;
	Result.RealTimeReflectionCapturePreExposure = View.RealTimeReflectionCapturePreExposure;
	Result.AmbientCubemapTint = View.AmbientCubemapTint;
	Result.AmbientCubemapIntensity = View.AmbientCubemapIntensity;
	Result.SkyLightApplyPrecomputedBentNormalShadowingFlag = View.SkyLightApplyPrecomputedBentNormalShadowingFlag;
	Result.SkyLightAffectReflectionFlag = View.SkyLightAffectReflectionFlag;
	Result.SkyLightAffectGlobalIlluminationFlag = View.SkyLightAffectGlobalIlluminationFlag;
	Result.SkyLightColor = View.SkyLightColor;
	Result.SkyLightVolumetricScatteringIntensity = View.SkyLightVolumetricScatteringIntensity;
	Result.MobileSkyIrradianceEnvironmentMap = View.MobileSkyIrradianceEnvironmentMap;
	Result.MobilePreviewMode = View.MobilePreviewMode;
	Result.HMDEyePaddingOffset = View.HMDEyePaddingOffset;
	Result.ReflectionCubemapMaxMip = View.ReflectionCubemapMaxMip;
	Result.ShowDecalsMask = View.ShowDecalsMask;
	Result.DistanceFieldAOSpecularOcclusionMode = View.DistanceFieldAOSpecularOcclusionMode;
	Result.IndirectCapsuleSelfShadowingIntensity = View.IndirectCapsuleSelfShadowingIntensity;
	Result.ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight = View.ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	Result.StereoPassIndex = View.StereoPassIndex;
	Result.GlobalVolumeTranslatedCenterAndExtent = View.GlobalVolumeTranslatedCenterAndExtent;
	Result.GlobalVolumeTranslatedWorldToUVAddAndMul = View.GlobalVolumeTranslatedWorldToUVAddAndMul;
	Result.GlobalDistanceFieldMipTranslatedWorldToUVScale = View.GlobalDistanceFieldMipTranslatedWorldToUVScale;
	Result.GlobalDistanceFieldMipTranslatedWorldToUVBias = View.GlobalDistanceFieldMipTranslatedWorldToUVBias;
	Result.GlobalDistanceFieldMipFactor = View.GlobalDistanceFieldMipFactor;
	Result.GlobalDistanceFieldMipTransition = View.GlobalDistanceFieldMipTransition;
	Result.GlobalDistanceFieldClipmapSizeInPages = View.GlobalDistanceFieldClipmapSizeInPages;
	Result.GlobalDistanceFieldInvPageAtlasSize = View.GlobalDistanceFieldInvPageAtlasSize;
	Result.GlobalDistanceFieldInvCoverageAtlasSize = View.GlobalDistanceFieldInvCoverageAtlasSize;
	Result.GlobalVolumeDimension = View.GlobalVolumeDimension;
	Result.GlobalVolumeTexelSize = View.GlobalVolumeTexelSize;
	Result.MaxGlobalDFAOConeDistance = View.MaxGlobalDFAOConeDistance;
	Result.NumGlobalSDFClipmaps = View.NumGlobalSDFClipmaps;
	Result.CoveredExpandSurfaceScale = View.CoveredExpandSurfaceScale;
	Result.NotCoveredExpandSurfaceScale = View.NotCoveredExpandSurfaceScale;
	Result.NotCoveredMinStepScale = View.NotCoveredMinStepScale;
	Result.DitheredTransparencyStepThreshold = View.DitheredTransparencyStepThreshold;
	Result.DitheredTransparencyTraceThreshold = View.DitheredTransparencyTraceThreshold;
	Result.CursorPosition = View.CursorPosition;
	Result.bCheckerboardSubsurfaceProfileRendering = View.bCheckerboardSubsurfaceProfileRendering;
	Result.VolumetricFogInvGridSize = View.VolumetricFogInvGridSize;
	Result.VolumetricFogGridZParams = View.VolumetricFogGridZParams;
	Result.VolumetricFogSVPosToVolumeUV = View.VolumetricFogSVPosToVolumeUV;
	Result.VolumetricFogViewGridUVToPrevViewRectUV = View.VolumetricFogViewGridUVToPrevViewRectUV;
	Result.VolumetricFogPrevViewGridRectUVToResourceUV = View.VolumetricFogPrevViewGridRectUVToResourceUV;
	Result.VolumetricFogPrevUVMax = View.VolumetricFogPrevUVMax;
	Result.VolumetricFogPrevUVMaxForTemporalBlend = View.VolumetricFogPrevUVMaxForTemporalBlend;
	Result.VolumetricFogScreenToResourceUV = View.VolumetricFogScreenToResourceUV;
	Result.VolumetricFogUVMax = View.VolumetricFogUVMax;
	Result.VolumetricFogMaxDistance = View.VolumetricFogMaxDistance;
	Result.VolumetricLightmapWorldToUVScale = View.VolumetricLightmapWorldToUVScale;
	Result.VolumetricLightmapWorldToUVAdd = View.VolumetricLightmapWorldToUVAdd;
	Result.VolumetricLightmapIndirectionTextureSize = View.VolumetricLightmapIndirectionTextureSize;
	Result.VolumetricLightmapBrickSize = View.VolumetricLightmapBrickSize;
	Result.VolumetricLightmapBrickTexelSize = View.VolumetricLightmapBrickTexelSize;
	Result.IndirectLightingCacheShowFlag = View.IndirectLightingCacheShowFlag;
	Result.EyeToPixelSpreadAngle = View.EyeToPixelSpreadAngle;
	Result.XRPassthroughCameraUVs = View.XRPassthroughCameraUVs;
	Result.GlobalVirtualTextureMipBias = View.GlobalVirtualTextureMipBias;
	Result.VirtualTextureFeedbackShift = View.VirtualTextureFeedbackShift;
	Result.VirtualTextureFeedbackMask = View.VirtualTextureFeedbackMask;
	Result.VirtualTextureFeedbackStride = View.VirtualTextureFeedbackStride;
	Result.VirtualTextureFeedbackJitterOffset = View.VirtualTextureFeedbackJitterOffset;
	Result.VirtualTextureFeedbackSampleOffset = View.VirtualTextureFeedbackSampleOffset;
	Result.RuntimeVirtualTextureMipLevel = View.RuntimeVirtualTextureMipLevel;
	Result.RuntimeVirtualTexturePackHeight = View.RuntimeVirtualTexturePackHeight;
	Result.RuntimeVirtualTextureDebugParams = View.RuntimeVirtualTextureDebugParams;
	Result.FarShadowStaticMeshLODBias = View.FarShadowStaticMeshLODBias;
	Result.MinRoughness = View.MinRoughness;
	Result.HairRenderInfo = View.HairRenderInfo;
	Result.EnableSkyLight = View.EnableSkyLight;
	Result.HairRenderInfoBits = View.HairRenderInfoBits;
	Result.HairComponents = View.HairComponents;
	Result.bSubsurfacePostprocessEnabled = View.bSubsurfacePostprocessEnabled;
	Result.SSProfilesTextureSizeAndInvSize = View.SSProfilesTextureSizeAndInvSize;
	Result.SSProfilesPreIntegratedTextureSizeAndInvSize = View.SSProfilesPreIntegratedTextureSizeAndInvSize;
	Result.SpecularProfileTextureSizeAndInvSize = View.SpecularProfileTextureSizeAndInvSize;
	Result.PhysicsFieldClipmapCenter = View.PhysicsFieldClipmapCenter;
	Result.PhysicsFieldClipmapDistance = View.PhysicsFieldClipmapDistance;
	Result.PhysicsFieldClipmapResolution = View.PhysicsFieldClipmapResolution;
	Result.PhysicsFieldClipmapExponent = View.PhysicsFieldClipmapExponent;
	Result.PhysicsFieldClipmapCount = View.PhysicsFieldClipmapCount;
	Result.PhysicsFieldTargetCount = View.PhysicsFieldTargetCount;
	Result.PhysicsFieldTargets = View.PhysicsFieldTargets;
	Result.GPUSceneViewId = View.GPUSceneViewId;
	Result.ViewResolutionFraction = View.ViewResolutionFraction;
	Result.SubSurfaceColorAsTransmittanceAtDistanceInMeters = View.SubSurfaceColorAsTransmittanceAtDistanceInMeters;
	Result.TanAndInvTanHalfFOV = View.TanAndInvTanHalfFOV;
	Result.PrevTanAndInvTanHalfFOV = View.PrevTanAndInvTanHalfFOV;
	Result.WorldDepthToPixelWorldRadius = View.WorldDepthToPixelWorldRadius;
	Result.ScreenRayLengthMultiplier = View.ScreenRayLengthMultiplier;
	Result.GlintLUTParameters0 = View.GlintLUTParameters0;
	Result.GlintLUTParameters1 = View.GlintLUTParameters1;
	Result.EnvironmentComponentsFlags = View.EnvironmentComponentsFlags;
	FinalizeViewState(Result);
	return Result;
}
void FinalizeViewState(inout ViewState InOutView)
{
	InOutView.WorldToClip = MakeDFInverseMatrix(InOutView.ViewOriginHigh, InOutView.RelativeWorldToClip);
	InOutView.ClipToWorld = MakeDFMatrix(InOutView.ViewOriginHigh, InOutView.ClipToRelativeWorld);
	InOutView.ScreenToWorld = MakeDFMatrix(InOutView.ViewOriginHigh, InOutView.ScreenToRelativeWorld);
	InOutView.PrevClipToWorld = MakeDFMatrix(InOutView.ViewOriginHigh, InOutView.PrevClipToRelativeWorld);
	InOutView.WorldCameraOrigin = MakeDFVector3(InOutView.ViewOriginHigh, InOutView.ViewOriginLow);
	InOutView.WorldViewOrigin = MakeDFVector3(InOutView.WorldViewOriginHigh, InOutView.WorldViewOriginLow);
	InOutView.PrevWorldCameraOrigin = MakeDFVector3(InOutView.PrevWorldCameraOriginHigh, InOutView.PrevWorldCameraOriginLow);
	InOutView.PrevWorldViewOrigin = MakeDFVector3(InOutView.PrevWorldViewOriginHigh, InOutView.PrevWorldViewOriginLow);
	InOutView.PreViewTranslation = MakeDFVector3(InOutView.PreViewTranslationHigh, InOutView.PreViewTranslationLow);
	InOutView.PrevPreViewTranslation = MakeDFVector3(InOutView.PrevPreViewTranslationHigh, InOutView.PrevPreViewTranslationLow);
	InOutView.TileOffset.WorldCameraOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.RelativeWorldCameraOriginTO);
	InOutView.TileOffset.WorldViewOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.RelativeWorldViewOriginTO);
	InOutView.TileOffset.PrevWorldCameraOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.PrevRelativeWorldCameraOriginTO);
	InOutView.TileOffset.PrevWorldViewOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.PrevRelativeWorldViewOriginTO);
	InOutView.TileOffset.PreViewTranslation = MakeLWCVector3(-InOutView.ViewTilePosition, InOutView.RelativePreViewTranslationTO);
	InOutView.TileOffset.PrevPreViewTranslation = MakeLWCVector3(-InOutView.ViewTilePosition, InOutView.RelativePrevPreViewTranslationTO);
}
static ViewState ResolvedView = (ViewState)0.0f;
ViewState ResolveView()
{
	return GetPrimaryView();
}
float4 Texture2DSampleLevel(Texture2D Tex, SamplerState Sampler, float2 UV, float Mip)
{
	return Tex.SampleLevel(Sampler, UV, Mip);
}
float length2(float2 v)
{
	return dot(v, v);
}
float length2(float3 v)
{
	return dot(v, v);
}
float length2(float4 v)
{
	return dot(v, v);
}
float PositiveClampedPow(float Base, float Exponent)
{
	return (Base <= 2.980233e-8f) ? 0.0f : pow(Base, Exponent);
}
float2 PositiveClampedPow(float2 Base, float2 Exponent)
{
	return float2(PositiveClampedPow(Base.x, Exponent.x), PositiveClampedPow(Base.y, Exponent.y)); 
}
float3 PositiveClampedPow(float3 Base, float3 Exponent)
{
	return float3(PositiveClampedPow(Base.xy, Exponent.xy), PositiveClampedPow(Base.z, Exponent.z)); 
}
float4 PositiveClampedPow(float4 Base, float4 Exponent)
{
	return float4(PositiveClampedPow(Base.xy, Exponent.xy), PositiveClampedPow(Base.zw, Exponent.zw)); 
}
float Pow2( float x )
{
	return x*x;
}
float2 Pow2( float2 x )
{
	return x*x;
}
float3 Pow2( float3 x )
{
	return x*x;
}
float4 Pow2( float4 x )
{
	return x*x;
}
FLWCScalar DFToWS(FDFScalar In) { return DFToTileOffset(In); }
FLWCScalar DFFastToWS(FDFScalar In) { return DFFastToTileOffset(In); }
FLWCVector2 DFToWS(FDFVector2 In) { return DFToTileOffset(In); }
FLWCVector2 DFFastToWS(FDFVector2 In) { return DFFastToTileOffset(In); }
FLWCVector3 DFToWS(FDFVector3 In) { return DFToTileOffset(In); }
FLWCVector3 DFFastToWS(FDFVector3 In) { return DFFastToTileOffset(In); }
FLWCVector4 DFToWS(FDFVector4 In) { return DFToTileOffset(In); }
FLWCVector4 DFFastToWS(FDFVector4 In) { return DFFastToTileOffset(In); }
FLWCMatrix DFToWS(FDFMatrix In) { return DFToTileOffset(In); }
FLWCMatrix DFFastToWS(FDFMatrix In) { return DFFastToTileOffset(In); }
FLWCInverseMatrix DFToWS(FDFInverseMatrix In) { return DFToTileOffset(In); }
FLWCInverseMatrix DFFastToWS(FDFInverseMatrix In) { return DFFastToTileOffset(In); }
float DFToWS( float In) { return In; }
float2 DFToWS( float2 In) { return In; }
float3 DFToWS( float3 In) { return In; }
float4 DFToWS( float4 In) { return In; }
float3x3 GetTangentBasis( float3 TangentZ )
{
	const float Sign = TangentZ.z >= 0 ? 1 : -1;
	const float a = -rcp( Sign + TangentZ.z );
	const float b = TangentZ.x * TangentZ.y * a;
	float3 TangentX = { 1 + Sign * a * Pow2( TangentZ.x ), Sign * b, -Sign * TangentZ.x };
	float3 TangentY = { b,  Sign + a * Pow2( TangentZ.y ), -TangentZ.y };
	return float3x3( TangentX, TangentY, TangentZ );
}
float3 TangentToWorld( float3 Vec, float3 TangentZ )
{
	return mul( Vec, GetTangentBasis( TangentZ ) );
}
float3 HemiOctahedronToUnitVector( float2 Oct )
{
	Oct = float2( Oct.x + Oct.y, Oct.x - Oct.y );
	float3 N = float3( Oct, 2.0 - dot( 1, abs(Oct) ) );
	return normalize(N);
}
static const uint InstanceTransformSizeFloat4Count = 2u;
struct FPrimitiveSceneData
{
	uint		Flags;
	uint		VisibilityFlags;
	int			InstanceSceneDataOffset; 
	int			NumInstanceSceneDataEntries;
	int			PersistentPrimitiveIndex;
	uint		SingleCaptureIndex; 
	float3		PositionHigh;
	uint		PrimitiveComponentId; 
	FDFMatrix	LocalToWorld;
	FDFInverseMatrix WorldToLocal;
	FDFMatrix	PreviousLocalToWorld;
	FDFInverseMatrix PreviousWorldToLocal;
	float4x4	WorldToPreviousWorld; 
	float3		InvNonUniformScale;
	float		ObjectBoundsX;
	FDFVector3	ObjectWorldPosition;
	FDFVector3	ActorWorldPosition;
	float		MinMaterialDisplacement;
	float		MaxMaterialDisplacement;
	FLWCVector3	ObjectWorldPositionTO;
	FLWCVector3	ActorWorldPositionTO;
	float		ObjectRadius;
	uint		LightmapUVIndex;   
	float3		ObjectOrientation; 
	uint		LightmapDataIndex; 
	float4		NonUniformScale;
	float3		PreSkinnedLocalBoundsMin;
	uint		NaniteResourceID;
	float3		PreSkinnedLocalBoundsMax;
	uint		NaniteHierarchyOffset;
	float3		LocalObjectBoundsMin;
	float		ObjectBoundsY;
	float3		LocalObjectBoundsMax;
	float		ObjectBoundsZ;
	uint		InstancePayloadDataOffset;
	uint		InstancePayloadDataStride;
	uint		InstancePayloadExtensionSize;
	float3		InstanceLocalBoundsCenter;
	float3		InstanceLocalBoundsExtent;
	float3		WireframeColor; 
	float3		PrimitiveColor; 
	uint		PackedNaniteFlags;
	float2 		InstanceDrawDistanceMinMaxSquared;
	float		InstanceWPODisableDistanceSquared;
	uint		NaniteRayTracingDataOffset;
	float		MaxWPOExtent;
	uint		CustomStencilValueAndMask;
	float4		CustomPrimitiveData[9u]; 
};
float3 UnpackColorRGB24(float PackedColorFloat)
{
	uint PackedColor = asuint(PackedColorFloat);
	return float3
	(
		float((PackedColor >> 24u) & 0xFF),
		float((PackedColor >> 16u) & 0xFF),
		float((PackedColor >>  8u) & 0xFF)
	) * (1.0f / 255.0f);
}
struct FInstanceSceneEditorData
{
	float3 HitProxyId;
	uint   HitProxyPacked;
	bool bIsSelected;
};
struct FInstanceSceneData
{
	FDFMatrix LocalToWorld;
	FDFMatrix PrevLocalToWorld;
	FDFInverseMatrix WorldToLocal;
	float4   NonUniformScale;
	float3   InvNonUniformScale;
	float    DeterminantSign;
	float3   LocalBoundsCenter;
	uint     PrimitiveId;
	uint     RelativeId;
	uint     PayloadDataOffset;
	uint     PayloadExtensionOffset;
	uint     PayloadExtensionSize;
	float3   LocalBoundsExtent;
	uint     LastUpdateSceneFrameNumber;
	uint     NaniteRuntimeResourceID;
	uint     NaniteHierarchyOffset;
	float    RandomID;
	float4   LightMapAndShadowMapUVBias;
	bool     ValidInstance;
	uint     Flags;
	FInstanceSceneEditorData EditorData;
};
float4 LoadPrimitivePrimitiveSceneDataElement(uint PrimitiveIndex, uint ItemIndex)
{
	uint TargetIdx = PrimitiveIndex + ItemIndex;
	 { };
	return Scene_GPUScene_GPUScenePrimitiveSceneData[TargetIdx];
}
FPrimitiveSceneData GetPrimitiveData(uint PrimitiveId)
{
	FPrimitiveSceneData PrimitiveData = (FPrimitiveSceneData)0;
	uint PrimitiveIndex = PrimitiveId * 42;
	float3 PositionHigh = LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 1).xyz;
	const float4x4 LocalToWorld = transpose(float4x4(
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 2),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 3),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 4),
		float4(0, 0, 0, 1)
	));
	const float4x4 PreviousLocalToWorld = transpose(float4x4(
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 8),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 9),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 10),
		float4(0, 0, 0, 1)
	));
	const float4x4 WorldToLocal = transpose(float4x4(
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 5),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 6),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 7),
		float4(0, 0, 0, 1)
	));
	const float4x4 PreviousWorldToLocal = transpose(float4x4(
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 11),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 12),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 13),
		float4(0, 0, 0, 1)
	));
	const float4x4 WorldToPreviousWorld = transpose(float4x4(
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 14),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 15),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 16),
		float4(0, 0, 0, 1)
	));
	float4 ObjectWorldPositionHighAndRadius	= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 18);
	float4 ObjectWorldPositionLow			= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 19);
	float4 ActorWorldPositionHigh	= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 20);
	float4 ActorWorldPositionLow	= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 21);
	PrimitiveData.Flags									= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 0).x);
	PrimitiveData.InstanceSceneDataOffset				= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 0).y);
	PrimitiveData.NumInstanceSceneDataEntries			= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 0).z);
	PrimitiveData.SingleCaptureIndex					= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 0).w) & 0xFFFFu;
	PrimitiveData.VisibilityFlags						= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 0).w) >> 16u;
	PrimitiveData.PositionHigh							= PositionHigh; 
	PrimitiveData.PrimitiveComponentId					= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 1).w);
	PrimitiveData.LocalToWorld							= MakeDFMatrix4x3(PositionHigh, LocalToWorld);
	PrimitiveData.WorldToLocal							= MakeDFInverseMatrix4x3(PositionHigh, WorldToLocal);
	PrimitiveData.PreviousLocalToWorld					= MakeDFMatrix4x3(PositionHigh, PreviousLocalToWorld);
	PrimitiveData.PreviousWorldToLocal					= MakeDFInverseMatrix4x3(PositionHigh, PreviousWorldToLocal);
	PrimitiveData.WorldToPreviousWorld					= WorldToPreviousWorld;
	PrimitiveData.InvNonUniformScale					= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 17).xyz;
	PrimitiveData.ObjectBoundsX							= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 17).w;
	PrimitiveData.ObjectRadius							= ObjectWorldPositionHighAndRadius.w;
	PrimitiveData.ObjectWorldPositionTO					= MakeLWCVector3(ObjectWorldPositionHighAndRadius.xyz, ObjectWorldPositionLow.xyz);
	PrimitiveData.ActorWorldPositionTO					= MakeLWCVector3(ActorWorldPositionHigh.xyz, ActorWorldPositionLow.xyz);
	PrimitiveData.ObjectWorldPosition					= DFFromTileOffset(PrimitiveData.ObjectWorldPositionTO);
	PrimitiveData.ActorWorldPosition					= DFFromTileOffset(PrimitiveData.ActorWorldPositionTO);
	PrimitiveData.MinMaterialDisplacement				= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 19).w;
	PrimitiveData.MaxMaterialDisplacement				= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 20).w;
	PrimitiveData.LightmapUVIndex						= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 21).w);
	PrimitiveData.ObjectOrientation						= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 22).xyz;
	PrimitiveData.LightmapDataIndex						= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 22).w);
	PrimitiveData.NonUniformScale						= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 23);
	PrimitiveData.PreSkinnedLocalBoundsMin				= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 24).xyz;
	PrimitiveData.NaniteResourceID						= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 24).w);
	PrimitiveData.PreSkinnedLocalBoundsMax				= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 25).xyz;
	PrimitiveData.NaniteHierarchyOffset					= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 25).w);
	PrimitiveData.LocalObjectBoundsMin					= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 26).xyz;
	PrimitiveData.ObjectBoundsY							= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 26).w;
	PrimitiveData.LocalObjectBoundsMax					= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 27).xyz;
	PrimitiveData.ObjectBoundsZ							= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 27).w;
	PrimitiveData.InstanceLocalBoundsCenter				= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 28).xyz;
	PrimitiveData.InstancePayloadDataOffset				= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 28).w);
	PrimitiveData.InstanceLocalBoundsExtent				= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 29).xyz;
	PrimitiveData.InstancePayloadDataStride				= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 29).w) & 0x00FFFFFFu;
	PrimitiveData.InstancePayloadExtensionSize			= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 29).w) >> 24;
	PrimitiveData.WireframeColor						= UnpackColorRGB24(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 30).x);
	PrimitiveData.PrimitiveColor						= UnpackColorRGB24(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 30).y);
	PrimitiveData.PackedNaniteFlags						= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 30).z);
	PrimitiveData.PersistentPrimitiveIndex				= asint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 30).w);
	PrimitiveData.InstanceDrawDistanceMinMaxSquared		= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 31).xy;
	PrimitiveData.InstanceWPODisableDistanceSquared		= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 31).z;
	PrimitiveData.NaniteRayTracingDataOffset			= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 31).w);
	PrimitiveData.MaxWPOExtent							= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 32).x;
	PrimitiveData.CustomStencilValueAndMask				= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 32).y);
	[unroll]
	for (int DataIndex = 0; DataIndex < 9u; ++DataIndex)
	{
		PrimitiveData.CustomPrimitiveData[DataIndex] = LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex,  33 + DataIndex);
	}
	return PrimitiveData;
}
float3 UnpackHitProxyId(uint HitProxyPacked)
{
	return float3
	(
		float((HitProxyPacked       ) & 0xFF),
		float((HitProxyPacked >>  8u) & 0xFF),
		float((HitProxyPacked >> 16u) & 0xFF)
	) * (1.0f / 255.0f);
}
struct FInstancePayloadDataOffsets
{
	uint HierarchyOffset;
	uint EditorData;
	uint LocalBounds;
	uint DynamicData;
	uint LightShadowUVBias;
	uint PayloadExtension;
	uint CustomData;
};
float4 LoadInstanceSceneDataElement(uint Index)
{
	return Scene_GPUScene_GPUSceneInstanceSceneData[Index];
}
float4 LoadInstancePayloadDataElement(uint Index)
{
	return Scene_GPUScene_GPUSceneInstancePayloadData[Index];
}
void GetHemiOrthoBasis( inout float3 BasisX, inout float3 BasisY, float3 BasisZ )
{
	float A = 1.0f / ( 1.0f + BasisZ.z );
	float B = -BasisZ.x * BasisZ.y * A;
	BasisX = float3( 1.0f - BasisZ.x * BasisZ.x * A, B, -BasisZ.x );
	BasisY = float3( B, 1.0f - BasisZ.y * BasisZ.y * A, -BasisZ.y );
}
float4x4 DecodeTransform( uint4 RotationScale, float3 Translation, inout float3 Scale )
{
	float4x4 M = 0.0;
	M[3].xyz = Translation;
	M[3].w = 1.0;
	{
		float3 Rotation =
		{
			( RotationScale[0] >>  0 ) & 0xffff,
			( RotationScale[0] >> 16 ) & 0xffff,
			( RotationScale[1] >>  0 ) & 0x7fff
		};
		float2 OctZ  = ( Rotation.xy - 32768 ) * (1.0f / 32767.0f);
		float Spin0  = ( Rotation.z  - 16384 ) * (0.70710678f / 16383.0f);	
		bool bSpinIsX = RotationScale[1] & 0x8000;
		M[2].xyz = HemiOctahedronToUnitVector( OctZ );
		float3 BasisX, BasisY;
		GetHemiOrthoBasis( BasisX, BasisY, M[2].xyz );
		float Spin1 = sqrt( 1.0f - Spin0 * Spin0 );
		float X = bSpinIsX ? Spin0 : Spin1;
		float Y = bSpinIsX ? Spin1 : Spin0;
		M[0].xyz = BasisX * X + BasisY * Y;
		M[1].xyz = cross( M[2].xyz, M[0].xyz );
	}
	{
		const uint SignMantissaBits	= 16;
		const uint SignMantissaMask	= (1u << SignMantissaBits) - 1;
		const uint MantissaBits		= SignMantissaBits - 1;
		uint SharedExp = RotationScale[3] >> 16;
		float ExpScale = asfloat( ( SharedExp - MantissaBits ) << 23 );
		uint3 Mantissa =
		{
			RotationScale[2] >> 0,
			RotationScale[2] >> 16,
			RotationScale[3] >> 0
		};
		Mantissa &= SignMantissaMask;
		Scale = Mantissa;
		Scale -= 1u << MantissaBits;
		Scale *= ExpScale;
		M[0] *= Scale[0];
		M[1] *= Scale[1];
		M[2] *= Scale[2];
	}
	return M;
}
void UnpackPrimitiveIdAndInstanceFlags(uint PackedPrimitiveIdAndFlags, inout uint OutPrimitiveId, inout uint OutInstanceFlags)
{
	OutPrimitiveId		= BitFieldExtractU32(PackedPrimitiveIdAndFlags, (20u),  0);
	OutInstanceFlags	= BitFieldExtractU32(PackedPrimitiveIdAndFlags, (12u), (20u));	
}
void LoadInstancePrimitiveIdAndFlags(uint InstanceId, uint SOAStride, inout uint OutPrimitiveId, inout uint OutInstanceFlags)
{
	const uint PackedPrimitiveIdAndFlags = asuint(LoadInstanceSceneDataElement(0 * SOAStride + InstanceId).x);
	UnpackPrimitiveIdAndInstanceFlags(PackedPrimitiveIdAndFlags, OutPrimitiveId, OutInstanceFlags);
}
void UnpackInstanceRelativeIdAndCustomDataCount(uint PackedRelativeIdAndCustomDataCount, inout uint OutRelativeId, inout uint OutCustomDataCount)
{
	OutRelativeId		= BitFieldExtractU32(PackedRelativeIdAndCustomDataCount, (24u),  0);
	OutCustomDataCount	= BitFieldExtractU32(PackedRelativeIdAndCustomDataCount, (8u), (24u));
}
void LoadInstanceRelativeIdAndCustomDataCount(uint InstanceId, uint SOAStride, inout uint OutPrimitiveId, inout uint OutInstanceFlags)
{
	const uint PackedRelativeIdAndCustomDataCount = asuint(LoadInstanceSceneDataElement(0 * SOAStride + InstanceId).y);
	UnpackInstanceRelativeIdAndCustomDataCount(PackedRelativeIdAndCustomDataCount, OutPrimitiveId, OutInstanceFlags);
}
float GetInstanceDeterminantSignFromFlags(uint Flags)
{
	return CondMask(Flags & 0x1, -1.0f, 1.0f);
}
FInstancePayloadDataOffsets GetInstancePayloadDataOffsets(uint PrimitiveId, uint Flags, uint InstanceRelativeId)
{
	FPrimitiveSceneData PrimitiveData = GetPrimitiveData(PrimitiveId);
	const uint PayloadDataRelativeOffset	= InstanceRelativeId * PrimitiveData.InstancePayloadDataStride;
	const uint PayloadDataGlobalOffset		= PayloadDataRelativeOffset + PrimitiveData.InstancePayloadDataOffset;
	const bool bHasHierarchyOffset			= (Flags & 0x20) != 0u;
	const bool bHasLocalBounds				= (Flags & 0x40) != 0u;
	const bool bHasDynamicData				= (Flags & 0x8) != 0u;
	const bool bHasLightShadowUVBias		= (Flags & 0x10) != 0u;
	const bool bHasCustomData				= (Flags & 0x4) != 0u;
	const bool bHasPayloadExtension			= (Flags & 0x80) != 0u;
	const bool bHasEditorData				= (Flags & 0x100) != 0u;
	uint CurOffset = PayloadDataGlobalOffset;
	FInstancePayloadDataOffsets Offsets;
	Offsets.HierarchyOffset 	= (0xFFFFFFFFu);
	Offsets.EditorData 			= (0xFFFFFFFFu);
	Offsets.LocalBounds 		= (0xFFFFFFFFu);
	Offsets.DynamicData 		= (0xFFFFFFFFu);
	Offsets.LightShadowUVBias 	= (0xFFFFFFFFu);
	Offsets.PayloadExtension	= (0xFFFFFFFFu);
	Offsets.CustomData			= (0xFFFFFFFFu);
	if (bHasHierarchyOffset)
	{
		Offsets.HierarchyOffset = CurOffset;
	}
	if (bHasEditorData)
	{
		Offsets.EditorData = CurOffset;
	}
	if (bHasLocalBounds)
	{
		Offsets.LocalBounds = CurOffset;
	}
	CurOffset += CondMask(bHasLocalBounds, 2u, CondMask(bHasHierarchyOffset || bHasEditorData, 1u, 0u));
	if (bHasDynamicData)
	{
		Offsets.DynamicData = CurOffset;
		CurOffset += InstanceTransformSizeFloat4Count;
	}
	if (bHasLightShadowUVBias)
	{
		Offsets.LightShadowUVBias = CurOffset;
		++CurOffset;
	}
	if (bHasPayloadExtension)
	{
		Offsets.PayloadExtension = CurOffset;
		CurOffset += PrimitiveData.InstancePayloadExtensionSize;
	}
	if (bHasCustomData)
	{
		Offsets.CustomData = CurOffset;
	}
	return Offsets;
}
void ComputeInstanceDerivedData(inout FInstanceSceneData InstanceData, float3 PositionHigh, float4x4 LocalToRelativeWorld)
{
	InstanceData.NonUniformScale.w							= max3( InstanceData.NonUniformScale.x, InstanceData.NonUniformScale.y, InstanceData.NonUniformScale.z );
	InstanceData.DeterminantSign							= GetInstanceDeterminantSignFromFlags(InstanceData.Flags);
	float4x4 RelativeWorldToLocal							= LocalToRelativeWorld;
	RelativeWorldToLocal[0].xyz							   *= Pow2(InstanceData.InvNonUniformScale.x);
	RelativeWorldToLocal[1].xyz					           *= Pow2(InstanceData.InvNonUniformScale.y);
	RelativeWorldToLocal[2].xyz					           *= Pow2(InstanceData.InvNonUniformScale.z);
	RelativeWorldToLocal[3].xyz						        = 0.0f;
	RelativeWorldToLocal								    = transpose(RelativeWorldToLocal);
	RelativeWorldToLocal[3].xyz						        = mul(float4(-LocalToRelativeWorld[3].xyz, 0.0f), RelativeWorldToLocal).xyz;
	InstanceData.WorldToLocal								= MakeDFInverseMatrix(PositionHigh, RelativeWorldToLocal);
}
FInstanceSceneData GetInstanceSceneData(uint InstanceId, uint SOAStride, bool bCheckValid = true)
{
	FInstanceSceneData InstanceData = (FInstanceSceneData)0;
	LoadInstancePrimitiveIdAndFlags(InstanceId, SOAStride, InstanceData.PrimitiveId, InstanceData.Flags);
	InstanceData.ValidInstance = InstanceData.PrimitiveId != ((1u << (20u)) - 1u) &&
								 ((InstanceData.Flags & 0x200) == 0u);
	[branch]
	if (!bCheckValid || InstanceData.ValidInstance)
	{
		uint CustomDataCount;
		LoadInstanceRelativeIdAndCustomDataCount(InstanceId, SOAStride, InstanceData.RelativeId, CustomDataCount);
		FInstancePayloadDataOffsets Offsets 	= GetInstancePayloadDataOffsets(InstanceData.PrimitiveId, InstanceData.Flags, InstanceData.RelativeId);
		InstanceData.LastUpdateSceneFrameNumber	= asuint(LoadInstanceSceneDataElement(0 * SOAStride + InstanceId).z);
		InstanceData.RandomID					= LoadInstanceSceneDataElement(0 * SOAStride + InstanceId).w;
		FPrimitiveSceneData PrimitiveData		= GetPrimitiveData(InstanceData.PrimitiveId);
		float3 PositionHigh 									= PrimitiveData.PositionHigh;
		uint4  RotationScale									= asuint(LoadInstanceSceneDataElement(1 * SOAStride + InstanceId));
		float3 Translation										= LoadInstanceSceneDataElement(2 * SOAStride + InstanceId).xyz;
		float3 Scale = 0;
		float4x4 LocalToRelativeWorld							= DecodeTransform( RotationScale, Translation, Scale );
		InstanceData.NonUniformScale.xyz						= abs(Scale);
		InstanceData.InvNonUniformScale							= rcp(InstanceData.NonUniformScale.xyz);
		InstanceData.LocalToWorld	= MakeDFMatrix(PositionHigh, LocalToRelativeWorld);
		ComputeInstanceDerivedData(InstanceData, PositionHigh, LocalToRelativeWorld);
		InstanceData.NaniteRuntimeResourceID	= PrimitiveData.NaniteResourceID;
		InstanceData.NaniteHierarchyOffset		= PrimitiveData.NaniteHierarchyOffset;
		[branch]
		if (Offsets.HierarchyOffset != (0xFFFFFFFFu))
		{
			const uint HierarchyRootOffset = asuint(LoadInstancePayloadDataElement(Offsets.HierarchyOffset)).x;
			InstanceData.NaniteHierarchyOffset += HierarchyRootOffset;
		}
		[branch]
		if (Offsets.EditorData != (0xFFFFFFFFu))
		{
			const uint PackedEditorData = asuint(LoadInstancePayloadDataElement(Offsets.EditorData)).y;
			InstanceData.EditorData.bIsSelected    = (PackedEditorData >> 24u) != 0;
			InstanceData.EditorData.HitProxyPacked =  PackedEditorData & 0x00FFFFFFu;
			InstanceData.EditorData.HitProxyId = UnpackHitProxyId(InstanceData.EditorData.HitProxyPacked);
		}
		[branch]
		if (Offsets.LocalBounds != (0xFFFFFFFFu))
		{
			InstanceData.LocalBoundsCenter = float3(LoadInstancePayloadDataElement(Offsets.LocalBounds + 0).zw, LoadInstancePayloadDataElement(Offsets.LocalBounds + 1).x);
			InstanceData.LocalBoundsExtent = LoadInstancePayloadDataElement(Offsets.LocalBounds + 1).yzw;
		}
		else
		{
			InstanceData.LocalBoundsCenter = PrimitiveData.InstanceLocalBoundsCenter;
			InstanceData.LocalBoundsExtent = PrimitiveData.InstanceLocalBoundsExtent;
		}
		[branch]
		if (Offsets.DynamicData != (0xFFFFFFFFu))
		{
			uint4  PrevRotationScale			= asuint(LoadInstancePayloadDataElement(Offsets.DynamicData + 0));
			float3 PrevTranslation				= LoadInstancePayloadDataElement(Offsets.DynamicData + 1).xyz;
			float3 PrevScale					= 0;
			float4x4 PrevLocalToRelativeWorld	= DecodeTransform(PrevRotationScale, PrevTranslation, PrevScale);
			InstanceData.PrevLocalToWorld		= MakeDFMatrix(PositionHigh, PrevLocalToRelativeWorld);
		}
		else
		{
			InstanceData.PrevLocalToWorld = MakeDFMatrix(PositionHigh, mul(LocalToRelativeWorld, PrimitiveData.WorldToPreviousWorld));
		}
		[branch]
		if (Offsets.LightShadowUVBias != (0xFFFFFFFFu))
		{
			InstanceData.LightMapAndShadowMapUVBias = LoadInstancePayloadDataElement(Offsets.LightShadowUVBias);
		}
		InstanceData.PayloadExtensionOffset = Offsets.PayloadExtension;
		InstanceData.PayloadExtensionSize = PrimitiveData.InstancePayloadExtensionSize;
	}
	return InstanceData;
}
void UnpackInstanceCullingOutput(uint PackedId, inout uint InstanceId, inout uint ViewIndex, inout uint CullingFlags)
{
	InstanceId = PackedId & ((1u << (24u)) - 1u);
	ViewIndex = PackedId >> ((24u) + (4u));
	CullingFlags = (PackedId >> (24u)) & ((1u << (4u)) - 1u);
}
struct FSceneDataIntermediates
{
	uint PrimitiveId;
	uint InstanceId;
	uint ViewIndex;
	uint CullingFlags;
	uint InstanceIdLoadIndex;
	FInstanceSceneData InstanceData;
	FPrimitiveSceneData Primitive;
};
FSceneDataIntermediates GetSceneDataIntermediates(uint InstanceIdOffset, uint DrawInstanceId)
{
	FSceneDataIntermediates Intermediates = (FSceneDataIntermediates)0;
	Intermediates.InstanceIdLoadIndex = InstanceIdOffset + DrawInstanceId;
	if ((InstanceIdOffset & (1U << 31U)) != 0U)
	{
		uint PrimitiveID = InstanceIdOffset & ((1U << 31U) - 1U);
		FPrimitiveSceneData PrimitiveData = GetPrimitiveData(PrimitiveID);
		Intermediates.InstanceId = PrimitiveData.InstanceSceneDataOffset + DrawInstanceId;
		Intermediates.ViewIndex = 0;
		Intermediates.CullingFlags = ((1u << 0u));
	}
	else
	{
		const uint PackedId = InstanceCulling_InstanceIdsBuffer[InstanceIdOffset + DrawInstanceId];
		UnpackInstanceCullingOutput(PackedId, Intermediates.InstanceId, Intermediates.ViewIndex, Intermediates.CullingFlags);
	}
	Intermediates.InstanceData = GetInstanceSceneData(Intermediates.InstanceId, Scene.GPUScene_InstanceDataSOAStride);
	Intermediates.PrimitiveId = Intermediates.InstanceData.PrimitiveId;
	Intermediates.Primitive = GetPrimitiveData(Intermediates.PrimitiveId);
	return Intermediates;
}
float4 ProcessMaterialLinearColorTextureLookup(float4 TextureValue)
{
	return TextureValue;
}
struct FSubstrateData
{
	uint Dummy;
};
struct FMaterialParticleParameters
{
	float RelativeTime;
	float MotionBlurFade;
	float Random;
	float4 Velocity;
	float4 Color;
	float4 TranslatedWorldPositionAndSize;
	float4 PrevTranslatedWorldPositionAndSize;
	FLWCVector3 WorldPosition;
	FLWCVector3 PrevWorldPosition;
	float4 MacroUV;
	float4 DynamicParameter;
	FDFMatrix ParticleToWorld;
	FDFInverseMatrix WorldToParticle;
	float2 Size;
	float SpriteRotation;
};
struct FMaterialAttributes
{
	float3 BaseColor;
	float Metallic;
	float Specular;
	float Roughness;
	float Anisotropy;
	float3 EmissiveColor;
	float Opacity;
	float OpacityMask;
	float3 Normal;
	float3 Tangent;
	float3 WorldPositionOffset;
	float Displacement;
	float3 SubsurfaceColor;
	float ClearCoat;
	float ClearCoatRoughness;
	float AmbientOcclusion;
	float3 Refraction;
	float PixelDepthOffset;
	uint ShadingModel;
	float SurfaceThickness;
	FSubstrateData FrontMaterial;
	float2 CustomizedUV0;
	float2 CustomizedUV1;
	float2 CustomizedUV2;
	float2 CustomizedUV3;
	float2 CustomizedUV4;
	float2 CustomizedUV5;
	float2 CustomizedUV6;
	float2 CustomizedUV7;
	float3 BentNormal;
	float3 ClearCoatBottomNormal;
	float3 CustomEyeTangent;
	float3 TransmittanceColor;
};
struct FMaterialLWCData
{
	FLWCVector3 AbsoluteWorldPosition;
	FLWCVector3 WorldPosition_NoOffsets;
	FLWCMatrix	LocalToWorld;
	FLWCInverseMatrix WorldToLocal;
	FLWCMatrix	PreviousLocalToWorld;
	FLWCInverseMatrix PreviousWorldToLocal;
	FLWCMatrix	InstanceToWorld;
	FLWCInverseMatrix WorldToInstance;
	FLWCMatrix	PreviousInstanceToWorld;
	FLWCVector3	ObjectWorldPosition;
	FLWCVector3	ActorWorldPosition;
	FLWCMatrix ParticleToWorld;
	FLWCInverseMatrix WorldToParticle;
	FLWCVector3 ParticleWorldPosition;
	FLWCVector3 PrevParticleWorldPosition;
	FLWCVector3 PreViewTranslation;
	FLWCVector3 PrevPreViewTranslation;
	FLWCVector3 WorldViewOrigin;
	FLWCVector3 PrevWorldViewOrigin;
	FLWCVector3 WorldCameraOrigin;
	FLWCVector3 PrevWorldCameraOrigin;
};
struct FMaterialPixelParameters
{
	float2 TexCoords[1];
	float4 VertexColor;
	float3 WorldNormal;
	float3 WorldTangent;
	float3 ReflectionVector;
	float3 CameraVector;
	float3 LightVector;
	float4 SvPosition;
	float4 ScreenPosition;
	float2 ViewBufferUV;
	float UnMirrored;
	float TwoSidedSign;
	float3x3 TangentToWorld;
	FDFVector3 AbsoluteWorldPosition;
	float3 WorldPosition_CamRelative;
	FDFVector3 WorldPosition_NoOffsets;
	float3 WorldPosition_NoOffsets_CamRelative;
	float3 LightingPositionOffset;
	float3 WorldPosition_DDX;
	float3 WorldPosition_DDY;
	float4 VertexColor_DDX;
	float4 VertexColor_DDY;
	float4 ScreenPosition_DDX;
	float4 ScreenPosition_DDY;
	float2 TexCoords_DDX[1];
	float2 TexCoords_DDY[1];
	float AOMaterialMask;
	float PerInstanceRandom;
	float4 PerInstanceParams;
	uint PrimitiveId;
	FMaterialParticleParameters Particle;
	uint Dummy;
	FMaterialAttributes MaterialAttributes;
	FMaterialLWCData LWCData;
};
struct FMaterialVertexParameters
{
	float3 WorldPosition;
	float3x3 TangentToWorld;
	float PerInstanceRandom;
	FDFMatrix InstanceLocalToWorld;
	FDFInverseMatrix InstanceWorldToLocal;
	float3 InstanceLocalPosition;
	float4 PerInstanceParams;
	uint InstanceOffset;
	FDFMatrix PrevFrameLocalToWorld;
	float3 PreSkinnedPosition;
	float3 PreSkinnedNormal;
	float4 VertexColor;
	float2 TexCoords[2];
	FMaterialParticleParameters Particle;
	FMaterialAttributes MaterialAttributes;
	FSceneDataIntermediates SceneData;
	uint PrimitiveId;
	bool bEvaluateWorldPositionOffset;
	FMaterialLWCData LWCData;
};
FMaterialVertexParameters MakeInitializedMaterialVertexParameters()
{
	FMaterialVertexParameters Result = (FMaterialVertexParameters)0;
	Result.PrimitiveId = ((1u << (20u)) - 1u);
	Result.bEvaluateWorldPositionOffset = true;
	return Result;
}
FPrimitiveSceneData GetPrimitiveData(FMaterialVertexParameters Parameters)
{
	return Parameters.SceneData.Primitive;
}
FPrimitiveSceneData GetPrimitiveData(FMaterialPixelParameters Parameters)
{
	return GetPrimitiveData(Parameters.PrimitiveId);
}
FDFInverseMatrix GetWorldToInstanceDF(FMaterialVertexParameters Parameters)
{
		return Parameters.InstanceWorldToLocal;
}
FDFInverseMatrix GetWorldToInstanceDF(FMaterialPixelParameters Parameters)
{
		return GetPrimitiveData(Parameters).WorldToLocal;
}
FDFMatrix GetInstanceToWorldDF(FMaterialVertexParameters Parameters)
{
		return Parameters.InstanceLocalToWorld;
}
FLWCMatrix GetInstanceToWorld(FMaterialVertexParameters Parameters) { return Parameters.LWCData.InstanceToWorld; }
FDFMatrix GetPrevInstanceToWorldDF(FMaterialVertexParameters Parameters)
{
	return Parameters.PrevFrameLocalToWorld;
}
FLWCMatrix GetPrevInstanceToWorld(FMaterialVertexParameters Parameters) { return Parameters.LWCData.PreviousInstanceToWorld; }
FDFMatrix GetInstanceToWorldDF(FMaterialPixelParameters Parameters)
{
		return GetPrimitiveData(Parameters).LocalToWorld;
}
FLWCMatrix GetInstanceToWorld(FMaterialPixelParameters Parameters) { return Parameters.LWCData.InstanceToWorld; }
FDFMatrix GetPrevInstanceToWorldDF(FMaterialPixelParameters Parameters)
{
	return GetPrimitiveData(Parameters).PreviousLocalToWorld;
}
FLWCMatrix GetPrevInstanceToWorld(FMaterialPixelParameters Parameters) { return Parameters.LWCData.PreviousInstanceToWorld; }
FLWCVector3 GetPrevPreViewTranslation(FMaterialVertexParameters Parameters)
{
	return Parameters.LWCData.PrevPreViewTranslation;
}
FLWCVector3 GetPrevPreViewTranslation(FMaterialPixelParameters Parameters)
{
	return Parameters.LWCData.PrevPreViewTranslation;
}
float3 GetTranslatedWorldPosition(FMaterialVertexParameters Parameters)
{
	return Parameters.WorldPosition;
}
float3 GetPrevTranslatedWorldPosition(FMaterialVertexParameters Parameters)
{
	return GetTranslatedWorldPosition(Parameters);
}
FLWCVector3 GetWorldPosition(FMaterialVertexParameters Parameters)
{
	return Parameters.LWCData.AbsoluteWorldPosition;
}
FLWCVector3 GetPrevWorldPosition(FMaterialVertexParameters Parameters)
{
	return LWCSubtract(GetPrevTranslatedWorldPosition(Parameters), GetPrevPreViewTranslation(Parameters));
}
FLWCVector3 GetWorldPosition(FMaterialPixelParameters Parameters)
{
	return Parameters.LWCData.AbsoluteWorldPosition;
}
float3 GetTranslatedWorldPosition(FMaterialPixelParameters Parameters)
{
	return Parameters.WorldPosition_CamRelative;
}
FDFMatrix GetLocalToWorldDF(FMaterialVertexParameters Parameters)
{
	return Parameters.InstanceLocalToWorld;
}
FLWCMatrix GetLocalToWorld(FMaterialVertexParameters Parameters)
{
	return Parameters.LWCData.LocalToWorld;
}
FDFMatrix GetLocalToWorldDF(FMaterialPixelParameters Parameters)
{
	return GetPrimitiveData(Parameters).LocalToWorld;
}
FLWCMatrix GetLocalToWorld(FMaterialPixelParameters Parameters)
{
	return Parameters.LWCData.LocalToWorld;
}
FDFMatrix GetPrevLocalToWorldDF(FMaterialVertexParameters Parameters)
{
	return Parameters.PrevFrameLocalToWorld;
}
FLWCMatrix GetPrevLocalToWorld(FMaterialVertexParameters Parameters)
{
	return Parameters.LWCData.PreviousLocalToWorld;
}
FDFMatrix GetPrevLocalToWorldDF(FMaterialPixelParameters Parameters)
{
	return GetPrimitiveData(Parameters).PreviousLocalToWorld;
}
FLWCMatrix GetPrevLocalToWorld(FMaterialPixelParameters Parameters)
{
	return Parameters.LWCData.PreviousLocalToWorld;
}
FDFInverseMatrix GetWorldToLocalDF(FMaterialVertexParameters Parameters)
{
	return GetPrimitiveData(Parameters).WorldToLocal;
}
FDFInverseMatrix GetWorldToLocalDF(FMaterialPixelParameters Parameters)
{
	return GetPrimitiveData(Parameters).WorldToLocal;
}
FDFInverseMatrix GetPrevWorldToLocalDF(FMaterialVertexParameters Parameters)
{
	return GetPrimitiveData(Parameters).PreviousWorldToLocal;
}
FDFInverseMatrix GetPrevWorldToLocalDF(FMaterialPixelParameters Parameters)
{
	return GetPrimitiveData(Parameters).PreviousWorldToLocal;
}
FLWCVector3 TransformLocalPositionToWorld(FMaterialPixelParameters Parameters,float3 InLocalPosition)
{
	return LWCMultiply(InLocalPosition, GetLocalToWorld(Parameters));
}
FLWCVector3 TransformLocalPositionToWorld(FMaterialVertexParameters Parameters,float3 InLocalPosition)
{
	return LWCMultiply(InLocalPosition, GetLocalToWorld(Parameters));
}
FLWCVector3 TransformLocalPositionToPrevWorld(FMaterialVertexParameters Parameters,float3 InLocalPosition)
{
	return LWCMultiply(InLocalPosition, GetPrevLocalToWorld(Parameters));
}
FMaterialLWCData MakeMaterialLWCData(FMaterialVertexParameters Parameters)
{
	FMaterialLWCData Result = (FMaterialLWCData)0;
	Result.PreViewTranslation = ResolvedView.TileOffset.PreViewTranslation;
	Result.PrevPreViewTranslation = ResolvedView.TileOffset.PrevPreViewTranslation;
	Result.WorldViewOrigin = ResolvedView.TileOffset.WorldViewOrigin;
	Result.PrevWorldViewOrigin = ResolvedView.TileOffset.PrevWorldViewOrigin;
	Result.WorldCameraOrigin = ResolvedView.TileOffset.WorldCameraOrigin;
	Result.PrevWorldCameraOrigin = ResolvedView.TileOffset.PrevWorldCameraOrigin;
	Result.AbsoluteWorldPosition = LWCSubtract(Parameters.WorldPosition, Result.PreViewTranslation);
	Result.InstanceToWorld = DFToWS(GetInstanceToWorldDF(Parameters));
	Result.WorldToInstance = DFFastToWS(GetWorldToInstanceDF(Parameters));
	Result.PreviousInstanceToWorld = DFToWS(GetPrevInstanceToWorldDF(Parameters));
	Result.LocalToWorld = DFToWS(GetLocalToWorldDF(Parameters));
	Result.WorldToLocal = DFFastToWS(GetWorldToLocalDF(Parameters));
	Result.PreviousLocalToWorld = DFToWS(GetPrevLocalToWorldDF(Parameters));
	Result.PreviousWorldToLocal = DFFastToWS(GetPrevWorldToLocalDF(Parameters));
	Result.ObjectWorldPosition = LWCGetOrigin(DFFastToWS(Parameters.InstanceLocalToWorld));
	Result.ActorWorldPosition = GetPrimitiveData(Parameters).ActorWorldPositionTO;
	Result.ParticleToWorld = DFFastToWS(Parameters.Particle.ParticleToWorld);
	Result.WorldToParticle = DFFastToWS(Parameters.Particle.WorldToParticle);
	Result.ParticleWorldPosition = LWCSubtract(Parameters.Particle.TranslatedWorldPositionAndSize.xyz, Result.PreViewTranslation);
	Result.PrevParticleWorldPosition = LWCSubtract(Parameters.Particle.PrevTranslatedWorldPositionAndSize.xyz, Result.PrevPreViewTranslation);
	return Result;
}
FMaterialLWCData MakeMaterialLWCData(FMaterialPixelParameters Parameters)
{
	FMaterialLWCData Result = (FMaterialLWCData)0;
	Result.PreViewTranslation = ResolvedView.TileOffset.PreViewTranslation;
	Result.PrevPreViewTranslation = ResolvedView.TileOffset.PrevPreViewTranslation;
	Result.WorldViewOrigin = ResolvedView.TileOffset.WorldViewOrigin;
	Result.PrevWorldViewOrigin = ResolvedView.TileOffset.PrevWorldViewOrigin;
	Result.WorldCameraOrigin = ResolvedView.TileOffset.WorldCameraOrigin;
	Result.PrevWorldCameraOrigin = ResolvedView.TileOffset.PrevWorldCameraOrigin;
	Result.AbsoluteWorldPosition = LWCSubtract(Parameters.WorldPosition_CamRelative, Result.PreViewTranslation);
	Result.WorldPosition_NoOffsets = LWCSubtract(Parameters.WorldPosition_NoOffsets_CamRelative, Result.PreViewTranslation);
	Result.InstanceToWorld = DFToWS(GetInstanceToWorldDF(Parameters));
	Result.WorldToInstance = DFFastToWS(GetWorldToInstanceDF(Parameters));
	Result.PreviousInstanceToWorld = DFToWS(GetPrevInstanceToWorldDF(Parameters));
	Result.LocalToWorld = DFToWS(GetLocalToWorldDF(Parameters));
	Result.WorldToLocal = DFFastToWS(GetWorldToLocalDF(Parameters));
	Result.PreviousLocalToWorld = DFToWS(GetPrevLocalToWorldDF(Parameters));
	Result.PreviousWorldToLocal = DFFastToWS(GetPrevWorldToLocalDF(Parameters));
	Result.ObjectWorldPosition = GetPrimitiveData(Parameters).ObjectWorldPositionTO;
	Result.ActorWorldPosition = GetPrimitiveData(Parameters).ActorWorldPositionTO;
	Result.ParticleToWorld = DFFastToWS(Parameters.Particle.ParticleToWorld);
	Result.WorldToParticle = DFFastToWS(Parameters.Particle.WorldToParticle);
	Result.ParticleWorldPosition = LWCSubtract(Parameters.Particle.TranslatedWorldPositionAndSize.xyz, Result.PreViewTranslation);
	Result.PrevParticleWorldPosition = LWCSubtract(Parameters.Particle.PrevTranslatedWorldPositionAndSize.xyz, Result.PrevPreViewTranslation);
	return Result;
}
float3 RotateAboutAxis(float4 NormalizedRotationAxisAndAngle, float3 PositionOnAxis, float3 Position)
{
	float3 ClosestPointOnAxis = PositionOnAxis + NormalizedRotationAxisAndAngle.xyz * dot(NormalizedRotationAxisAndAngle.xyz, Position - PositionOnAxis);
	float3 UAxis = Position - ClosestPointOnAxis;
	float3 VAxis = cross(NormalizedRotationAxisAndAngle.xyz, UAxis);
	float CosAngle;
	float SinAngle;
	sincos(NormalizedRotationAxisAndAngle.w, SinAngle, CosAngle);
	float3 R = UAxis * CosAngle + VAxis * SinAngle;
	float3 RotatedPosition = ClosestPointOnAxis + R;
	return RotatedPosition - Position;
}
float3 RotateAboutAxis(float4 NormalizedRotationAxisAndAngle, FLWCVector3 PositionOnAxis, FLWCVector3 Position)
{
	FLWCVector3 ClosestPointOnAxis = LWCAdd(PositionOnAxis, NormalizedRotationAxisAndAngle.xyz * dot(NormalizedRotationAxisAndAngle.xyz,  LWCToFloat(LWCSubtract( Position , PositionOnAxis ))));
	float3 UAxis =  LWCToFloat(LWCSubtract( Position , ClosestPointOnAxis ));
	float3 VAxis = cross(NormalizedRotationAxisAndAngle.xyz, UAxis);
	float CosAngle;
	float SinAngle;
	sincos(NormalizedRotationAxisAndAngle.w, SinAngle, CosAngle);
	float3 R = UAxis * CosAngle + VAxis * SinAngle;
	return R - UAxis;
}
float CustomExpression0(FMaterialVertexParameters Parameters,float N)
{
uint uRes32 = asuint(float(N));
const uint sign2 = ((uRes32>>16)&0x8000);
const uint exp2  = ((((const int) ((uRes32>>23)&0xff))-127+15) << 10);
const uint mant2 = ((uRes32>>13)&0x3ff);
const uint bits = (sign2 | exp2 | mant2);
const uint result = bits - 1024;
return float(result);
}
float CustomExpression1(FMaterialVertexParameters Parameters,float N)
{
uint uRes32 = asuint(float(N));
const uint sign2 = ((uRes32>>16)&0x8000);
const uint exp2  = ((((const int) ((uRes32>>23)&0xff))-127+15) << 10);
const uint mant2 = ((uRes32>>13)&0x3ff);
const uint bits = (sign2 | exp2 | mant2);
const uint result = bits - 1024;
return float(result);
}
float CustomExpression2(FMaterialVertexParameters Parameters,float N)
{
uint uRes32 = asuint(float(N));
const uint sign2 = ((uRes32>>16)&0x8000);
const uint exp2  = ((((const int) ((uRes32>>23)&0xff))-127+15) << 10);
const uint mant2 = ((uRes32>>13)&0x3ff);
const uint bits = (sign2 | exp2 | mant2);
const uint result = bits - 1024;
return float(result);
}
bool ShouldEnableWorldPositionOffset(FMaterialVertexParameters Parameters)
{
		if (!Parameters.bEvaluateWorldPositionOffset ||
			(GetPrimitiveData(Parameters).Flags & 0x8000) == 0)
		{
			return false;
		}
	return true;
}
float3 ClampWorldPositionOffset(FMaterialVertexParameters Parameters, float3 InOffset)
{
	const float MaxWPODim = GetPrimitiveData(Parameters).MaxWPOExtent;
	return MaxWPODim <= 0.0f ? InOffset : clamp(InOffset, -MaxWPODim.xxx, MaxWPODim.xxx);
}
float3 GetMaterialWorldPositionOffsetRaw(FMaterialVertexParameters Parameters)
{
	float4 Local71 = MaterialCollection0.Vectors[0];
	float Local72 = max(Local71.g,0.00000000);
	float Local73 = min(Local72,4.00000000);
	float Local74 = (Local73 * 0.02000000);
	float Local75 = (Local73 / 45.00000000);
	float2 Local76 = (((float2)fmod(View.GameTime,99999997952.00000000)) * float2(Local75,Local75));
	float Local77 = (Local71.r / 360.00000000);
	float Local78 = (Local77 * 6.28318548);
	float Local79 = cos(Local78);
	float Local80 = sin(Local78);
	float2 Local81 = float2(  Local79 ,  Local80 );
	float3 Local82 = float3(  Local81 ,0.00000000);
	float2 Local83 = Parameters.TexCoords[1].xy;
	float4 Local84 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleLevel(Material_Texture2D_7,Material_Texture2D_7Sampler,  Local83 ,-1.00000000));
	float Local85 = CustomExpression0(Parameters,Local84.a);
	float Local86 = fmod(Local85,Material.PreshaderBuffer[5].y);
	float Local87 = (Local85 * Material.PreshaderBuffer[5].z);
	float Local88 = floor(Local87);
	float2 Local89 = (float2(Local86,Local88) + ((float2)0.50000000));
	float2 Local90 = (Local89 * Material.PreshaderBuffer[6].xy);
	float4 Local91 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleLevel(Material_Texture2D_7,Material_Texture2D_7Sampler,float2(Local90.r,Local90.g),-1.00000000));
	float Local92 = CustomExpression1(Parameters,Local91.a);
	float Local93 =  select_internal( (abs(Local92 - Local85) > 0.00001000) ,  select_internal( (Local92 >= Local85) , 1.00000000 , 1.00000000 ) , 0.00000000 );
	float2 Local94 = (  Local83  * Material.PreshaderBuffer[6].zw);
	float2 Local95 = floor(  Local94 );
	float Local96 = (Local95.g * Material.PreshaderBuffer[5].y);
	float Local97 = (Local95.r + Local96);
	float Local98 =  select_internal( (abs(Local85 - Local97) > 0.00001000) ,  select_internal( (Local85 >= Local97) , 1.00000000 , 1.00000000 ) , 0.00000000 );
	float Local99 = (Local93.r + Local98.r);
	float Local100 = fmod(Local92,Material.PreshaderBuffer[5].y);
	float Local101 = (Local92 * Material.PreshaderBuffer[5].z);
	float Local102 = floor(Local101);
	float2 Local103 = (float2(Local100,Local102) + ((float2)0.50000000));
	float2 Local104 = (Local103 * Material.PreshaderBuffer[6].xy);
	float4 Local105 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleLevel(Material_Texture2D_7,Material_Texture2D_7Sampler,float2(Local104.r,Local104.g),-1.00000000));
	float Local106 = CustomExpression2(Parameters,Local105.a);
	float Local107 =  select_internal( (abs(Local106 - Local92) > 0.00001000) ,  select_internal( (Local106 >= Local92) , 1.00000000 , 1.00000000 ) , 0.00000000 );
	float Local108 = (Local99 + Local107.r);
	float Local109 = ceil(Local108);
	float Local110 = (Local109 / 3.00000000);
	float Local111 = (Local110 * 3.00000000);
	float Local112 = saturate(Local111);
	float2 Local113 = lerp(  Local83 ,float2(Local90.r,Local90.g),  Local112 );
	float Local114 = (Local111 - 1.00000000);
	float Local115 = saturate(Local114);
	float2 Local116 = lerp(Local113,float2(Local104.r,Local104.g),  Local115 );
	float Local117 = fmod(Local106,Material.PreshaderBuffer[5].y);
	float Local118 = (Local106 * Material.PreshaderBuffer[5].z);
	float Local119 = floor(Local118);
	float2 Local120 = (float2(Local117,Local119) + ((float2)0.50000000));
	float2 Local121 = (Local120 * Material.PreshaderBuffer[6].xy);
	float Local122 = (Local114 - 1.00000000);
	float Local123 = saturate(Local122);
	float2 Local124 = lerp(Local116,float2(Local121.r,Local121.g),  Local123 );
	float4 Local125 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleLevel(Material_Texture2D_8,Material_Texture2D_8Sampler,Local124,-1.00000000));
	FLWCVector3 Local126 = LWCMultiply(Local125.rgb, GetInstanceToWorld(Parameters));
	float4 Local127 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleLevel(Material_Texture2D_9,Material_Texture2D_9Sampler,Local124,-1.00000000));
	float3 Local128 = (((float3)-0.50000000) + Local127.rgb);
	float3 Local129 = (Local128 * ((float3)2.00000000));
	float3 Local130 = LWCMultiplyVector(Local129, GetInstanceToWorld(Parameters));
	float3 Local131 = normalize(Local130);
	float Local132 = (Local127.a * 2048.00000000);
	float Local133 = max(Local132,8.00000000);
	float3 Local134 = (Local131 * ((float3)Local133));
	FLWCVector3 Local135 = LWCAdd(Local126, Local134);
	FLWCScalar Local136 = LWCDot(LWCPromote(  Local82 ), Local135);
	FLWCScalar Local137 = LWCDot(LWCPromote(float3(0.00000000,1.00000000,0.00000000).rgb), Local135);
	FLWCVector2 Local138 = LWCDivide(MakeLWCVector(LWCPromote(Local136),LWCPromote(Local137)), ((float2)20.00000000));
	FLWCVector2 Local139 = LWCAdd(Local76, Local138);
	float2 Local140 = LWCFrac(Local139);
	float4 Local141 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleLevel(Material_Texture2D_10,Material_Texture2D_10Sampler,Local140,-1.00000000));
	float Local142 = (Local74 * Local141.a);
	float Local143 = (0.00000000 + Local142);
	float Local144 = dot(  Local82 ,Local131);
	float Local145 = (Local144 + float2(-1.25000000,-0.44400001).r);
	float Local146 = (Local145 * float2(-1.25000000,-0.44400001).g);
	float Local147 = (Local143 * Local146);
	FLWCVector3 Local148 = GetWorldPosition(Parameters);
	FLWCVector3 Local149 = MakeLWCVector( LWCGetComponent(   Local148  , 0),  LWCGetComponent(   Local148  , 1),  LWCGetComponent(   Local148  , 2));
	FLWCVector3 Local150 = LWCSubtract(  Local149 , Local126);
	float3 Local151 = LWCMultiplyVector(float3(1.00000000,0.00000000,0.00000000).rgb, GetInstanceToWorld(Parameters));
	float3 Local152 = (((float3)0.00000000) - Local151);
	float Local153 = length(Local152);
	float3 Local154 = LWCMultiplyVector(float3(0.00000000,1.00000000,0.00000000).rgb, GetInstanceToWorld(Parameters));
	float3 Local155 = (((float3)0.00000000) - Local154);
	float Local156 = length(Local155);
	float2 Local157 = float2(  Local153 ,  Local156 );
	float3 Local158 = LWCMultiplyVector(float3(0.00000000,0.00000000,1.00000000).rgb, GetInstanceToWorld(Parameters));
	float3 Local159 = (((float3)0.00000000) - Local158);
	float Local160 = length(Local159);
	float3 Local161 = float3(  Local157 ,  Local160 );
	float3 Local162 = (LWCToFloat(Local150) /   Local161 );
	float3 Local163 = normalize(Local131);
	float Local164 = dot(Local162,Local163);
	float Local165 = (Material.PreshaderBuffer[7].x * Local133);
	float Local166 = (Local164 / Local165);
	float Local167 = saturate(Local166);
	float Local168 = (Local147 * Local167);
	float Local169 = (Local168 * 6.28318548);
	float Local170 = (Local73 / 30.00000000);
	FLWCVector2 Local171 = LWCDivide(Local139, ((float2)4.00000000));
	float2 Local172 = LWCFrac(Local171);
	float4 Local173 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleLevel(Material_Texture2D_10,Material_Texture2D_10Sampler,Local172,-1.00000000));
	float3 Local174 = (Local173.rgb - ((float3)0.50000000));
	float3 Local175 = (((float3)Local170) * Local174);
	float Local176 = PositiveClampedPow(Local144,5.00000000);
	float3 Local177 = (((float3)Local176) * float3(0.00000000,0.00000000,-0.20000000).rgb);
	float3 Local178 = (Local177 +   Local82 );
	float3 Local179 = cross(Local131,Local178);
	float3 Local180 = (Local175 + Local179);
	float3 Local181 = (Local180 - ((float3)0.00000000));
	float Local182 = length(Local181);
	float3 Local183 = (Local180 / ((float3)Local182));
	float3 Local184 = RotateAboutAxis(float4(Local183,Local169),Local126,  Local149 );
	float Local185 = (Local73 * 0.09000000);
	float Local186 = (Local75 * 2.00000000);
	float2 Local187 = (((float2)fmod(View.GameTime,99999997952.00000000)) * float2(Local186,Local186));
	float Local188 = (Local109 - 1.00000000);
	float Local189 = (Local188 / 2.00000000);
	float Local190 = saturate(Local189);
	float Local191 = (  Local190  * 2.00000000);
	float Local192 = saturate(  Local191 );
	float2 Local193 = lerp(  Local83 ,float2(Local90.r,Local90.g),  Local192 );
	float Local194 = (  Local191  - 1.00000000);
	float Local195 = saturate(  Local194 );
	float2 Local196 = lerp(Local193,float2(Local104.r,Local104.g),  Local195 );
	float4 Local197 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleLevel(Material_Texture2D_8,Material_Texture2D_8Sampler,Local196,-1.00000000));
	FLWCVector3 Local198 = LWCMultiply(Local197.rgb, GetInstanceToWorld(Parameters));
	float4 Local199 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleLevel(Material_Texture2D_9,Material_Texture2D_9Sampler,Local196,-1.00000000));
	float3 Local200 = (((float3)-0.50000000) + Local199.rgb);
	float3 Local201 = (Local200 * ((float3)2.00000000));
	float3 Local202 = LWCMultiplyVector(Local201, GetInstanceToWorld(Parameters));
	float3 Local203 = normalize(Local202);
	float Local204 = (Local199.a * 2048.00000000);
	float Local205 = max(Local204,8.00000000);
	float3 Local206 = (Local203 * ((float3)Local205));
	FLWCVector3 Local207 = LWCAdd(Local198, Local206);
	FLWCScalar Local208 = LWCDot(LWCPromote(  Local82 ), Local207);
	FLWCScalar Local209 = LWCDot(LWCPromote(float3(0.00000000,1.00000000,0.00000000).rgb), Local207);
	FLWCVector2 Local210 = LWCDivide(MakeLWCVector(LWCPromote(Local208),LWCPromote(Local209)), ((float2)20.00000000));
	FLWCVector2 Local211 = LWCAdd(Local187, Local210);
	float2 Local212 = LWCFrac(Local211);
	float4 Local213 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleLevel(Material_Texture2D_10,Material_Texture2D_10Sampler,Local212,-1.00000000));
	float Local214 = (Local185 * Local213.a);
	float Local215 = (0.00000000 + Local214);
	float Local216 = dot(  Local82 ,Local203);
	float Local217 = (Local216 + float2(-1.25000000,-0.44400001).r);
	float Local218 = (Local217 * float2(-1.25000000,-0.44400001).g);
	float Local219 = (Local215 * Local218);
	FLWCVector3 Local220 = LWCSubtract(  Local149 , Local198);
	float3 Local221 = (LWCToFloat(Local220) /   Local161 );
	float3 Local222 = normalize(Local203);
	float Local223 = dot(Local221,Local222);
	float Local224 = (Material.PreshaderBuffer[7].x * Local205);
	float Local225 = (Local223 / Local224);
	float Local226 = saturate(Local225);
	float Local227 = (Local219 * Local226);
	float Local228 = (Local227 * 6.28318548);
	float Local229 = (Local170 * 2.00000000);
	FLWCVector2 Local230 = LWCDivide(Local211, ((float2)4.00000000));
	float2 Local231 = LWCFrac(Local230);
	float4 Local232 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleLevel(Material_Texture2D_10,Material_Texture2D_10Sampler,Local231,-1.00000000));
	float3 Local233 = (Local232.rgb - ((float3)0.50000000));
	float3 Local234 = (((float3)Local229) * Local233);
	float Local235 = PositiveClampedPow(Local216,5.00000000);
	float3 Local236 = (((float3)Local235) * float3(0.00000000,0.00000000,-0.20000000).rgb);
	float3 Local237 = (Local236 +   Local82 );
	float3 Local238 = cross(Local203,Local237);
	float3 Local239 = (Local234 + Local238);
	float3 Local240 = (Local239 - ((float3)0.00000000));
	float Local241 = length(Local240);
	float3 Local242 = (Local239 / ((float3)Local241));
	float3 Local243 = RotateAboutAxis(float4(Local242,Local228),Local198,  Local149 );
	float Local244 = saturate(Local109);
	float3 Local245 = (Local243 * ((float3)  Local244 ));
	float3 Local246 = (Local184 + Local245);
	float Local247 = (Local73 * 0.10000000);
	float Local248 = (Local75 * 3.00000000);
	float2 Local249 = (((float2)fmod(View.GameTime,99999997952.00000000)) * float2(Local248,Local248));
	float Local250 = (Local109 - 2.00000000);
	float Local251 = saturate(Local250);
	float2 Local252 = lerp(  Local83 ,float2(Local90.r,Local90.g),  Local251 );
	float4 Local253 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleLevel(Material_Texture2D_8,Material_Texture2D_8Sampler,Local252,-1.00000000));
	FLWCVector3 Local254 = LWCMultiply(Local253.rgb, GetInstanceToWorld(Parameters));
	float4 Local255 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleLevel(Material_Texture2D_9,Material_Texture2D_9Sampler,Local252,-1.00000000));
	float3 Local256 = (((float3)-0.50000000) + Local255.rgb);
	float3 Local257 = (Local256 * ((float3)2.00000000));
	float3 Local258 = LWCMultiplyVector(Local257, GetInstanceToWorld(Parameters));
	float3 Local259 = normalize(Local258);
	float Local260 = (Local255.a * 2048.00000000);
	float Local261 = max(Local260,8.00000000);
	float3 Local262 = (Local259 * ((float3)Local261));
	FLWCVector3 Local263 = LWCAdd(Local254, Local262);
	FLWCScalar Local264 = LWCDot(LWCPromote(  Local82 ), Local263);
	FLWCScalar Local265 = LWCDot(LWCPromote(float3(0.00000000,1.00000000,0.00000000).rgb), Local263);
	FLWCVector2 Local266 = LWCDivide(MakeLWCVector(LWCPromote(Local264),LWCPromote(Local265)), ((float2)20.00000000));
	FLWCVector2 Local267 = LWCAdd(Local249, Local266);
	float2 Local268 = LWCFrac(Local267);
	float4 Local269 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleLevel(Material_Texture2D_10,Material_Texture2D_10Sampler,Local268,-1.00000000));
	float Local270 = (Local247 * Local269.a);
	float Local271 = (0.00000000 + Local270);
	float Local272 = dot(  Local82 ,Local259);
	float Local273 = (Local272 + float2(-1.25000000,-0.44400001).r);
	float Local274 = (Local273 * float2(-1.25000000,-0.44400001).g);
	float Local275 = (Local271 * Local274);
	FLWCVector3 Local276 = LWCSubtract(  Local149 , Local254);
	float3 Local277 = (LWCToFloat(Local276) /   Local161 );
	float3 Local278 = normalize(Local259);
	float Local279 = dot(Local277,Local278);
	float Local280 = (Material.PreshaderBuffer[7].x * Local261);
	float Local281 = (Local279 / Local280);
	float Local282 = saturate(Local281);
	float Local283 = (Local275 * Local282);
	float Local284 = (Local283 * 6.28318548);
	float Local285 = (Local170 * 3.00000000);
	FLWCVector2 Local286 = LWCDivide(Local267, ((float2)4.00000000));
	float2 Local287 = LWCFrac(Local286);
	float4 Local288 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleLevel(Material_Texture2D_10,Material_Texture2D_10Sampler,Local287,-1.00000000));
	float3 Local289 = (Local288.rgb - ((float3)0.50000000));
	float3 Local290 = (((float3)Local285) * Local289);
	float Local291 = PositiveClampedPow(Local272,5.00000000);
	float3 Local292 = (((float3)Local291) * float3(0.00000000,0.00000000,-0.20000000).rgb);
	float3 Local293 = (Local292 +   Local82 );
	float3 Local294 = cross(Local259,Local293);
	float3 Local295 = (Local290 + Local294);
	float3 Local296 = (Local295 - ((float3)0.00000000));
	float Local297 = length(Local296);
	float3 Local298 = (Local295 / ((float3)Local297));
	float3 Local299 = RotateAboutAxis(float4(Local298,Local284),Local254,  Local149 );
	float Local300 = saturate(Local188);
	float3 Local301 = (Local299 * ((float3)  Local300 ));
	float3 Local302 = (Local246 + Local301);
	FLWCVector3 Local303 = TransformLocalPositionToWorld(Parameters, float3(0.00000000,0.00000000,0.00000000).rgb);
	FLWCVector3 Local304 = LWCSubtract(Local303,   Local149 );
	float3 Local305 = LWCToFloat(  Local304 );
	float Local306 = length(  Local305 );
	float Local307 = (  Local160  * Material.PreshaderBuffer[7].y);
	float Local308 = max(0.00001000,  Local307 );
	float Local309 = (1.00000000 /   Local308 );
	float Local310 = (  Local306  *   Local309 );
	float Local311 = (1.00000000 -   Local310 );
	float Local312 = saturate(  Local311 );
	float Local313 = (1.00000000 -   Local312 );
	float4 Local314 = MaterialCollection1.Vectors[5];
	FLWCVector3 Local315 = LWCSubtract(Local314.rgba.rgb, Local198);
	FLWCScalar Local316 = LWCLength(Local315);
	float4 Local317 = MaterialCollection1.Vectors[1];
	float Local318 = (Material.PreshaderBuffer[7].z * Local317.b);
	float Local319 = max(0.00001000,Local318);
	float Local320 = (1.00000000 / Local319);
	FLWCScalar Local321 = LWCMultiply(Local316, Local320);
	FLWCScalar Local322 = LWCSubtract(1.00000000, Local321);
	FLWCScalar Local323 = LWCMultiply(Local322, 1.33333337);
	float Local324 = LWCSaturate(Local323);
	float4 Local325 = MaterialCollection1.Vectors[3];
	float Local326 = (Material.PreshaderBuffer[7].w * Local325.r);
	float Local327 = (Local324 * Local326);
	float Local328 = (Local327 * 6.28318548);
	float3 Local329 = LWCNormalize(Local315);
	float3 Local330 = cross(Local329,Local203);
	float3 Local331 = normalize(Local330);
	float3 Local332 = RotateAboutAxis(float4(Local331,Local328),Local198,  Local149 );
	float3 Local333 = (Local332 * ((float3)  Local244 ));
	float3 Local334 = (((float3)0.00000000) + Local333);
	FLWCVector3 Local335 = LWCSubtract(Local314.rgba.rgb, Local254);
	FLWCScalar Local336 = LWCLength(Local335);
	float Local337 = (Local317.b * Material.PreshaderBuffer[8].x);
	float Local338 = max(0.00001000,Local337);
	float Local339 = (1.00000000 / Local338);
	FLWCScalar Local340 = LWCMultiply(Local336, Local339);
	FLWCScalar Local341 = LWCSubtract(1.00000000, Local340);
	float Local342 = LWCSaturate(Local341);
	float Local343 = (Material.PreshaderBuffer[8].y * Local325.r);
	float Local344 = (Local342 * Local343);
	float Local345 = (Local344 * 6.28318548);
	float3 Local346 = LWCNormalize(Local335);
	float3 Local347 = cross(Local346,Local259);
	float3 Local348 = normalize(Local347);
	float3 Local349 = RotateAboutAxis(float4(Local348,Local345),Local254,  Local149 );
	float3 Local350 = (Local349 * ((float3)  Local300 ));
	float3 Local351 = (Local334 + Local350);
	float Local352 = (View.GameTime * Material.PreshaderBuffer[8].z);
	float Local353 = (Local352 * 2.09439516);
	float Local354 = sin(Local353);
	float Local355 = (  Local354  * Material.PreshaderBuffer[8].w);
	float3 Local356 = (((float3)  Local355 ) * Local351);
	float4 Local357 = MaterialCollection1.Vectors[6];
	FLWCVector3 Local358 = LWCSubtract(  Local149 , Local357.rgba.rgb);
	FLWCScalar Local359 = LWCLength(  Local358 );
	float Local360 = (Local317.b * Material.PreshaderBuffer[9].x);
	float Local361 = max(0.00001000,Local360);
	float Local362 = (1.00000000 / Local361);
	FLWCScalar Local363 = LWCMultiply(  Local359 , Local362);
	FLWCScalar Local364 = LWCSubtract(1.00000000,   Local363 );
	FLWCScalar Local365 = LWCMultiply(  Local364 , 1.00502515);
	float Local366 = LWCSaturate(  Local365 );
	float4 Local367 = MaterialCollection1.Vectors[0];
	float Local368 = (  Local366  * Local367.r);
	float3 Local369 = lerp(Local351,Local356,  Local368 );
	FLWCVector3 Local370 = LWCSubtract(Local357.rgba.rgb, Local198);
	float3 Local371 = LWCNormalize(Local370);
	float3 Local372 = cross(Local371,Local203);
	float3 Local373 = normalize(Local372);
	float3 Local374 = RotateAboutAxis(float4(Local373,Material.PreshaderBuffer[9].y),Local198,  Local149 );
	float3 Local375 = (Local374 * ((float3)  Local244 ));
	float Local376 = (View.GameTime * Material.PreshaderBuffer[9].z);
	float Local377 = (Local376 * 2.09439516);
	float Local378 = sin(Local377);
	float Local379 = (  Local378  * Material.PreshaderBuffer[9].w);
	float3 Local380 = (Local375 * ((float3)  Local379 ));
	float3 Local381 = (((float3)0.00000000) + Local380);
	FLWCVector3 Local382 = LWCSubtract(Local357.rgba.rgb, Local254);
	float3 Local383 = LWCNormalize(Local382);
	float3 Local384 = cross(Local383,Local259);
	float3 Local385 = normalize(Local384);
	float3 Local386 = RotateAboutAxis(float4(Local385,Material.PreshaderBuffer[9].y),Local254,  Local149 );
	float3 Local387 = (Local386 * ((float3)  Local300 ));
	float Local388 = (View.GameTime * Material.PreshaderBuffer[10].x);
	float Local389 = (Local388 * 2.09439516);
	float Local390 = sin(Local389);
	float Local391 = (  Local390  * Material.PreshaderBuffer[10].y);
	float3 Local392 = (Local387 * ((float3)  Local391 ));
	float3 Local393 = (Local381 + Local392);
	float3 Local394 = (((float3)  Local368 ) * Local393);
	float3 Local395 = (Local369 + Local394);
	float3 Local396 = (((float3)  Local313 ) * Local395);
	float4 Local397 = MaterialCollection1.Vectors[7];
	FLWCVector3 Local398 = LWCSubtract(Local397.rgba.rgb, Local198);
	FLWCScalar Local399 = LWCLength(Local398);
	float Local400 = (Material.PreshaderBuffer[7].z * Local317.a);
	float Local401 = max(0.00001000,Local400);
	float Local402 = (1.00000000 / Local401);
	FLWCScalar Local403 = LWCMultiply(Local399, Local402);
	FLWCScalar Local404 = LWCSubtract(1.00000000, Local403);
	FLWCScalar Local405 = LWCMultiply(Local404, 1.33333337);
	float Local406 = LWCSaturate(Local405);
	float Local407 = (Material.PreshaderBuffer[7].w * Local325.g);
	float Local408 = (Local406 * Local407);
	float Local409 = (Local408 * 6.28318548);
	float3 Local410 = LWCNormalize(Local398);
	float3 Local411 = cross(Local410,Local203);
	float3 Local412 = normalize(Local411);
	float3 Local413 = RotateAboutAxis(float4(Local412,Local409),Local198,  Local149 );
	float3 Local414 = (Local413 * ((float3)  Local244 ));
	float3 Local415 = (((float3)0.00000000) + Local414);
	FLWCVector3 Local416 = LWCSubtract(Local397.rgba.rgb, Local254);
	FLWCScalar Local417 = LWCLength(Local416);
	float Local418 = (Local317.a * Material.PreshaderBuffer[8].x);
	float Local419 = max(0.00001000,Local418);
	float Local420 = (1.00000000 / Local419);
	FLWCScalar Local421 = LWCMultiply(Local417, Local420);
	FLWCScalar Local422 = LWCSubtract(1.00000000, Local421);
	float Local423 = LWCSaturate(Local422);
	float Local424 = (Material.PreshaderBuffer[8].y * Local325.g);
	float Local425 = (Local423 * Local424);
	float Local426 = (Local425 * 6.28318548);
	float3 Local427 = LWCNormalize(Local416);
	float3 Local428 = cross(Local427,Local259);
	float3 Local429 = normalize(Local428);
	float3 Local430 = RotateAboutAxis(float4(Local429,Local426),Local254,  Local149 );
	float3 Local431 = (Local430 * ((float3)  Local300 ));
	float3 Local432 = (Local415 + Local431);
	float3 Local433 = (((float3)  Local355 ) * Local432);
	float4 Local434 = MaterialCollection1.Vectors[8];
	FLWCVector3 Local435 = LWCSubtract(  Local149 , Local434.rgba.rgb);
	FLWCScalar Local436 = LWCLength(  Local435 );
	float Local437 = (Local317.a * Material.PreshaderBuffer[9].x);
	float Local438 = max(0.00001000,Local437);
	float Local439 = (1.00000000 / Local438);
	FLWCScalar Local440 = LWCMultiply(  Local436 , Local439);
	FLWCScalar Local441 = LWCSubtract(1.00000000,   Local440 );
	FLWCScalar Local442 = LWCMultiply(  Local441 , 1.00502515);
	float Local443 = LWCSaturate(  Local442 );
	float Local444 = (  Local443  * Local367.g);
	float3 Local445 = lerp(Local432,Local433,  Local444 );
	FLWCVector3 Local446 = LWCSubtract(Local434.rgba.rgb, Local198);
	float3 Local447 = LWCNormalize(Local446);
	float3 Local448 = cross(Local447,Local203);
	float3 Local449 = normalize(Local448);
	float3 Local450 = RotateAboutAxis(float4(Local449,Material.PreshaderBuffer[9].y),Local198,  Local149 );
	float3 Local451 = (Local450 * ((float3)  Local244 ));
	float3 Local452 = (Local451 * ((float3)  Local379 ));
	float3 Local453 = (((float3)0.00000000) + Local452);
	FLWCVector3 Local454 = LWCSubtract(Local434.rgba.rgb, Local254);
	float3 Local455 = LWCNormalize(Local454);
	float3 Local456 = cross(Local455,Local259);
	float3 Local457 = normalize(Local456);
	float3 Local458 = RotateAboutAxis(float4(Local457,Material.PreshaderBuffer[9].y),Local254,  Local149 );
	float3 Local459 = (Local458 * ((float3)  Local300 ));
	float3 Local460 = (Local459 * ((float3)  Local391 ));
	float3 Local461 = (Local453 + Local460);
	float3 Local462 = (((float3)  Local444 ) * Local461);
	float3 Local463 = (Local445 + Local462);
	float3 Local464 = (((float3)  Local313 ) * Local463);
	float4 Local465 = MaterialCollection1.Vectors[9];
	FLWCVector3 Local466 = LWCSubtract(Local465.rgba.rgb, Local198);
	FLWCScalar Local467 = LWCLength(Local466);
	float4 Local468 = MaterialCollection1.Vectors[2];
	float Local469 = (Material.PreshaderBuffer[7].z * Local468.r);
	float Local470 = max(0.00001000,Local469);
	float Local471 = (1.00000000 / Local470);
	FLWCScalar Local472 = LWCMultiply(Local467, Local471);
	FLWCScalar Local473 = LWCSubtract(1.00000000, Local472);
	FLWCScalar Local474 = LWCMultiply(Local473, 1.33333337);
	float Local475 = LWCSaturate(Local474);
	float Local476 = (Material.PreshaderBuffer[7].w * Local325.b);
	float Local477 = (Local475 * Local476);
	float Local478 = (Local477 * 6.28318548);
	float3 Local479 = LWCNormalize(Local466);
	float3 Local480 = cross(Local479,Local203);
	float3 Local481 = normalize(Local480);
	float3 Local482 = RotateAboutAxis(float4(Local481,Local478),Local198,  Local149 );
	float3 Local483 = (Local482 * ((float3)  Local244 ));
	float3 Local484 = (((float3)0.00000000) + Local483);
	FLWCVector3 Local485 = LWCSubtract(Local465.rgba.rgb, Local254);
	FLWCScalar Local486 = LWCLength(Local485);
	float Local487 = (Local468.r * Material.PreshaderBuffer[8].x);
	float Local488 = max(0.00001000,Local487);
	float Local489 = (1.00000000 / Local488);
	FLWCScalar Local490 = LWCMultiply(Local486, Local489);
	FLWCScalar Local491 = LWCSubtract(1.00000000, Local490);
	float Local492 = LWCSaturate(Local491);
	float Local493 = (Material.PreshaderBuffer[8].y * Local325.b);
	float Local494 = (Local492 * Local493);
	float Local495 = (Local494 * 6.28318548);
	float3 Local496 = LWCNormalize(Local485);
	float3 Local497 = cross(Local496,Local259);
	float3 Local498 = normalize(Local497);
	float3 Local499 = RotateAboutAxis(float4(Local498,Local495),Local254,  Local149 );
	float3 Local500 = (Local499 * ((float3)  Local300 ));
	float3 Local501 = (Local484 + Local500);
	float3 Local502 = (((float3)  Local355 ) * Local501);
	float4 Local503 = MaterialCollection1.Vectors[10];
	FLWCVector3 Local504 = LWCSubtract(  Local149 , Local503.rgba.rgb);
	FLWCScalar Local505 = LWCLength(  Local504 );
	float Local506 = (Local468.r * Material.PreshaderBuffer[9].x);
	float Local507 = max(0.00001000,Local506);
	float Local508 = (1.00000000 / Local507);
	FLWCScalar Local509 = LWCMultiply(  Local505 , Local508);
	FLWCScalar Local510 = LWCSubtract(1.00000000,   Local509 );
	FLWCScalar Local511 = LWCMultiply(  Local510 , 1.00502515);
	float Local512 = LWCSaturate(  Local511 );
	float Local513 = (  Local512  * Local367.b);
	float3 Local514 = lerp(Local501,Local502,  Local513 );
	FLWCVector3 Local515 = LWCSubtract(Local503.rgba.rgb, Local198);
	float3 Local516 = LWCNormalize(Local515);
	float3 Local517 = cross(Local516,Local203);
	float3 Local518 = normalize(Local517);
	float3 Local519 = RotateAboutAxis(float4(Local518,Material.PreshaderBuffer[9].y),Local198,  Local149 );
	float3 Local520 = (Local519 * ((float3)  Local244 ));
	float3 Local521 = (Local520 * ((float3)  Local379 ));
	float3 Local522 = (((float3)0.00000000) + Local521);
	FLWCVector3 Local523 = LWCSubtract(Local503.rgba.rgb, Local254);
	float3 Local524 = LWCNormalize(Local523);
	float3 Local525 = cross(Local524,Local259);
	float3 Local526 = normalize(Local525);
	float3 Local527 = RotateAboutAxis(float4(Local526,Material.PreshaderBuffer[9].y),Local254,  Local149 );
	float3 Local528 = (Local527 * ((float3)  Local300 ));
	float3 Local529 = (Local528 * ((float3)  Local391 ));
	float3 Local530 = (Local522 + Local529);
	float3 Local531 = (((float3)  Local513 ) * Local530);
	float3 Local532 = (Local514 + Local531);
	float3 Local533 = (((float3)  Local313 ) * Local532);
	float3 Local534 = (Local533 + ((float3)0.00000000));
	float3 Local535 = (Local464 + Local534);
	float3 Local536 = (Local396 + Local535);
	float3 Local537 = (Local302 + Local536);
	return Local537;;
}
float3 GetMaterialWorldPositionOffset(FMaterialVertexParameters Parameters)
{
	[branch]
	if (ShouldEnableWorldPositionOffset(Parameters))
	{
		return ClampWorldPositionOffset(Parameters, GetMaterialWorldPositionOffsetRaw(Parameters));
	}
	return float3(0, 0, 0);
}
void GetMaterialCustomizedUVs(FMaterialVertexParameters Parameters, inout float2 OutTexCoords[1])
{
	float4 Local71 = MaterialCollection0.Vectors[0];
	float Local72 = max(Local71.g,0.00000000);
	float Local73 = min(Local72,4.00000000);
	float Local74 = (Local73 * 0.02000000);
	float Local75 = (Local73 / 45.00000000);
	float2 Local76 = (((float2)fmod(View.GameTime,99999997952.00000000)) * float2(Local75,Local75));
	float Local77 = (Local71.r / 360.00000000);
	float Local78 = (Local77 * 6.28318548);
	float Local79 = cos(Local78);
	float Local80 = sin(Local78);
	float2 Local81 = float2(  Local79 ,  Local80 );
	float3 Local82 = float3(  Local81 ,0.00000000);
	float2 Local83 = Parameters.TexCoords[1].xy;
	float4 Local84 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleLevel(Material_Texture2D_7,Material_Texture2D_7Sampler,  Local83 ,-1.00000000));
	float Local85 = CustomExpression0(Parameters,Local84.a);
	float Local86 = fmod(Local85,Material.PreshaderBuffer[5].y);
	float Local87 = (Local85 * Material.PreshaderBuffer[5].z);
	float Local88 = floor(Local87);
	float2 Local89 = (float2(Local86,Local88) + ((float2)0.50000000));
	float2 Local90 = (Local89 * Material.PreshaderBuffer[6].xy);
	float4 Local91 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleLevel(Material_Texture2D_7,Material_Texture2D_7Sampler,float2(Local90.r,Local90.g),-1.00000000));
	float Local92 = CustomExpression1(Parameters,Local91.a);
	float Local93 =  select_internal( (abs(Local92 - Local85) > 0.00001000) ,  select_internal( (Local92 >= Local85) , 1.00000000 , 1.00000000 ) , 0.00000000 );
	float2 Local94 = (  Local83  * Material.PreshaderBuffer[6].zw);
	float2 Local95 = floor(  Local94 );
	float Local96 = (Local95.g * Material.PreshaderBuffer[5].y);
	float Local97 = (Local95.r + Local96);
	float Local98 =  select_internal( (abs(Local85 - Local97) > 0.00001000) ,  select_internal( (Local85 >= Local97) , 1.00000000 , 1.00000000 ) , 0.00000000 );
	float Local99 = (Local93.r + Local98.r);
	float Local100 = fmod(Local92,Material.PreshaderBuffer[5].y);
	float Local101 = (Local92 * Material.PreshaderBuffer[5].z);
	float Local102 = floor(Local101);
	float2 Local103 = (float2(Local100,Local102) + ((float2)0.50000000));
	float2 Local104 = (Local103 * Material.PreshaderBuffer[6].xy);
	float4 Local105 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleLevel(Material_Texture2D_7,Material_Texture2D_7Sampler,float2(Local104.r,Local104.g),-1.00000000));
	float Local106 = CustomExpression2(Parameters,Local105.a);
	float Local107 =  select_internal( (abs(Local106 - Local92) > 0.00001000) ,  select_internal( (Local106 >= Local92) , 1.00000000 , 1.00000000 ) , 0.00000000 );
	float Local108 = (Local99 + Local107.r);
	float Local109 = ceil(Local108);
	float Local110 = (Local109 / 3.00000000);
	float Local111 = (Local110 * 3.00000000);
	float Local112 = saturate(Local111);
	float2 Local113 = lerp(  Local83 ,float2(Local90.r,Local90.g),  Local112 );
	float Local114 = (Local111 - 1.00000000);
	float Local115 = saturate(Local114);
	float2 Local116 = lerp(Local113,float2(Local104.r,Local104.g),  Local115 );
	float Local117 = fmod(Local106,Material.PreshaderBuffer[5].y);
	float Local118 = (Local106 * Material.PreshaderBuffer[5].z);
	float Local119 = floor(Local118);
	float2 Local120 = (float2(Local117,Local119) + ((float2)0.50000000));
	float2 Local121 = (Local120 * Material.PreshaderBuffer[6].xy);
	float Local122 = (Local114 - 1.00000000);
	float Local123 = saturate(Local122);
	float2 Local124 = lerp(Local116,float2(Local121.r,Local121.g),  Local123 );
	float4 Local125 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleLevel(Material_Texture2D_8,Material_Texture2D_8Sampler,Local124,-1.00000000));
	FLWCVector3 Local126 = LWCMultiply(Local125.rgb, GetInstanceToWorld(Parameters));
	float4 Local127 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleLevel(Material_Texture2D_9,Material_Texture2D_9Sampler,Local124,-1.00000000));
	float3 Local128 = (((float3)-0.50000000) + Local127.rgb);
	float3 Local129 = (Local128 * ((float3)2.00000000));
	float3 Local130 = LWCMultiplyVector(Local129, GetInstanceToWorld(Parameters));
	float3 Local131 = normalize(Local130);
	float Local132 = (Local127.a * 2048.00000000);
	float Local133 = max(Local132,8.00000000);
	float3 Local134 = (Local131 * ((float3)Local133));
	FLWCVector3 Local135 = LWCAdd(Local126, Local134);
	FLWCScalar Local136 = LWCDot(LWCPromote(  Local82 ), Local135);
	FLWCScalar Local137 = LWCDot(LWCPromote(float3(0.00000000,1.00000000,0.00000000).rgb), Local135);
	FLWCVector2 Local138 = LWCDivide(MakeLWCVector(LWCPromote(Local136),LWCPromote(Local137)), ((float2)20.00000000));
	FLWCVector2 Local139 = LWCAdd(Local76, Local138);
	float2 Local140 = LWCFrac(Local139);
	float4 Local141 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleLevel(Material_Texture2D_10,Material_Texture2D_10Sampler,Local140,-1.00000000));
	float Local142 = (Local74 * Local141.a);
	float Local143 = (0.00000000 + Local142);
	float Local144 = dot(  Local82 ,Local131);
	float Local145 = (Local144 + float2(-1.25000000,-0.44400001).r);
	float Local146 = (Local145 * float2(-1.25000000,-0.44400001).g);
	float Local147 = (Local143 * Local146);
	FLWCVector3 Local148 = GetWorldPosition(Parameters);
	FLWCVector3 Local149 = MakeLWCVector( LWCGetComponent(   Local148  , 0),  LWCGetComponent(   Local148  , 1),  LWCGetComponent(   Local148  , 2));
	FLWCVector3 Local150 = LWCSubtract(  Local149 , Local126);
	float3 Local151 = LWCMultiplyVector(float3(1.00000000,0.00000000,0.00000000).rgb, GetInstanceToWorld(Parameters));
	float3 Local152 = (((float3)0.00000000) - Local151);
	float Local153 = length(Local152);
	float3 Local154 = LWCMultiplyVector(float3(0.00000000,1.00000000,0.00000000).rgb, GetInstanceToWorld(Parameters));
	float3 Local155 = (((float3)0.00000000) - Local154);
	float Local156 = length(Local155);
	float2 Local157 = float2(  Local153 ,  Local156 );
	float3 Local158 = LWCMultiplyVector(float3(0.00000000,0.00000000,1.00000000).rgb, GetInstanceToWorld(Parameters));
	float3 Local159 = (((float3)0.00000000) - Local158);
	float Local160 = length(Local159);
	float3 Local161 = float3(  Local157 ,  Local160 );
	float3 Local162 = (LWCToFloat(Local150) /   Local161 );
	float3 Local163 = normalize(Local131);
	float Local164 = dot(Local162,Local163);
	float Local165 = (Material.PreshaderBuffer[7].x * Local133);
	float Local166 = (Local164 / Local165);
	float Local167 = saturate(Local166);
	float Local168 = (Local147 * Local167);
	float Local169 = (Local168 * 6.28318548);
	float Local170 = (Local73 / 30.00000000);
	FLWCVector2 Local171 = LWCDivide(Local139, ((float2)4.00000000));
	float2 Local172 = LWCFrac(Local171);
	float4 Local173 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleLevel(Material_Texture2D_10,Material_Texture2D_10Sampler,Local172,-1.00000000));
	float3 Local174 = (Local173.rgb - ((float3)0.50000000));
	float3 Local175 = (((float3)Local170) * Local174);
	float Local176 = PositiveClampedPow(Local144,5.00000000);
	float3 Local177 = (((float3)Local176) * float3(0.00000000,0.00000000,-0.20000000).rgb);
	float3 Local178 = (Local177 +   Local82 );
	float3 Local179 = cross(Local131,Local178);
	float3 Local180 = (Local175 + Local179);
	float3 Local181 = (Local180 - ((float3)0.00000000));
	float Local182 = length(Local181);
	float3 Local183 = (Local180 / ((float3)Local182));
	float3 Local184 = RotateAboutAxis(float4(Local183,Local169),Local126,  Local149 );
	float Local185 = (Local73 * 0.09000000);
	float Local186 = (Local75 * 2.00000000);
	float2 Local187 = (((float2)fmod(View.GameTime,99999997952.00000000)) * float2(Local186,Local186));
	float Local188 = (Local109 - 1.00000000);
	float Local189 = (Local188 / 2.00000000);
	float Local190 = saturate(Local189);
	float Local191 = (  Local190  * 2.00000000);
	float Local192 = saturate(  Local191 );
	float2 Local193 = lerp(  Local83 ,float2(Local90.r,Local90.g),  Local192 );
	float Local194 = (  Local191  - 1.00000000);
	float Local195 = saturate(  Local194 );
	float2 Local196 = lerp(Local193,float2(Local104.r,Local104.g),  Local195 );
	float4 Local197 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleLevel(Material_Texture2D_8,Material_Texture2D_8Sampler,Local196,-1.00000000));
	FLWCVector3 Local198 = LWCMultiply(Local197.rgb, GetInstanceToWorld(Parameters));
	float4 Local199 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleLevel(Material_Texture2D_9,Material_Texture2D_9Sampler,Local196,-1.00000000));
	float3 Local200 = (((float3)-0.50000000) + Local199.rgb);
	float3 Local201 = (Local200 * ((float3)2.00000000));
	float3 Local202 = LWCMultiplyVector(Local201, GetInstanceToWorld(Parameters));
	float3 Local203 = normalize(Local202);
	float Local204 = (Local199.a * 2048.00000000);
	float Local205 = max(Local204,8.00000000);
	float3 Local206 = (Local203 * ((float3)Local205));
	FLWCVector3 Local207 = LWCAdd(Local198, Local206);
	FLWCScalar Local208 = LWCDot(LWCPromote(  Local82 ), Local207);
	FLWCScalar Local209 = LWCDot(LWCPromote(float3(0.00000000,1.00000000,0.00000000).rgb), Local207);
	FLWCVector2 Local210 = LWCDivide(MakeLWCVector(LWCPromote(Local208),LWCPromote(Local209)), ((float2)20.00000000));
	FLWCVector2 Local211 = LWCAdd(Local187, Local210);
	float2 Local212 = LWCFrac(Local211);
	float4 Local213 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleLevel(Material_Texture2D_10,Material_Texture2D_10Sampler,Local212,-1.00000000));
	float Local214 = (Local185 * Local213.a);
	float Local215 = (0.00000000 + Local214);
	float Local216 = dot(  Local82 ,Local203);
	float Local217 = (Local216 + float2(-1.25000000,-0.44400001).r);
	float Local218 = (Local217 * float2(-1.25000000,-0.44400001).g);
	float Local219 = (Local215 * Local218);
	FLWCVector3 Local220 = LWCSubtract(  Local149 , Local198);
	float3 Local221 = (LWCToFloat(Local220) /   Local161 );
	float3 Local222 = normalize(Local203);
	float Local223 = dot(Local221,Local222);
	float Local224 = (Material.PreshaderBuffer[7].x * Local205);
	float Local225 = (Local223 / Local224);
	float Local226 = saturate(Local225);
	float Local227 = (Local219 * Local226);
	float Local228 = (Local227 * 6.28318548);
	float Local229 = (Local170 * 2.00000000);
	FLWCVector2 Local230 = LWCDivide(Local211, ((float2)4.00000000));
	float2 Local231 = LWCFrac(Local230);
	float4 Local232 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleLevel(Material_Texture2D_10,Material_Texture2D_10Sampler,Local231,-1.00000000));
	float3 Local233 = (Local232.rgb - ((float3)0.50000000));
	float3 Local234 = (((float3)Local229) * Local233);
	float Local235 = PositiveClampedPow(Local216,5.00000000);
	float3 Local236 = (((float3)Local235) * float3(0.00000000,0.00000000,-0.20000000).rgb);
	float3 Local237 = (Local236 +   Local82 );
	float3 Local238 = cross(Local203,Local237);
	float3 Local239 = (Local234 + Local238);
	float3 Local240 = (Local239 - ((float3)0.00000000));
	float Local241 = length(Local240);
	float3 Local242 = (Local239 / ((float3)Local241));
	float3 Local243 = RotateAboutAxis(float4(Local242,Local228),Local198,  Local149 );
	float Local244 = saturate(Local109);
	float3 Local245 = (Local243 * ((float3)  Local244 ));
	float3 Local246 = (Local184 + Local245);
	float Local247 = (Local73 * 0.10000000);
	float Local248 = (Local75 * 3.00000000);
	float2 Local249 = (((float2)fmod(View.GameTime,99999997952.00000000)) * float2(Local248,Local248));
	float Local250 = (Local109 - 2.00000000);
	float Local251 = saturate(Local250);
	float2 Local252 = lerp(  Local83 ,float2(Local90.r,Local90.g),  Local251 );
	float4 Local253 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleLevel(Material_Texture2D_8,Material_Texture2D_8Sampler,Local252,-1.00000000));
	FLWCVector3 Local254 = LWCMultiply(Local253.rgb, GetInstanceToWorld(Parameters));
	float4 Local255 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleLevel(Material_Texture2D_9,Material_Texture2D_9Sampler,Local252,-1.00000000));
	float3 Local256 = (((float3)-0.50000000) + Local255.rgb);
	float3 Local257 = (Local256 * ((float3)2.00000000));
	float3 Local258 = LWCMultiplyVector(Local257, GetInstanceToWorld(Parameters));
	float3 Local259 = normalize(Local258);
	float Local260 = (Local255.a * 2048.00000000);
	float Local261 = max(Local260,8.00000000);
	float3 Local262 = (Local259 * ((float3)Local261));
	FLWCVector3 Local263 = LWCAdd(Local254, Local262);
	FLWCScalar Local264 = LWCDot(LWCPromote(  Local82 ), Local263);
	FLWCScalar Local265 = LWCDot(LWCPromote(float3(0.00000000,1.00000000,0.00000000).rgb), Local263);
	FLWCVector2 Local266 = LWCDivide(MakeLWCVector(LWCPromote(Local264),LWCPromote(Local265)), ((float2)20.00000000));
	FLWCVector2 Local267 = LWCAdd(Local249, Local266);
	float2 Local268 = LWCFrac(Local267);
	float4 Local269 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleLevel(Material_Texture2D_10,Material_Texture2D_10Sampler,Local268,-1.00000000));
	float Local270 = (Local247 * Local269.a);
	float Local271 = (0.00000000 + Local270);
	float Local272 = dot(  Local82 ,Local259);
	float Local273 = (Local272 + float2(-1.25000000,-0.44400001).r);
	float Local274 = (Local273 * float2(-1.25000000,-0.44400001).g);
	float Local275 = (Local271 * Local274);
	FLWCVector3 Local276 = LWCSubtract(  Local149 , Local254);
	float3 Local277 = (LWCToFloat(Local276) /   Local161 );
	float3 Local278 = normalize(Local259);
	float Local279 = dot(Local277,Local278);
	float Local280 = (Material.PreshaderBuffer[7].x * Local261);
	float Local281 = (Local279 / Local280);
	float Local282 = saturate(Local281);
	float Local283 = (Local275 * Local282);
	float Local284 = (Local283 * 6.28318548);
	float Local285 = (Local170 * 3.00000000);
	FLWCVector2 Local286 = LWCDivide(Local267, ((float2)4.00000000));
	float2 Local287 = LWCFrac(Local286);
	float4 Local288 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleLevel(Material_Texture2D_10,Material_Texture2D_10Sampler,Local287,-1.00000000));
	float3 Local289 = (Local288.rgb - ((float3)0.50000000));
	float3 Local290 = (((float3)Local285) * Local289);
	float Local291 = PositiveClampedPow(Local272,5.00000000);
	float3 Local292 = (((float3)Local291) * float3(0.00000000,0.00000000,-0.20000000).rgb);
	float3 Local293 = (Local292 +   Local82 );
	float3 Local294 = cross(Local259,Local293);
	float3 Local295 = (Local290 + Local294);
	float3 Local296 = (Local295 - ((float3)0.00000000));
	float Local297 = length(Local296);
	float3 Local298 = (Local295 / ((float3)Local297));
	float3 Local299 = RotateAboutAxis(float4(Local298,Local284),Local254,  Local149 );
	float Local300 = saturate(Local188);
	float3 Local301 = (Local299 * ((float3)  Local300 ));
	float3 Local302 = (Local246 + Local301);
	FLWCVector3 Local303 = TransformLocalPositionToWorld(Parameters, float3(0.00000000,0.00000000,0.00000000).rgb);
	FLWCVector3 Local304 = LWCSubtract(Local303,   Local149 );
	float3 Local305 = LWCToFloat(  Local304 );
	float Local306 = length(  Local305 );
	float Local307 = (  Local160  * Material.PreshaderBuffer[7].y);
	float Local308 = max(0.00001000,  Local307 );
	float Local309 = (1.00000000 /   Local308 );
	float Local310 = (  Local306  *   Local309 );
	float Local311 = (1.00000000 -   Local310 );
	float Local312 = saturate(  Local311 );
	float Local313 = (1.00000000 -   Local312 );
	float4 Local314 = MaterialCollection1.Vectors[5];
	FLWCVector3 Local315 = LWCSubtract(Local314.rgba.rgb, Local198);
	FLWCScalar Local316 = LWCLength(Local315);
	float4 Local317 = MaterialCollection1.Vectors[1];
	float Local318 = (Material.PreshaderBuffer[7].z * Local317.b);
	float Local319 = max(0.00001000,Local318);
	float Local320 = (1.00000000 / Local319);
	FLWCScalar Local321 = LWCMultiply(Local316, Local320);
	FLWCScalar Local322 = LWCSubtract(1.00000000, Local321);
	FLWCScalar Local323 = LWCMultiply(Local322, 1.33333337);
	float Local324 = LWCSaturate(Local323);
	float4 Local325 = MaterialCollection1.Vectors[3];
	float Local326 = (Material.PreshaderBuffer[7].w * Local325.r);
	float Local327 = (Local324 * Local326);
	float Local328 = (Local327 * 6.28318548);
	float3 Local329 = LWCNormalize(Local315);
	float3 Local330 = cross(Local329,Local203);
	float3 Local331 = normalize(Local330);
	float3 Local332 = RotateAboutAxis(float4(Local331,Local328),Local198,  Local149 );
	float3 Local333 = (Local332 * ((float3)  Local244 ));
	float3 Local334 = (((float3)0.00000000) + Local333);
	FLWCVector3 Local335 = LWCSubtract(Local314.rgba.rgb, Local254);
	FLWCScalar Local336 = LWCLength(Local335);
	float Local337 = (Local317.b * Material.PreshaderBuffer[8].x);
	float Local338 = max(0.00001000,Local337);
	float Local339 = (1.00000000 / Local338);
	FLWCScalar Local340 = LWCMultiply(Local336, Local339);
	FLWCScalar Local341 = LWCSubtract(1.00000000, Local340);
	float Local342 = LWCSaturate(Local341);
	float Local343 = (Material.PreshaderBuffer[8].y * Local325.r);
	float Local344 = (Local342 * Local343);
	float Local345 = (Local344 * 6.28318548);
	float3 Local346 = LWCNormalize(Local335);
	float3 Local347 = cross(Local346,Local259);
	float3 Local348 = normalize(Local347);
	float3 Local349 = RotateAboutAxis(float4(Local348,Local345),Local254,  Local149 );
	float3 Local350 = (Local349 * ((float3)  Local300 ));
	float3 Local351 = (Local334 + Local350);
	float Local352 = (View.GameTime * Material.PreshaderBuffer[8].z);
	float Local353 = (Local352 * 2.09439516);
	float Local354 = sin(Local353);
	float Local355 = (  Local354  * Material.PreshaderBuffer[8].w);
	float3 Local356 = (((float3)  Local355 ) * Local351);
	float4 Local357 = MaterialCollection1.Vectors[6];
	FLWCVector3 Local358 = LWCSubtract(  Local149 , Local357.rgba.rgb);
	FLWCScalar Local359 = LWCLength(  Local358 );
	float Local360 = (Local317.b * Material.PreshaderBuffer[9].x);
	float Local361 = max(0.00001000,Local360);
	float Local362 = (1.00000000 / Local361);
	FLWCScalar Local363 = LWCMultiply(  Local359 , Local362);
	FLWCScalar Local364 = LWCSubtract(1.00000000,   Local363 );
	FLWCScalar Local365 = LWCMultiply(  Local364 , 1.00502515);
	float Local366 = LWCSaturate(  Local365 );
	float4 Local367 = MaterialCollection1.Vectors[0];
	float Local368 = (  Local366  * Local367.r);
	float3 Local369 = lerp(Local351,Local356,  Local368 );
	FLWCVector3 Local370 = LWCSubtract(Local357.rgba.rgb, Local198);
	float3 Local371 = LWCNormalize(Local370);
	float3 Local372 = cross(Local371,Local203);
	float3 Local373 = normalize(Local372);
	float3 Local374 = RotateAboutAxis(float4(Local373,Material.PreshaderBuffer[9].y),Local198,  Local149 );
	float3 Local375 = (Local374 * ((float3)  Local244 ));
	float Local376 = (View.GameTime * Material.PreshaderBuffer[9].z);
	float Local377 = (Local376 * 2.09439516);
	float Local378 = sin(Local377);
	float Local379 = (  Local378  * Material.PreshaderBuffer[9].w);
	float3 Local380 = (Local375 * ((float3)  Local379 ));
	float3 Local381 = (((float3)0.00000000) + Local380);
	FLWCVector3 Local382 = LWCSubtract(Local357.rgba.rgb, Local254);
	float3 Local383 = LWCNormalize(Local382);
	float3 Local384 = cross(Local383,Local259);
	float3 Local385 = normalize(Local384);
	float3 Local386 = RotateAboutAxis(float4(Local385,Material.PreshaderBuffer[9].y),Local254,  Local149 );
	float3 Local387 = (Local386 * ((float3)  Local300 ));
	float Local388 = (View.GameTime * Material.PreshaderBuffer[10].x);
	float Local389 = (Local388 * 2.09439516);
	float Local390 = sin(Local389);
	float Local391 = (  Local390  * Material.PreshaderBuffer[10].y);
	float3 Local392 = (Local387 * ((float3)  Local391 ));
	float3 Local393 = (Local381 + Local392);
	float3 Local394 = (((float3)  Local368 ) * Local393);
	float3 Local395 = (Local369 + Local394);
	float3 Local396 = (((float3)  Local313 ) * Local395);
	float4 Local397 = MaterialCollection1.Vectors[7];
	FLWCVector3 Local398 = LWCSubtract(Local397.rgba.rgb, Local198);
	FLWCScalar Local399 = LWCLength(Local398);
	float Local400 = (Material.PreshaderBuffer[7].z * Local317.a);
	float Local401 = max(0.00001000,Local400);
	float Local402 = (1.00000000 / Local401);
	FLWCScalar Local403 = LWCMultiply(Local399, Local402);
	FLWCScalar Local404 = LWCSubtract(1.00000000, Local403);
	FLWCScalar Local405 = LWCMultiply(Local404, 1.33333337);
	float Local406 = LWCSaturate(Local405);
	float Local407 = (Material.PreshaderBuffer[7].w * Local325.g);
	float Local408 = (Local406 * Local407);
	float Local409 = (Local408 * 6.28318548);
	float3 Local410 = LWCNormalize(Local398);
	float3 Local411 = cross(Local410,Local203);
	float3 Local412 = normalize(Local411);
	float3 Local413 = RotateAboutAxis(float4(Local412,Local409),Local198,  Local149 );
	float3 Local414 = (Local413 * ((float3)  Local244 ));
	float3 Local415 = (((float3)0.00000000) + Local414);
	FLWCVector3 Local416 = LWCSubtract(Local397.rgba.rgb, Local254);
	FLWCScalar Local417 = LWCLength(Local416);
	float Local418 = (Local317.a * Material.PreshaderBuffer[8].x);
	float Local419 = max(0.00001000,Local418);
	float Local420 = (1.00000000 / Local419);
	FLWCScalar Local421 = LWCMultiply(Local417, Local420);
	FLWCScalar Local422 = LWCSubtract(1.00000000, Local421);
	float Local423 = LWCSaturate(Local422);
	float Local424 = (Material.PreshaderBuffer[8].y * Local325.g);
	float Local425 = (Local423 * Local424);
	float Local426 = (Local425 * 6.28318548);
	float3 Local427 = LWCNormalize(Local416);
	float3 Local428 = cross(Local427,Local259);
	float3 Local429 = normalize(Local428);
	float3 Local430 = RotateAboutAxis(float4(Local429,Local426),Local254,  Local149 );
	float3 Local431 = (Local430 * ((float3)  Local300 ));
	float3 Local432 = (Local415 + Local431);
	float3 Local433 = (((float3)  Local355 ) * Local432);
	float4 Local434 = MaterialCollection1.Vectors[8];
	FLWCVector3 Local435 = LWCSubtract(  Local149 , Local434.rgba.rgb);
	FLWCScalar Local436 = LWCLength(  Local435 );
	float Local437 = (Local317.a * Material.PreshaderBuffer[9].x);
	float Local438 = max(0.00001000,Local437);
	float Local439 = (1.00000000 / Local438);
	FLWCScalar Local440 = LWCMultiply(  Local436 , Local439);
	FLWCScalar Local441 = LWCSubtract(1.00000000,   Local440 );
	FLWCScalar Local442 = LWCMultiply(  Local441 , 1.00502515);
	float Local443 = LWCSaturate(  Local442 );
	float Local444 = (  Local443  * Local367.g);
	float3 Local445 = lerp(Local432,Local433,  Local444 );
	FLWCVector3 Local446 = LWCSubtract(Local434.rgba.rgb, Local198);
	float3 Local447 = LWCNormalize(Local446);
	float3 Local448 = cross(Local447,Local203);
	float3 Local449 = normalize(Local448);
	float3 Local450 = RotateAboutAxis(float4(Local449,Material.PreshaderBuffer[9].y),Local198,  Local149 );
	float3 Local451 = (Local450 * ((float3)  Local244 ));
	float3 Local452 = (Local451 * ((float3)  Local379 ));
	float3 Local453 = (((float3)0.00000000) + Local452);
	FLWCVector3 Local454 = LWCSubtract(Local434.rgba.rgb, Local254);
	float3 Local455 = LWCNormalize(Local454);
	float3 Local456 = cross(Local455,Local259);
	float3 Local457 = normalize(Local456);
	float3 Local458 = RotateAboutAxis(float4(Local457,Material.PreshaderBuffer[9].y),Local254,  Local149 );
	float3 Local459 = (Local458 * ((float3)  Local300 ));
	float3 Local460 = (Local459 * ((float3)  Local391 ));
	float3 Local461 = (Local453 + Local460);
	float3 Local462 = (((float3)  Local444 ) * Local461);
	float3 Local463 = (Local445 + Local462);
	float3 Local464 = (((float3)  Local313 ) * Local463);
	float4 Local465 = MaterialCollection1.Vectors[9];
	FLWCVector3 Local466 = LWCSubtract(Local465.rgba.rgb, Local198);
	FLWCScalar Local467 = LWCLength(Local466);
	float4 Local468 = MaterialCollection1.Vectors[2];
	float Local469 = (Material.PreshaderBuffer[7].z * Local468.r);
	float Local470 = max(0.00001000,Local469);
	float Local471 = (1.00000000 / Local470);
	FLWCScalar Local472 = LWCMultiply(Local467, Local471);
	FLWCScalar Local473 = LWCSubtract(1.00000000, Local472);
	FLWCScalar Local474 = LWCMultiply(Local473, 1.33333337);
	float Local475 = LWCSaturate(Local474);
	float Local476 = (Material.PreshaderBuffer[7].w * Local325.b);
	float Local477 = (Local475 * Local476);
	float Local478 = (Local477 * 6.28318548);
	float3 Local479 = LWCNormalize(Local466);
	float3 Local480 = cross(Local479,Local203);
	float3 Local481 = normalize(Local480);
	float3 Local482 = RotateAboutAxis(float4(Local481,Local478),Local198,  Local149 );
	float3 Local483 = (Local482 * ((float3)  Local244 ));
	float3 Local484 = (((float3)0.00000000) + Local483);
	FLWCVector3 Local485 = LWCSubtract(Local465.rgba.rgb, Local254);
	FLWCScalar Local486 = LWCLength(Local485);
	float Local487 = (Local468.r * Material.PreshaderBuffer[8].x);
	float Local488 = max(0.00001000,Local487);
	float Local489 = (1.00000000 / Local488);
	FLWCScalar Local490 = LWCMultiply(Local486, Local489);
	FLWCScalar Local491 = LWCSubtract(1.00000000, Local490);
	float Local492 = LWCSaturate(Local491);
	float Local493 = (Material.PreshaderBuffer[8].y * Local325.b);
	float Local494 = (Local492 * Local493);
	float Local495 = (Local494 * 6.28318548);
	float3 Local496 = LWCNormalize(Local485);
	float3 Local497 = cross(Local496,Local259);
	float3 Local498 = normalize(Local497);
	float3 Local499 = RotateAboutAxis(float4(Local498,Local495),Local254,  Local149 );
	float3 Local500 = (Local499 * ((float3)  Local300 ));
	float3 Local501 = (Local484 + Local500);
	float3 Local502 = (((float3)  Local355 ) * Local501);
	float4 Local503 = MaterialCollection1.Vectors[10];
	FLWCVector3 Local504 = LWCSubtract(  Local149 , Local503.rgba.rgb);
	FLWCScalar Local505 = LWCLength(  Local504 );
	float Local506 = (Local468.r * Material.PreshaderBuffer[9].x);
	float Local507 = max(0.00001000,Local506);
	float Local508 = (1.00000000 / Local507);
	FLWCScalar Local509 = LWCMultiply(  Local505 , Local508);
	FLWCScalar Local510 = LWCSubtract(1.00000000,   Local509 );
	FLWCScalar Local511 = LWCMultiply(  Local510 , 1.00502515);
	float Local512 = LWCSaturate(  Local511 );
	float Local513 = (  Local512  * Local367.b);
	float3 Local514 = lerp(Local501,Local502,  Local513 );
	FLWCVector3 Local515 = LWCSubtract(Local503.rgba.rgb, Local198);
	float3 Local516 = LWCNormalize(Local515);
	float3 Local517 = cross(Local516,Local203);
	float3 Local518 = normalize(Local517);
	float3 Local519 = RotateAboutAxis(float4(Local518,Material.PreshaderBuffer[9].y),Local198,  Local149 );
	float3 Local520 = (Local519 * ((float3)  Local244 ));
	float3 Local521 = (Local520 * ((float3)  Local379 ));
	float3 Local522 = (((float3)0.00000000) + Local521);
	FLWCVector3 Local523 = LWCSubtract(Local503.rgba.rgb, Local254);
	float3 Local524 = LWCNormalize(Local523);
	float3 Local525 = cross(Local524,Local259);
	float3 Local526 = normalize(Local525);
	float3 Local527 = RotateAboutAxis(float4(Local526,Material.PreshaderBuffer[9].y),Local254,  Local149 );
	float3 Local528 = (Local527 * ((float3)  Local300 ));
	float3 Local529 = (Local528 * ((float3)  Local391 ));
	float3 Local530 = (Local522 + Local529);
	float3 Local531 = (((float3)  Local513 ) * Local530);
	float3 Local532 = (Local514 + Local531);
	float3 Local533 = (((float3)  Local313 ) * Local532);
	float3 Local534 = (Local533 + ((float3)0.00000000));
	float3 Local535 = (Local464 + Local534);
	float3 Local536 = (Local396 + Local535);
	float3 Local537 = (Local302 + Local536);
	float2 Local541 = (((float2)fmod(View.PrevFrameGameTime,99999997952.00000000)) * float2(Local75,Local75));
	FLWCVector3 Local542 = LWCMultiply(Local125.rgb, GetPrevInstanceToWorld(Parameters));
	float3 Local543 = LWCMultiplyVector(Local129, GetPrevInstanceToWorld(Parameters));
	float3 Local544 = normalize(Local543);
	float3 Local545 = (Local544 * ((float3)Local133));
	FLWCVector3 Local546 = LWCAdd(Local542, Local545);
	FLWCScalar Local547 = LWCDot(LWCPromote(  Local82 ), Local546);
	FLWCScalar Local548 = LWCDot(LWCPromote(float3(0.00000000,1.00000000,0.00000000).rgb), Local546);
	FLWCVector2 Local549 = LWCDivide(MakeLWCVector(LWCPromote(Local547),LWCPromote(Local548)), ((float2)20.00000000));
	FLWCVector2 Local550 = LWCAdd(Local541, Local549);
	float2 Local551 = LWCFrac(Local550);
	float4 Local552 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleLevel(Material_Texture2D_10,Material_Texture2D_10Sampler,Local551,-1.00000000));
	float Local553 = (Local74 * Local552.a);
	float Local554 = (0.00000000 + Local553);
	float Local555 = dot(  Local82 ,Local544);
	float Local556 = (Local555 + float2(-1.25000000,-0.44400001).r);
	float Local557 = (Local556 * float2(-1.25000000,-0.44400001).g);
	float Local558 = (Local554 * Local557);
	FLWCVector3 Local559 = GetPrevWorldPosition(Parameters);
	FLWCVector3 Local560 = MakeLWCVector( LWCGetComponent(   Local559  , 0),  LWCGetComponent(   Local559  , 1),  LWCGetComponent(   Local559  , 2));
	FLWCVector3 Local561 = LWCSubtract(  Local560 , Local542);
	float3 Local562 = LWCMultiplyVector(float3(1.00000000,0.00000000,0.00000000).rgb, GetPrevInstanceToWorld(Parameters));
	float3 Local563 = (((float3)0.00000000) - Local562);
	float Local564 = length(Local563);
	float3 Local565 = LWCMultiplyVector(float3(0.00000000,1.00000000,0.00000000).rgb, GetPrevInstanceToWorld(Parameters));
	float3 Local566 = (((float3)0.00000000) - Local565);
	float Local567 = length(Local566);
	float2 Local568 = float2(  Local564 ,  Local567 );
	float3 Local569 = LWCMultiplyVector(float3(0.00000000,0.00000000,1.00000000).rgb, GetPrevInstanceToWorld(Parameters));
	float3 Local570 = (((float3)0.00000000) - Local569);
	float Local571 = length(Local570);
	float3 Local572 = float3(  Local568 ,  Local571 );
	float3 Local573 = (LWCToFloat(Local561) /   Local572 );
	float3 Local574 = normalize(Local544);
	float Local575 = dot(Local573,Local574);
	float Local576 = (Local575 / Local165);
	float Local577 = saturate(Local576);
	float Local578 = (Local558 * Local577);
	float Local579 = (Local578 * 6.28318548);
	FLWCVector2 Local580 = LWCDivide(Local550, ((float2)4.00000000));
	float2 Local581 = LWCFrac(Local580);
	float4 Local582 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleLevel(Material_Texture2D_10,Material_Texture2D_10Sampler,Local581,-1.00000000));
	float3 Local583 = (Local582.rgb - ((float3)0.50000000));
	float3 Local584 = (((float3)Local170) * Local583);
	float Local585 = PositiveClampedPow(Local555,5.00000000);
	float3 Local586 = (((float3)Local585) * float3(0.00000000,0.00000000,-0.20000000).rgb);
	float3 Local587 = (Local586 +   Local82 );
	float3 Local588 = cross(Local544,Local587);
	float3 Local589 = (Local584 + Local588);
	float3 Local590 = (Local589 - ((float3)0.00000000));
	float Local591 = length(Local590);
	float3 Local592 = (Local589 / ((float3)Local591));
	float3 Local593 = RotateAboutAxis(float4(Local592,Local579),Local542,  Local560 );
	float2 Local594 = (((float2)fmod(View.PrevFrameGameTime,99999997952.00000000)) * float2(Local186,Local186));
	FLWCVector3 Local595 = LWCMultiply(Local197.rgb, GetPrevInstanceToWorld(Parameters));
	float3 Local596 = LWCMultiplyVector(Local201, GetPrevInstanceToWorld(Parameters));
	float3 Local597 = normalize(Local596);
	float3 Local598 = (Local597 * ((float3)Local205));
	FLWCVector3 Local599 = LWCAdd(Local595, Local598);
	FLWCScalar Local600 = LWCDot(LWCPromote(  Local82 ), Local599);
	FLWCScalar Local601 = LWCDot(LWCPromote(float3(0.00000000,1.00000000,0.00000000).rgb), Local599);
	FLWCVector2 Local602 = LWCDivide(MakeLWCVector(LWCPromote(Local600),LWCPromote(Local601)), ((float2)20.00000000));
	FLWCVector2 Local603 = LWCAdd(Local594, Local602);
	float2 Local604 = LWCFrac(Local603);
	float4 Local605 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleLevel(Material_Texture2D_10,Material_Texture2D_10Sampler,Local604,-1.00000000));
	float Local606 = (Local185 * Local605.a);
	float Local607 = (0.00000000 + Local606);
	float Local608 = dot(  Local82 ,Local597);
	float Local609 = (Local608 + float2(-1.25000000,-0.44400001).r);
	float Local610 = (Local609 * float2(-1.25000000,-0.44400001).g);
	float Local611 = (Local607 * Local610);
	FLWCVector3 Local612 = LWCSubtract(  Local560 , Local595);
	float3 Local613 = (LWCToFloat(Local612) /   Local572 );
	float3 Local614 = normalize(Local597);
	float Local615 = dot(Local613,Local614);
	float Local616 = (Local615 / Local224);
	float Local617 = saturate(Local616);
	float Local618 = (Local611 * Local617);
	float Local619 = (Local618 * 6.28318548);
	FLWCVector2 Local620 = LWCDivide(Local603, ((float2)4.00000000));
	float2 Local621 = LWCFrac(Local620);
	float4 Local622 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleLevel(Material_Texture2D_10,Material_Texture2D_10Sampler,Local621,-1.00000000));
	float3 Local623 = (Local622.rgb - ((float3)0.50000000));
	float3 Local624 = (((float3)Local229) * Local623);
	float Local625 = PositiveClampedPow(Local608,5.00000000);
	float3 Local626 = (((float3)Local625) * float3(0.00000000,0.00000000,-0.20000000).rgb);
	float3 Local627 = (Local626 +   Local82 );
	float3 Local628 = cross(Local597,Local627);
	float3 Local629 = (Local624 + Local628);
	float3 Local630 = (Local629 - ((float3)0.00000000));
	float Local631 = length(Local630);
	float3 Local632 = (Local629 / ((float3)Local631));
	float3 Local633 = RotateAboutAxis(float4(Local632,Local619),Local595,  Local560 );
	float3 Local634 = (Local633 * ((float3)  Local244 ));
	float3 Local635 = (Local593 + Local634);
	float2 Local636 = (((float2)fmod(View.PrevFrameGameTime,99999997952.00000000)) * float2(Local248,Local248));
	FLWCVector3 Local637 = LWCMultiply(Local253.rgb, GetPrevInstanceToWorld(Parameters));
	float3 Local638 = LWCMultiplyVector(Local257, GetPrevInstanceToWorld(Parameters));
	float3 Local639 = normalize(Local638);
	float3 Local640 = (Local639 * ((float3)Local261));
	FLWCVector3 Local641 = LWCAdd(Local637, Local640);
	FLWCScalar Local642 = LWCDot(LWCPromote(  Local82 ), Local641);
	FLWCScalar Local643 = LWCDot(LWCPromote(float3(0.00000000,1.00000000,0.00000000).rgb), Local641);
	FLWCVector2 Local644 = LWCDivide(MakeLWCVector(LWCPromote(Local642),LWCPromote(Local643)), ((float2)20.00000000));
	FLWCVector2 Local645 = LWCAdd(Local636, Local644);
	float2 Local646 = LWCFrac(Local645);
	float4 Local647 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleLevel(Material_Texture2D_10,Material_Texture2D_10Sampler,Local646,-1.00000000));
	float Local648 = (Local247 * Local647.a);
	float Local649 = (0.00000000 + Local648);
	float Local650 = dot(  Local82 ,Local639);
	float Local651 = (Local650 + float2(-1.25000000,-0.44400001).r);
	float Local652 = (Local651 * float2(-1.25000000,-0.44400001).g);
	float Local653 = (Local649 * Local652);
	FLWCVector3 Local654 = LWCSubtract(  Local560 , Local637);
	float3 Local655 = (LWCToFloat(Local654) /   Local572 );
	float3 Local656 = normalize(Local639);
	float Local657 = dot(Local655,Local656);
	float Local658 = (Local657 / Local280);
	float Local659 = saturate(Local658);
	float Local660 = (Local653 * Local659);
	float Local661 = (Local660 * 6.28318548);
	FLWCVector2 Local662 = LWCDivide(Local645, ((float2)4.00000000));
	float2 Local663 = LWCFrac(Local662);
	float4 Local664 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleLevel(Material_Texture2D_10,Material_Texture2D_10Sampler,Local663,-1.00000000));
	float3 Local665 = (Local664.rgb - ((float3)0.50000000));
	float3 Local666 = (((float3)Local285) * Local665);
	float Local667 = PositiveClampedPow(Local650,5.00000000);
	float3 Local668 = (((float3)Local667) * float3(0.00000000,0.00000000,-0.20000000).rgb);
	float3 Local669 = (Local668 +   Local82 );
	float3 Local670 = cross(Local639,Local669);
	float3 Local671 = (Local666 + Local670);
	float3 Local672 = (Local671 - ((float3)0.00000000));
	float Local673 = length(Local672);
	float3 Local674 = (Local671 / ((float3)Local673));
	float3 Local675 = RotateAboutAxis(float4(Local674,Local661),Local637,  Local560 );
	float3 Local676 = (Local675 * ((float3)  Local300 ));
	float3 Local677 = (Local635 + Local676);
	FLWCVector3 Local678 = TransformLocalPositionToPrevWorld(Parameters, float3(0.00000000,0.00000000,0.00000000).rgb);
	FLWCVector3 Local679 = LWCSubtract(Local678,   Local560 );
	float3 Local680 = LWCToFloat(  Local679 );
	float Local681 = length(  Local680 );
	float Local682 = (  Local571  * Material.PreshaderBuffer[7].y);
	float Local683 = max(0.00001000,  Local682 );
	float Local684 = (1.00000000 /   Local683 );
	float Local685 = (  Local681  *   Local684 );
	float Local686 = (1.00000000 -   Local685 );
	float Local687 = saturate(  Local686 );
	float Local688 = (1.00000000 -   Local687 );
	FLWCVector3 Local689 = LWCSubtract(Local314.rgba.rgb, Local595);
	FLWCScalar Local690 = LWCLength(Local689);
	FLWCScalar Local691 = LWCMultiply(Local690, Local320);
	FLWCScalar Local692 = LWCSubtract(1.00000000, Local691);
	FLWCScalar Local693 = LWCMultiply(Local692, 1.33333337);
	float Local694 = LWCSaturate(Local693);
	float Local695 = (Local694 * Local326);
	float Local696 = (Local695 * 6.28318548);
	float3 Local697 = LWCNormalize(Local689);
	float3 Local698 = cross(Local697,Local597);
	float3 Local699 = normalize(Local698);
	float3 Local700 = RotateAboutAxis(float4(Local699,Local696),Local595,  Local560 );
	float3 Local701 = (Local700 * ((float3)  Local244 ));
	float3 Local702 = (((float3)0.00000000) + Local701);
	FLWCVector3 Local703 = LWCSubtract(Local314.rgba.rgb, Local637);
	FLWCScalar Local704 = LWCLength(Local703);
	FLWCScalar Local705 = LWCMultiply(Local704, Local339);
	FLWCScalar Local706 = LWCSubtract(1.00000000, Local705);
	float Local707 = LWCSaturate(Local706);
	float Local708 = (Local707 * Local343);
	float Local709 = (Local708 * 6.28318548);
	float3 Local710 = LWCNormalize(Local703);
	float3 Local711 = cross(Local710,Local639);
	float3 Local712 = normalize(Local711);
	float3 Local713 = RotateAboutAxis(float4(Local712,Local709),Local637,  Local560 );
	float3 Local714 = (Local713 * ((float3)  Local300 ));
	float3 Local715 = (Local702 + Local714);
	float Local716 = (View.PrevFrameGameTime * Material.PreshaderBuffer[8].z);
	float Local717 = (Local716 * 2.09439516);
	float Local718 = sin(Local717);
	float Local719 = (  Local718  * Material.PreshaderBuffer[8].w);
	float3 Local720 = (((float3)  Local719 ) * Local715);
	FLWCVector3 Local721 = LWCSubtract(  Local560 , Local357.rgba.rgb);
	FLWCScalar Local722 = LWCLength(  Local721 );
	FLWCScalar Local723 = LWCMultiply(  Local722 , Local362);
	FLWCScalar Local724 = LWCSubtract(1.00000000,   Local723 );
	FLWCScalar Local725 = LWCMultiply(  Local724 , 1.00502515);
	float Local726 = LWCSaturate(  Local725 );
	float Local727 = (  Local726  * Local367.r);
	float3 Local728 = lerp(Local715,Local720,  Local727 );
	FLWCVector3 Local729 = LWCSubtract(Local357.rgba.rgb, Local595);
	float3 Local730 = LWCNormalize(Local729);
	float3 Local731 = cross(Local730,Local597);
	float3 Local732 = normalize(Local731);
	float3 Local733 = RotateAboutAxis(float4(Local732,Material.PreshaderBuffer[9].y),Local595,  Local560 );
	float3 Local734 = (Local733 * ((float3)  Local244 ));
	float Local735 = (View.PrevFrameGameTime * Material.PreshaderBuffer[9].z);
	float Local736 = (Local735 * 2.09439516);
	float Local737 = sin(Local736);
	float Local738 = (  Local737  * Material.PreshaderBuffer[9].w);
	float3 Local739 = (Local734 * ((float3)  Local738 ));
	float3 Local740 = (((float3)0.00000000) + Local739);
	FLWCVector3 Local741 = LWCSubtract(Local357.rgba.rgb, Local637);
	float3 Local742 = LWCNormalize(Local741);
	float3 Local743 = cross(Local742,Local639);
	float3 Local744 = normalize(Local743);
	float3 Local745 = RotateAboutAxis(float4(Local744,Material.PreshaderBuffer[9].y),Local637,  Local560 );
	float3 Local746 = (Local745 * ((float3)  Local300 ));
	float Local747 = (View.PrevFrameGameTime * Material.PreshaderBuffer[10].x);
	float Local748 = (Local747 * 2.09439516);
	float Local749 = sin(Local748);
	float Local750 = (  Local749  * Material.PreshaderBuffer[10].y);
	float3 Local751 = (Local746 * ((float3)  Local750 ));
	float3 Local752 = (Local740 + Local751);
	float3 Local753 = (((float3)  Local727 ) * Local752);
	float3 Local754 = (Local728 + Local753);
	float3 Local755 = (((float3)  Local688 ) * Local754);
	FLWCVector3 Local756 = LWCSubtract(Local397.rgba.rgb, Local595);
	FLWCScalar Local757 = LWCLength(Local756);
	FLWCScalar Local758 = LWCMultiply(Local757, Local402);
	FLWCScalar Local759 = LWCSubtract(1.00000000, Local758);
	FLWCScalar Local760 = LWCMultiply(Local759, 1.33333337);
	float Local761 = LWCSaturate(Local760);
	float Local762 = (Local761 * Local407);
	float Local763 = (Local762 * 6.28318548);
	float3 Local764 = LWCNormalize(Local756);
	float3 Local765 = cross(Local764,Local597);
	float3 Local766 = normalize(Local765);
	float3 Local767 = RotateAboutAxis(float4(Local766,Local763),Local595,  Local560 );
	float3 Local768 = (Local767 * ((float3)  Local244 ));
	float3 Local769 = (((float3)0.00000000) + Local768);
	FLWCVector3 Local770 = LWCSubtract(Local397.rgba.rgb, Local637);
	FLWCScalar Local771 = LWCLength(Local770);
	FLWCScalar Local772 = LWCMultiply(Local771, Local420);
	FLWCScalar Local773 = LWCSubtract(1.00000000, Local772);
	float Local774 = LWCSaturate(Local773);
	float Local775 = (Local774 * Local424);
	float Local776 = (Local775 * 6.28318548);
	float3 Local777 = LWCNormalize(Local770);
	float3 Local778 = cross(Local777,Local639);
	float3 Local779 = normalize(Local778);
	float3 Local780 = RotateAboutAxis(float4(Local779,Local776),Local637,  Local560 );
	float3 Local781 = (Local780 * ((float3)  Local300 ));
	float3 Local782 = (Local769 + Local781);
	float3 Local783 = (((float3)  Local719 ) * Local782);
	FLWCVector3 Local784 = LWCSubtract(  Local560 , Local434.rgba.rgb);
	FLWCScalar Local785 = LWCLength(  Local784 );
	FLWCScalar Local786 = LWCMultiply(  Local785 , Local439);
	FLWCScalar Local787 = LWCSubtract(1.00000000,   Local786 );
	FLWCScalar Local788 = LWCMultiply(  Local787 , 1.00502515);
	float Local789 = LWCSaturate(  Local788 );
	float Local790 = (  Local789  * Local367.g);
	float3 Local791 = lerp(Local782,Local783,  Local790 );
	FLWCVector3 Local792 = LWCSubtract(Local434.rgba.rgb, Local595);
	float3 Local793 = LWCNormalize(Local792);
	float3 Local794 = cross(Local793,Local597);
	float3 Local795 = normalize(Local794);
	float3 Local796 = RotateAboutAxis(float4(Local795,Material.PreshaderBuffer[9].y),Local595,  Local560 );
	float3 Local797 = (Local796 * ((float3)  Local244 ));
	float3 Local798 = (Local797 * ((float3)  Local738 ));
	float3 Local799 = (((float3)0.00000000) + Local798);
	FLWCVector3 Local800 = LWCSubtract(Local434.rgba.rgb, Local637);
	float3 Local801 = LWCNormalize(Local800);
	float3 Local802 = cross(Local801,Local639);
	float3 Local803 = normalize(Local802);
	float3 Local804 = RotateAboutAxis(float4(Local803,Material.PreshaderBuffer[9].y),Local637,  Local560 );
	float3 Local805 = (Local804 * ((float3)  Local300 ));
	float3 Local806 = (Local805 * ((float3)  Local750 ));
	float3 Local807 = (Local799 + Local806);
	float3 Local808 = (((float3)  Local790 ) * Local807);
	float3 Local809 = (Local791 + Local808);
	float3 Local810 = (((float3)  Local688 ) * Local809);
	FLWCVector3 Local811 = LWCSubtract(Local465.rgba.rgb, Local595);
	FLWCScalar Local812 = LWCLength(Local811);
	FLWCScalar Local813 = LWCMultiply(Local812, Local471);
	FLWCScalar Local814 = LWCSubtract(1.00000000, Local813);
	FLWCScalar Local815 = LWCMultiply(Local814, 1.33333337);
	float Local816 = LWCSaturate(Local815);
	float Local817 = (Local816 * Local476);
	float Local818 = (Local817 * 6.28318548);
	float3 Local819 = LWCNormalize(Local811);
	float3 Local820 = cross(Local819,Local597);
	float3 Local821 = normalize(Local820);
	float3 Local822 = RotateAboutAxis(float4(Local821,Local818),Local595,  Local560 );
	float3 Local823 = (Local822 * ((float3)  Local244 ));
	float3 Local824 = (((float3)0.00000000) + Local823);
	FLWCVector3 Local825 = LWCSubtract(Local465.rgba.rgb, Local637);
	FLWCScalar Local826 = LWCLength(Local825);
	FLWCScalar Local827 = LWCMultiply(Local826, Local489);
	FLWCScalar Local828 = LWCSubtract(1.00000000, Local827);
	float Local829 = LWCSaturate(Local828);
	float Local830 = (Local829 * Local493);
	float Local831 = (Local830 * 6.28318548);
	float3 Local832 = LWCNormalize(Local825);
	float3 Local833 = cross(Local832,Local639);
	float3 Local834 = normalize(Local833);
	float3 Local835 = RotateAboutAxis(float4(Local834,Local831),Local637,  Local560 );
	float3 Local836 = (Local835 * ((float3)  Local300 ));
	float3 Local837 = (Local824 + Local836);
	float3 Local838 = (((float3)  Local719 ) * Local837);
	FLWCVector3 Local839 = LWCSubtract(  Local560 , Local503.rgba.rgb);
	FLWCScalar Local840 = LWCLength(  Local839 );
	FLWCScalar Local841 = LWCMultiply(  Local840 , Local508);
	FLWCScalar Local842 = LWCSubtract(1.00000000,   Local841 );
	FLWCScalar Local843 = LWCMultiply(  Local842 , 1.00502515);
	float Local844 = LWCSaturate(  Local843 );
	float Local845 = (  Local844  * Local367.b);
	float3 Local846 = lerp(Local837,Local838,  Local845 );
	FLWCVector3 Local847 = LWCSubtract(Local503.rgba.rgb, Local595);
	float3 Local848 = LWCNormalize(Local847);
	float3 Local849 = cross(Local848,Local597);
	float3 Local850 = normalize(Local849);
	float3 Local851 = RotateAboutAxis(float4(Local850,Material.PreshaderBuffer[9].y),Local595,  Local560 );
	float3 Local852 = (Local851 * ((float3)  Local244 ));
	float3 Local853 = (Local852 * ((float3)  Local738 ));
	float3 Local854 = (((float3)0.00000000) + Local853);
	FLWCVector3 Local855 = LWCSubtract(Local503.rgba.rgb, Local637);
	float3 Local856 = LWCNormalize(Local855);
	float3 Local857 = cross(Local856,Local639);
	float3 Local858 = normalize(Local857);
	float3 Local859 = RotateAboutAxis(float4(Local858,Material.PreshaderBuffer[9].y),Local637,  Local560 );
	float3 Local860 = (Local859 * ((float3)  Local300 ));
	float3 Local861 = (Local860 * ((float3)  Local750 ));
	float3 Local862 = (Local854 + Local861);
	float3 Local863 = (((float3)  Local845 ) * Local862);
	float3 Local864 = (Local846 + Local863);
	float3 Local865 = (((float3)  Local688 ) * Local864);
	float3 Local866 = (Local865 + ((float3)0.00000000));
	float3 Local867 = (Local810 + Local866);
	float3 Local868 = (Local755 + Local867);
	float3 Local869 = (Local677 + Local868);
	float2 Local870 = Parameters.TexCoords[0].xy;
	OutTexCoords[0] = Local870;
}
void GetCustomInterpolators(FMaterialVertexParameters Parameters, inout float2 OutTexCoords[1])
{
}
float4 TransformLocalToTranslatedWorld(float3 LocalPosition, FDFMatrix LocalToWorld)
{
	return DFTransformLocalToTranslatedWorld(LocalPosition, LocalToWorld, ResolvedView.PreViewTranslation);
}
float4 TransformLocalToTranslatedWorld(float3 LocalPosition, float4x4 LocalToWorld)
{
	return TransformLocalToTranslatedWorld(LocalPosition, DFPromote(LocalToWorld));
}
struct FVertexFactoryInterpolantsVSToPS
{
	float4 TangentToWorld0 : TEXCOORD10_centroid; float4	TangentToWorld2	: TEXCOORD11_centroid;
	nointerpolation float4  PerInstanceParams : COLOR1;
	float4	TexCoords[(1+1)/2]	: TEXCOORD0;
	nointerpolation uint PrimitiveId : PRIMITIVE_ID;
};
void SetUV(inout FVertexFactoryInterpolantsVSToPS Interpolants, int UVIndex, float2 InValue)
{
	[flatten]
	if (UVIndex % 2)
	{
		Interpolants.TexCoords[UVIndex / 2].zw = InValue;
	}
	else
	{
		Interpolants.TexCoords[UVIndex / 2].xy = InValue;
	}
}
void SetColor(inout FVertexFactoryInterpolantsVSToPS Interpolants, float4 InValue)
{
}
void SetTangents(inout FVertexFactoryInterpolantsVSToPS Interpolants, float3 InTangentToWorld0, float3 InTangentToWorld2, float InTangentToWorldSign)
{
	Interpolants.TangentToWorld0 = float4(InTangentToWorld0,0);
	Interpolants.TangentToWorld2 = float4(InTangentToWorld2,InTangentToWorldSign);
}
void SetPrimitiveId(inout FVertexFactoryInterpolantsVSToPS Interpolants, uint PrimitiveId)
{
	Interpolants.PrimitiveId = PrimitiveId;
}
struct FVertexFactoryInput
{
	float4	Position	: ATTRIBUTE0;
	 uint InstanceIdOffset : ATTRIBUTE13 ; 			uint DrawInstanceId : SV_InstanceID;
	 
	uint VertexId : SV_VertexID;
};
bool IsGPUSkinPassThrough()
{
		return false;
}
struct FPositionOnlyVertexFactoryInput
{
	float4	Position	: ATTRIBUTE0;
	 uint InstanceIdOffset : ATTRIBUTE1 ; 			uint DrawInstanceId : SV_InstanceID;
	 
	uint VertexId : SV_VertexID;
};
struct FPositionAndNormalOnlyVertexFactoryInput
{
	float4	Position	: ATTRIBUTE0;
	float4	Normal		: ATTRIBUTE2;
	 uint InstanceIdOffset : ATTRIBUTE1 ; 			uint DrawInstanceId : SV_InstanceID;
	 
	uint VertexId : SV_VertexID;
};
struct FVertexFactoryInstanceInput
{
	float4 Transform1;
	float4 Transform2;
	float4 Transform3;
	float4 Origin;
};
struct FVertexFactoryIntermediatesCommon
{
	FSceneDataIntermediates SceneData;
	FVertexFactoryInstanceInput InstanceInput;
};
struct FVertexFactoryIntermediates
{
	FVertexFactoryIntermediatesCommon Common;
	int PrimitiveLocalInstanceIndex;
	float3x3 TangentToLocal;
	float3x3 TangentToWorld;
	float TangentToWorldSign;
	float4 Color;
	bool bEvaluateWorldPositionOffset;
	float4 HitProxyId;
	float IsSelected;
	float IsVisible;
	float4 InstanceLightMapAndShadowMapUVBias;
	float4 PerInstanceParams;
	float3 PreSkinPosition;
};
FPrimitiveSceneData GetPrimitiveData(FVertexFactoryIntermediatesCommon Intermediates)
{
	return Intermediates.SceneData.Primitive;
}
FPrimitiveSceneData GetPrimitiveData(FVertexFactoryIntermediates Intermediates)
{
	return GetPrimitiveData(Intermediates.Common);
}
FInstanceSceneData GetInstanceData(FVertexFactoryIntermediatesCommon Intermediates)
{
	return Intermediates.SceneData.InstanceData;
}
FInstanceSceneData GetInstanceData(FVertexFactoryIntermediates Intermediates)
{
	return GetInstanceData(Intermediates.Common);
}
FVertexFactoryInstanceInput MakeInstanceInput(float4 Transform1, float4 Transform2, float4 Transform3, float4 Origin)
{
	FVertexFactoryInstanceInput Result;
	Result.Transform1 = Transform1;
	Result.Transform2 = Transform2;
	Result.Transform3 = Transform3;
	Result.Origin = Origin;
	return Result;
}
FVertexFactoryInstanceInput InitInstanceInput()
{
	return MakeInstanceInput(
		float4(1, 0, 0, 0),
		float4(0, 1, 0, 0),
		float4(0, 0, 1, 0),
		float4(0, 0, 0, 0)
	);
}
float3x3 CalcTangentToWorldNoScale(FVertexFactoryIntermediates Intermediates, float3x3 TangentToLocal)
{
	float3x3 LocalToWorld = DFToFloat3x3(GetInstanceData(Intermediates).LocalToWorld);
	float3 InvScale = GetInstanceData(Intermediates).InvNonUniformScale;
	LocalToWorld[0] *= InvScale.x;
	LocalToWorld[1] *= InvScale.y;
	LocalToWorld[2] *= InvScale.z;
	return mul(TangentToLocal, LocalToWorld); 
}
FMaterialVertexParameters GetMaterialVertexParameters(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 WorldPosition, float3x3 TangentToLocal)
{
	FMaterialVertexParameters Result = MakeInitializedMaterialVertexParameters();
	Result.SceneData = Intermediates.Common.SceneData;
	Result.PrimitiveId = Intermediates.Common.SceneData.PrimitiveId;
	Result.WorldPosition = WorldPosition;
	Result.VertexColor = Intermediates.Color;
	Result.TangentToWorld = Intermediates.TangentToWorld;
	Result.bEvaluateWorldPositionOffset = Intermediates.bEvaluateWorldPositionOffset;
	FPrimitiveSceneData PrimitiveData = GetPrimitiveData(Intermediates);
	FInstanceSceneData InstanceData = GetInstanceData(Intermediates);
	Result.PrevFrameLocalToWorld = InstanceData.PrevLocalToWorld;
		Result.InstanceLocalPosition = Input.Position.xyz;
		Result.InstanceLocalToWorld = InstanceData.LocalToWorld;
		Result.InstanceWorldToLocal = InstanceData.WorldToLocal;
		Result.PerInstanceParams = Intermediates.PerInstanceParams;
	Result.PerInstanceRandom = InstanceData.RandomID;
	Result.PreSkinnedPosition = Intermediates.PreSkinPosition.xyz;
	{
		Result.PreSkinnedNormal = TangentToLocal[2]; 
	}
		const uint NumFetchTexCoords = LocalVF.VertexFetch_Parameters[1];
		[unroll]
		for (uint CoordinateIndex = 0; CoordinateIndex < 2; CoordinateIndex++)
		{
			uint ClampedCoordinateIndex = min(CoordinateIndex, NumFetchTexCoords-1);
			Result.TexCoords[CoordinateIndex] = LocalVF_VertexFetch_TexCoordBuffer[NumFetchTexCoords * (LocalVF.VertexFetch_Parameters[3] + Input.VertexId) + ClampedCoordinateIndex];
		}
	Result.Particle.Color = float4(1,1,1,1);
	Result.LWCData = MakeMaterialLWCData(Result);
	return Result;
}
float4 CalcWorldPosition(FVertexFactoryIntermediatesCommon Intermediates, float4 Position, FDFMatrix LocalToWorld)
{
	return TransformLocalToTranslatedWorld(Position.xyz, LocalToWorld);
}
float3x3 CalcTangentToLocal(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, inout float TangentSign)
{
	float3 TangentInputX = LocalVF_VertexFetch_PackedTangentsBuffer[2 * (LocalVF.VertexFetch_Parameters[3] + Input.VertexId) + 0].xyz;
	float4 TangentInputZ = LocalVF_VertexFetch_PackedTangentsBuffer[2 * (LocalVF.VertexFetch_Parameters[3] + Input.VertexId) + 1].xyzw;
	float3 TangentX = TangentInputX;
	float4 TangentZ = TangentInputZ;
	if (!IsGPUSkinPassThrough())
	{
		TangentX =  ( TangentInputX );
		TangentZ =  ( TangentInputZ );
	}
	TangentSign = TangentZ.w;
	float3 TangentY = cross(TangentZ.xyz, TangentX) * TangentZ.w;
	float3x3 Result;
	Result[0] = cross(TangentY, TangentZ.xyz) * TangentZ.w;
	Result[1] = TangentY;
	Result[2] = TangentZ.xyz;
	return Result;
}
float3x3 CalcTangentToWorld(FVertexFactoryIntermediates Intermediates, float3x3 TangentToLocal)
{
	float3x3 TangentToWorld = CalcTangentToWorldNoScale(Intermediates, TangentToLocal);
	return TangentToWorld;
}
FVertexFactoryIntermediatesCommon GetVertexFactoryCommonIntermediates(FSceneDataIntermediates SceneData, FVertexFactoryInstanceInput InstanceInput)
{
	FVertexFactoryIntermediatesCommon Intermediates = (FVertexFactoryIntermediatesCommon)0;
	Intermediates.SceneData = SceneData;
	return Intermediates;
}
FVertexFactoryIntermediates GetVertexFactoryIntermediates(FVertexFactoryInput Input)
{
	FVertexFactoryIntermediates Intermediates = (FVertexFactoryIntermediates)0;
	Intermediates.Common =  GetVertexFactoryCommonIntermediates( GetSceneDataIntermediates( Input .InstanceIdOffset, Input .DrawInstanceId),  InitInstanceInput());
	FPrimitiveSceneData PrimitiveData = GetPrimitiveData(Intermediates);
	FInstanceSceneData InstanceData = GetInstanceData(Intermediates);
		Intermediates.bEvaluateWorldPositionOffset = (Intermediates.Common.SceneData.CullingFlags & (1u << 0u)) != 0;
	Intermediates.IsVisible = 1.0f;
	Intermediates.PrimitiveLocalInstanceIndex = Intermediates.Common.SceneData.InstanceId - PrimitiveData.InstanceSceneDataOffset;
	Intermediates.InstanceLightMapAndShadowMapUVBias = InstanceData.LightMapAndShadowMapUVBias;
	Intermediates.IsSelected = InstanceData.EditorData.bIsSelected ? 1.0f : 0.0f;
	Intermediates.HitProxyId = float4(InstanceData.EditorData.HitProxyId, 0.0f);
	{
		float3 InstanceTranslatedLocation = TransformLocalToTranslatedWorld(GetInstanceData(Intermediates).LocalBoundsCenter, GetInstanceData(Intermediates).LocalToWorld).xyz;
		Intermediates.PerInstanceParams.x = 1.0 - saturate((length(InstanceTranslatedLocation) - InstancedVFLooseParameters.InstancingFadeOutParams.x) * InstancedVFLooseParameters.InstancingFadeOutParams.y);
		Intermediates.IsVisible = lerp(InstancedVFLooseParameters.InstancingFadeOutParams.w, InstancedVFLooseParameters.InstancingFadeOutParams.z, Intermediates.IsSelected);
		Intermediates.PerInstanceParams.y = Intermediates.IsVisible;
		float RandomLOD = InstancedVFLooseParameters.InstancingViewZCompareZero.w * InstanceData.RandomID; 
		float ViewZZero = length(InstanceTranslatedLocation - InstancedVFLooseParameters.InstancingTranslatedWorldViewOriginZero.xyz) + RandomLOD;
		float ViewZOne = length(InstanceTranslatedLocation - InstancedVFLooseParameters.InstancingTranslatedWorldViewOriginOne.xyz) + RandomLOD;
		Intermediates.PerInstanceParams.z =
			dot(float3(ViewZZero.xxx > InstancedVFLooseParameters.InstancingViewZCompareZero.xyz), InstancedVFLooseParameters.InstancingViewZConstant.xyz) * InstancedVFLooseParameters.InstancingTranslatedWorldViewOriginZero.w +
			dot(float3(ViewZOne.xxx > InstancedVFLooseParameters.InstancingViewZCompareOne.xyz), InstancedVFLooseParameters.InstancingViewZConstant.xyz) * InstancedVFLooseParameters.InstancingTranslatedWorldViewOriginOne.w;
		Intermediates.PerInstanceParams.y *= abs(Intermediates.PerInstanceParams.z) < .999;
		Intermediates.IsVisible = Intermediates.PerInstanceParams.y;
		if (Intermediates.IsVisible == 0.0f)
		{
			Intermediates.bEvaluateWorldPositionOffset = false;
		}
	}
	Intermediates.Color = LocalVF_VertexFetch_ColorComponentsBuffer[(LocalVF.VertexFetch_Parameters[3] + Input.VertexId) & LocalVF.VertexFetch_Parameters[0]] .bgra; 
	float TangentSign = 1.0;
	Intermediates.TangentToLocal = CalcTangentToLocal(Input, Intermediates, TangentSign);
	Intermediates.TangentToWorld = CalcTangentToWorld(Intermediates, Intermediates.TangentToLocal);
	Intermediates.TangentToWorldSign = TangentSign * GetInstanceData(Intermediates).DeterminantSign;
	const float InstanceViewDistSq = length2(DFFastToTranslatedWorld(PrimitiveData.ObjectWorldPosition, ResolvedView.PreViewTranslation));
	if (IsGPUSkinPassThrough())
	{
	}
	else
	{
		Intermediates.PreSkinPosition = Input.Position.xyz;
	}
	return Intermediates;
}
float3x3 VertexFactoryGetTangentToLocal( FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates )
{
	return Intermediates.TangentToLocal;
}
float4 VertexFactoryGetWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	FDFMatrix LocalToWorld = GetInstanceData(Intermediates).LocalToWorld;
	return CalcWorldPosition(Intermediates.Common, Input.Position, LocalToWorld) * Intermediates.IsVisible;
}
float4 VertexFactoryGetRasterizedWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float4 InWorldPosition)
{
	return InWorldPosition;
}
FVertexFactoryInterpolantsVSToPS VertexFactoryGetInterpolantsVSToPS(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, FMaterialVertexParameters VertexParameters)
{
	FVertexFactoryInterpolantsVSToPS Interpolants;
	Interpolants = (FVertexFactoryInterpolantsVSToPS)0;
	FInstanceSceneData InstanceData = GetInstanceData(Intermediates);
	float2 CustomizedUVs[1];
	GetMaterialCustomizedUVs(VertexParameters, CustomizedUVs);
	GetCustomInterpolators(VertexParameters, CustomizedUVs);
	[unroll]
	for (int CoordinateIndex = 0; CoordinateIndex < 1; CoordinateIndex++)
	{
		SetUV(Interpolants, CoordinateIndex, CustomizedUVs[CoordinateIndex]);
	}
	SetTangents(Interpolants, Intermediates.TangentToWorld[0], Intermediates.TangentToWorld[2], Intermediates.TangentToWorldSign);
	SetColor(Interpolants, Intermediates.Color);
	Interpolants.PerInstanceParams = Intermediates.PerInstanceParams;
	SetPrimitiveId(Interpolants, Intermediates.Common.SceneData.PrimitiveId);
	return Interpolants;
}
float4 VertexFactoryGetWorldPosition(FPositionOnlyVertexFactoryInput Input)
{
	FVertexFactoryIntermediatesCommon Intermediates =  GetVertexFactoryCommonIntermediates( GetSceneDataIntermediates( Input .InstanceIdOffset, Input .DrawInstanceId),  InitInstanceInput());
	FDFMatrix LocalToWorld = GetInstanceData(Intermediates).LocalToWorld;
	return CalcWorldPosition(Intermediates, Input.Position, LocalToWorld);
}
float4 VertexFactoryGetWorldPosition(FPositionAndNormalOnlyVertexFactoryInput Input)
{
	FVertexFactoryIntermediatesCommon Intermediates =  GetVertexFactoryCommonIntermediates( GetSceneDataIntermediates( Input .InstanceIdOffset, Input .DrawInstanceId),  InitInstanceInput());
	FDFMatrix LocalToWorld = GetInstanceData(Intermediates).LocalToWorld;
	return CalcWorldPosition(Intermediates, Input.Position, LocalToWorld);
}
float4 VertexFactoryGetInstanceHitProxyId(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	return Intermediates.HitProxyId;
}
FSceneDataIntermediates GetSceneDataIntermediates(FVertexFactoryIntermediates Intermediates)
{
	return Intermediates.Common.SceneData;
}
struct FHitProxyVSToPS
{
	FVertexFactoryInterpolantsVSToPS FactoryInterpolants;
	float4 InstanceHitProxyId : HIT_PROXY_ID;
	float4 PixelPosition : TEXCOORD6;
	float3 PixelPositionExcludingWPO : TEXCOORD7;
	  float4 Position : SV_POSITION;
};
void Main(
	FVertexFactoryInput Input,
	out FHitProxyVSToPS Output
	)
{
	ResolvedView =  (ResolveView());
	FVertexFactoryIntermediates VFIntermediates = GetVertexFactoryIntermediates(Input);
	float4 WorldPosition = VertexFactoryGetWorldPosition(Input, VFIntermediates);
	float4 WorldPositionExcludingWPO = WorldPosition;
	float3x3 TangentToLocal = VertexFactoryGetTangentToLocal(Input, VFIntermediates);
	FMaterialVertexParameters VertexParameters = GetMaterialVertexParameters(Input, VFIntermediates, WorldPosition.xyz, TangentToLocal);
	WorldPosition.xyz += GetMaterialWorldPositionOffset(VertexParameters);
	Output.InstanceHitProxyId = VertexFactoryGetInstanceHitProxyId(Input, VFIntermediates);
	{
		float4 RasterizedWorldPosition = VertexFactoryGetRasterizedWorldPosition(Input, VFIntermediates, WorldPosition);
		Output.Position =  MakePrecise( mul(RasterizedWorldPosition, ResolvedView.TranslatedWorldToClip) );
	}
	Output.FactoryInterpolants = VertexFactoryGetInterpolantsVSToPS(Input, VFIntermediates, VertexParameters);
	Output.PixelPosition = WorldPosition;
	Output.PixelPositionExcludingWPO = WorldPositionExcludingWPO.xyz;
}

/* BASE64_ENV

BASE64_ENV */
/* DIRECT COMPILE
-directcompile -format=PCD3D_SM6 -entry="Main" -shaderPlatformName=PCD3D_SM6 -supportedHardwareMask=0 -vs D:/Games Dev/SoftwareDevCa4/CollegeSimulator/Saved/ShaderDebugInfo/PCD3D_SM6/MA_Summer_acfaa3a0fb0f7b2d/Default/FInstancedStaticMeshVertexFactory/FHitProxyVS/0/HitProxyVertexShader.usf -nocrashreports
DIRECT COMPILE */
